// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youme_mask_usermsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "youme_mask_usermsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YOUMEServiceProtocol {

void protobuf_ShutdownFile_youme_5fmask_5fusermsg_2eproto() {
  delete SetMaskMsgUserReq::default_instance_;
  delete SetMaskMsgUserRsp::default_instance_;
  delete GetMaskMsgUserReq::default_instance_;
  delete GetMaskMsgUserRsp::default_instance_;
  delete CleanMaskMsgUserReq::default_instance_;
  delete CleanMaskMsgUserRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_youme_5fmask_5fusermsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_youme_5fmask_5fusermsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  SetMaskMsgUserReq::default_instance_ = new SetMaskMsgUserReq();
  SetMaskMsgUserRsp::default_instance_ = new SetMaskMsgUserRsp();
  GetMaskMsgUserReq::default_instance_ = new GetMaskMsgUserReq();
  GetMaskMsgUserRsp::default_instance_ = new GetMaskMsgUserRsp();
  CleanMaskMsgUserReq::default_instance_ = new CleanMaskMsgUserReq();
  CleanMaskMsgUserRsp::default_instance_ = new CleanMaskMsgUserRsp();
  SetMaskMsgUserReq::default_instance_->InitAsDefaultInstance();
  SetMaskMsgUserRsp::default_instance_->InitAsDefaultInstance();
  GetMaskMsgUserReq::default_instance_->InitAsDefaultInstance();
  GetMaskMsgUserRsp::default_instance_->InitAsDefaultInstance();
  CleanMaskMsgUserReq::default_instance_->InitAsDefaultInstance();
  CleanMaskMsgUserRsp::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_youme_5fmask_5fusermsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_youme_5fmask_5fusermsg_2eproto_once_);
void protobuf_AddDesc_youme_5fmask_5fusermsg_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_youme_5fmask_5fusermsg_2eproto_once_,
                 &protobuf_AddDesc_youme_5fmask_5fusermsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_youme_5fmask_5fusermsg_2eproto {
  StaticDescriptorInitializer_youme_5fmask_5fusermsg_2eproto() {
    protobuf_AddDesc_youme_5fmask_5fusermsg_2eproto();
  }
} static_descriptor_initializer_youme_5fmask_5fusermsg_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int SetMaskMsgUserReq::kVersionFieldNumber;
const int SetMaskMsgUserReq::kRoomIdFieldNumber;
const int SetMaskMsgUserReq::kMaskRightFieldNumber;
const int SetMaskMsgUserReq::kMaskUserListFieldNumber;
#endif  // !_MSC_VER

SetMaskMsgUserReq::SetMaskMsgUserReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.SetMaskMsgUserReq)
}

void SetMaskMsgUserReq::InitAsDefaultInstance() {
}

SetMaskMsgUserReq::SetMaskMsgUserReq(const SetMaskMsgUserReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.SetMaskMsgUserReq)
}

void SetMaskMsgUserReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  room_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_right_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetMaskMsgUserReq::~SetMaskMsgUserReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.SetMaskMsgUserReq)
  SharedDtor();
}

void SetMaskMsgUserReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SetMaskMsgUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SetMaskMsgUserReq& SetMaskMsgUserReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fmask_5fusermsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fmask_5fusermsg_2eproto();
#endif
  return *default_instance_;
}

SetMaskMsgUserReq* SetMaskMsgUserReq::default_instance_ = NULL;

SetMaskMsgUserReq* SetMaskMsgUserReq::New(::youmecommon::protobuf::Arena* arena) const {
  SetMaskMsgUserReq* n = new SetMaskMsgUserReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetMaskMsgUserReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SetMaskMsgUserReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(version_, mask_right_);
    if (has_room_id()) {
      room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  mask_user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SetMaskMsgUserReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.SetMaskMsgUserReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_room_id;
        break;
      }

      // required bytes room_id = 2;
      case 2: {
        if (tag == 18) {
         parse_room_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_room_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mask_right;
        break;
      }

      // required int32 mask_right = 3;
      case 3: {
        if (tag == 24) {
         parse_mask_right:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask_right_)));
          set_has_mask_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mask_user_list;
        break;
      }

      // repeated bytes mask_user_list = 4;
      case 4: {
        if (tag == 34) {
         parse_mask_user_list:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_mask_user_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mask_user_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.SetMaskMsgUserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.SetMaskMsgUserReq)
  return false;
#undef DO_
}

void SetMaskMsgUserReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.SetMaskMsgUserReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required bytes room_id = 2;
  if (has_room_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->room_id(), output);
  }

  // required int32 mask_right = 3;
  if (has_mask_right()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->mask_right(), output);
  }

  // repeated bytes mask_user_list = 4;
  for (int i = 0; i < this->mask_user_list_size(); i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->mask_user_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.SetMaskMsgUserReq)
}

int SetMaskMsgUserReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_room_id()) {
    // required bytes room_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->room_id());
  }

  if (has_mask_right()) {
    // required int32 mask_right = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->mask_right());
  }

  return total_size;
}
int SetMaskMsgUserReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required bytes room_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->room_id());

    // required int32 mask_right = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->mask_right());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated bytes mask_user_list = 4;
  total_size += 1 * this->mask_user_list_size();
  for (int i = 0; i < this->mask_user_list_size(); i++) {
    total_size += ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
      this->mask_user_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetMaskMsgUserReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const SetMaskMsgUserReq*>(&from));
}

void SetMaskMsgUserReq::MergeFrom(const SetMaskMsgUserReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  mask_user_list_.MergeFrom(from.mask_user_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_room_id()) {
      set_has_room_id();
      room_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id_);
    }
    if (from.has_mask_right()) {
      set_mask_right(from.mask_right());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SetMaskMsgUserReq::CopyFrom(const SetMaskMsgUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMaskMsgUserReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SetMaskMsgUserReq::Swap(SetMaskMsgUserReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetMaskMsgUserReq::InternalSwap(SetMaskMsgUserReq* other) {
  std::swap(version_, other->version_);
  room_id_.Swap(&other->room_id_);
  std::swap(mask_right_, other->mask_right_);
  mask_user_list_.UnsafeArenaSwap(&other->mask_user_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SetMaskMsgUserReq::GetTypeName() const {
  return "YOUMEServiceProtocol.SetMaskMsgUserReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetMaskMsgUserReq

// required int32 version = 1;
bool SetMaskMsgUserReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SetMaskMsgUserReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void SetMaskMsgUserReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void SetMaskMsgUserReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 SetMaskMsgUserReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SetMaskMsgUserReq.version)
  return version_;
}
 void SetMaskMsgUserReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.SetMaskMsgUserReq.version)
}

// required bytes room_id = 2;
bool SetMaskMsgUserReq::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SetMaskMsgUserReq::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SetMaskMsgUserReq::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SetMaskMsgUserReq::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
 const ::std::string& SetMaskMsgUserReq::room_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SetMaskMsgUserReq.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SetMaskMsgUserReq::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.SetMaskMsgUserReq.room_id)
}
 void SetMaskMsgUserReq::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.SetMaskMsgUserReq.room_id)
}
 void SetMaskMsgUserReq::set_room_id(const void* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.SetMaskMsgUserReq.room_id)
}
 ::std::string* SetMaskMsgUserReq::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.SetMaskMsgUserReq.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SetMaskMsgUserReq::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SetMaskMsgUserReq::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.SetMaskMsgUserReq.room_id)
}

// required int32 mask_right = 3;
bool SetMaskMsgUserReq::has_mask_right() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SetMaskMsgUserReq::set_has_mask_right() {
  _has_bits_[0] |= 0x00000004u;
}
void SetMaskMsgUserReq::clear_has_mask_right() {
  _has_bits_[0] &= ~0x00000004u;
}
void SetMaskMsgUserReq::clear_mask_right() {
  mask_right_ = 0;
  clear_has_mask_right();
}
 ::youmecommon::protobuf::int32 SetMaskMsgUserReq::mask_right() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SetMaskMsgUserReq.mask_right)
  return mask_right_;
}
 void SetMaskMsgUserReq::set_mask_right(::youmecommon::protobuf::int32 value) {
  set_has_mask_right();
  mask_right_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.SetMaskMsgUserReq.mask_right)
}

// repeated bytes mask_user_list = 4;
int SetMaskMsgUserReq::mask_user_list_size() const {
  return mask_user_list_.size();
}
void SetMaskMsgUserReq::clear_mask_user_list() {
  mask_user_list_.Clear();
}
 const ::std::string& SetMaskMsgUserReq::mask_user_list(int index) const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SetMaskMsgUserReq.mask_user_list)
  return mask_user_list_.Get(index);
}
 ::std::string* SetMaskMsgUserReq::mutable_mask_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.SetMaskMsgUserReq.mask_user_list)
  return mask_user_list_.Mutable(index);
}
 void SetMaskMsgUserReq::set_mask_user_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.SetMaskMsgUserReq.mask_user_list)
  mask_user_list_.Mutable(index)->assign(value);
}
 void SetMaskMsgUserReq::set_mask_user_list(int index, const char* value) {
  mask_user_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.SetMaskMsgUserReq.mask_user_list)
}
 void SetMaskMsgUserReq::set_mask_user_list(int index, const void* value, size_t size) {
  mask_user_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.SetMaskMsgUserReq.mask_user_list)
}
 ::std::string* SetMaskMsgUserReq::add_mask_user_list() {
  return mask_user_list_.Add();
}
 void SetMaskMsgUserReq::add_mask_user_list(const ::std::string& value) {
  mask_user_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:YOUMEServiceProtocol.SetMaskMsgUserReq.mask_user_list)
}
 void SetMaskMsgUserReq::add_mask_user_list(const char* value) {
  mask_user_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:YOUMEServiceProtocol.SetMaskMsgUserReq.mask_user_list)
}
 void SetMaskMsgUserReq::add_mask_user_list(const void* value, size_t size) {
  mask_user_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:YOUMEServiceProtocol.SetMaskMsgUserReq.mask_user_list)
}
 const ::youmecommon::protobuf::RepeatedPtrField< ::std::string>&
SetMaskMsgUserReq::mask_user_list() const {
  // @@protoc_insertion_point(field_list:YOUMEServiceProtocol.SetMaskMsgUserReq.mask_user_list)
  return mask_user_list_;
}
 ::youmecommon::protobuf::RepeatedPtrField< ::std::string>*
SetMaskMsgUserReq::mutable_mask_user_list() {
  // @@protoc_insertion_point(field_mutable_list:YOUMEServiceProtocol.SetMaskMsgUserReq.mask_user_list)
  return &mask_user_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SetMaskMsgUserRsp::kVersionFieldNumber;
const int SetMaskMsgUserRsp::kRetFieldNumber;
#endif  // !_MSC_VER

SetMaskMsgUserRsp::SetMaskMsgUserRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.SetMaskMsgUserRsp)
}

void SetMaskMsgUserRsp::InitAsDefaultInstance() {
}

SetMaskMsgUserRsp::SetMaskMsgUserRsp(const SetMaskMsgUserRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.SetMaskMsgUserRsp)
}

void SetMaskMsgUserRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetMaskMsgUserRsp::~SetMaskMsgUserRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.SetMaskMsgUserRsp)
  SharedDtor();
}

void SetMaskMsgUserRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SetMaskMsgUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SetMaskMsgUserRsp& SetMaskMsgUserRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fmask_5fusermsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fmask_5fusermsg_2eproto();
#endif
  return *default_instance_;
}

SetMaskMsgUserRsp* SetMaskMsgUserRsp::default_instance_ = NULL;

SetMaskMsgUserRsp* SetMaskMsgUserRsp::New(::youmecommon::protobuf::Arena* arena) const {
  SetMaskMsgUserRsp* n = new SetMaskMsgUserRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetMaskMsgUserRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SetMaskMsgUserRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, ret_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SetMaskMsgUserRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.SetMaskMsgUserRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.SetMaskMsgUserRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.SetMaskMsgUserRsp)
  return false;
#undef DO_
}

void SetMaskMsgUserRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.SetMaskMsgUserRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.SetMaskMsgUserRsp)
}

int SetMaskMsgUserRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  return total_size;
}
int SetMaskMsgUserRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetMaskMsgUserRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const SetMaskMsgUserRsp*>(&from));
}

void SetMaskMsgUserRsp::MergeFrom(const SetMaskMsgUserRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SetMaskMsgUserRsp::CopyFrom(const SetMaskMsgUserRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMaskMsgUserRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SetMaskMsgUserRsp::Swap(SetMaskMsgUserRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetMaskMsgUserRsp::InternalSwap(SetMaskMsgUserRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SetMaskMsgUserRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.SetMaskMsgUserRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetMaskMsgUserRsp

// required int32 version = 1;
bool SetMaskMsgUserRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SetMaskMsgUserRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void SetMaskMsgUserRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void SetMaskMsgUserRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 SetMaskMsgUserRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SetMaskMsgUserRsp.version)
  return version_;
}
 void SetMaskMsgUserRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.SetMaskMsgUserRsp.version)
}

// required int32 ret = 2;
bool SetMaskMsgUserRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SetMaskMsgUserRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void SetMaskMsgUserRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void SetMaskMsgUserRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 SetMaskMsgUserRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SetMaskMsgUserRsp.ret)
  return ret_;
}
 void SetMaskMsgUserRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.SetMaskMsgUserRsp.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetMaskMsgUserReq::kVersionFieldNumber;
const int GetMaskMsgUserReq::kRoomIdFieldNumber;
const int GetMaskMsgUserReq::kMaskRightFieldNumber;
const int GetMaskMsgUserReq::kMaskSeqFieldNumber;
const int GetMaskMsgUserReq::kNumberLimitFieldNumber;
#endif  // !_MSC_VER

GetMaskMsgUserReq::GetMaskMsgUserReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.GetMaskMsgUserReq)
}

void GetMaskMsgUserReq::InitAsDefaultInstance() {
}

GetMaskMsgUserReq::GetMaskMsgUserReq(const GetMaskMsgUserReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.GetMaskMsgUserReq)
}

void GetMaskMsgUserReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  room_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_right_ = 0;
  mask_seq_ = GOOGLE_ULONGLONG(0);
  number_limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMaskMsgUserReq::~GetMaskMsgUserReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.GetMaskMsgUserReq)
  SharedDtor();
}

void GetMaskMsgUserReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetMaskMsgUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetMaskMsgUserReq& GetMaskMsgUserReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fmask_5fusermsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fmask_5fusermsg_2eproto();
#endif
  return *default_instance_;
}

GetMaskMsgUserReq* GetMaskMsgUserReq::default_instance_ = NULL;

GetMaskMsgUserReq* GetMaskMsgUserReq::New(::youmecommon::protobuf::Arena* arena) const {
  GetMaskMsgUserReq* n = new GetMaskMsgUserReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMaskMsgUserReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetMaskMsgUserReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(version_, number_limit_);
    if (has_room_id()) {
      room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetMaskMsgUserReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.GetMaskMsgUserReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_room_id;
        break;
      }

      // required bytes room_id = 2;
      case 2: {
        if (tag == 18) {
         parse_room_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_room_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mask_right;
        break;
      }

      // required int32 mask_right = 3;
      case 3: {
        if (tag == 24) {
         parse_mask_right:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask_right_)));
          set_has_mask_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mask_seq;
        break;
      }

      // required uint64 mask_seq = 4;
      case 4: {
        if (tag == 32) {
         parse_mask_seq:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mask_seq_)));
          set_has_mask_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_number_limit;
        break;
      }

      // optional uint32 number_limit = 5;
      case 5: {
        if (tag == 40) {
         parse_number_limit:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_limit_)));
          set_has_number_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.GetMaskMsgUserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.GetMaskMsgUserReq)
  return false;
#undef DO_
}

void GetMaskMsgUserReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.GetMaskMsgUserReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required bytes room_id = 2;
  if (has_room_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->room_id(), output);
  }

  // required int32 mask_right = 3;
  if (has_mask_right()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->mask_right(), output);
  }

  // required uint64 mask_seq = 4;
  if (has_mask_seq()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt64(4, this->mask_seq(), output);
  }

  // optional uint32 number_limit = 5;
  if (has_number_limit()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(5, this->number_limit(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.GetMaskMsgUserReq)
}

int GetMaskMsgUserReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_room_id()) {
    // required bytes room_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->room_id());
  }

  if (has_mask_right()) {
    // required int32 mask_right = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->mask_right());
  }

  if (has_mask_seq()) {
    // required uint64 mask_seq = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->mask_seq());
  }

  return total_size;
}
int GetMaskMsgUserReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required bytes room_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->room_id());

    // required int32 mask_right = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->mask_right());

    // required uint64 mask_seq = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->mask_seq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 number_limit = 5;
  if (has_number_limit()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_limit());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMaskMsgUserReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetMaskMsgUserReq*>(&from));
}

void GetMaskMsgUserReq::MergeFrom(const GetMaskMsgUserReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_room_id()) {
      set_has_room_id();
      room_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id_);
    }
    if (from.has_mask_right()) {
      set_mask_right(from.mask_right());
    }
    if (from.has_mask_seq()) {
      set_mask_seq(from.mask_seq());
    }
    if (from.has_number_limit()) {
      set_number_limit(from.number_limit());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetMaskMsgUserReq::CopyFrom(const GetMaskMsgUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMaskMsgUserReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GetMaskMsgUserReq::Swap(GetMaskMsgUserReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMaskMsgUserReq::InternalSwap(GetMaskMsgUserReq* other) {
  std::swap(version_, other->version_);
  room_id_.Swap(&other->room_id_);
  std::swap(mask_right_, other->mask_right_);
  std::swap(mask_seq_, other->mask_seq_);
  std::swap(number_limit_, other->number_limit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetMaskMsgUserReq::GetTypeName() const {
  return "YOUMEServiceProtocol.GetMaskMsgUserReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMaskMsgUserReq

// required int32 version = 1;
bool GetMaskMsgUserReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetMaskMsgUserReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GetMaskMsgUserReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetMaskMsgUserReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 GetMaskMsgUserReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetMaskMsgUserReq.version)
  return version_;
}
 void GetMaskMsgUserReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetMaskMsgUserReq.version)
}

// required bytes room_id = 2;
bool GetMaskMsgUserReq::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetMaskMsgUserReq::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
void GetMaskMsgUserReq::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetMaskMsgUserReq::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
 const ::std::string& GetMaskMsgUserReq::room_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetMaskMsgUserReq.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetMaskMsgUserReq::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetMaskMsgUserReq.room_id)
}
 void GetMaskMsgUserReq::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.GetMaskMsgUserReq.room_id)
}
 void GetMaskMsgUserReq::set_room_id(const void* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.GetMaskMsgUserReq.room_id)
}
 ::std::string* GetMaskMsgUserReq::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.GetMaskMsgUserReq.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetMaskMsgUserReq::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetMaskMsgUserReq::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.GetMaskMsgUserReq.room_id)
}

// required int32 mask_right = 3;
bool GetMaskMsgUserReq::has_mask_right() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetMaskMsgUserReq::set_has_mask_right() {
  _has_bits_[0] |= 0x00000004u;
}
void GetMaskMsgUserReq::clear_has_mask_right() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetMaskMsgUserReq::clear_mask_right() {
  mask_right_ = 0;
  clear_has_mask_right();
}
 ::youmecommon::protobuf::int32 GetMaskMsgUserReq::mask_right() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetMaskMsgUserReq.mask_right)
  return mask_right_;
}
 void GetMaskMsgUserReq::set_mask_right(::youmecommon::protobuf::int32 value) {
  set_has_mask_right();
  mask_right_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetMaskMsgUserReq.mask_right)
}

// required uint64 mask_seq = 4;
bool GetMaskMsgUserReq::has_mask_seq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetMaskMsgUserReq::set_has_mask_seq() {
  _has_bits_[0] |= 0x00000008u;
}
void GetMaskMsgUserReq::clear_has_mask_seq() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetMaskMsgUserReq::clear_mask_seq() {
  mask_seq_ = GOOGLE_ULONGLONG(0);
  clear_has_mask_seq();
}
 ::youmecommon::protobuf::uint64 GetMaskMsgUserReq::mask_seq() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetMaskMsgUserReq.mask_seq)
  return mask_seq_;
}
 void GetMaskMsgUserReq::set_mask_seq(::youmecommon::protobuf::uint64 value) {
  set_has_mask_seq();
  mask_seq_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetMaskMsgUserReq.mask_seq)
}

// optional uint32 number_limit = 5;
bool GetMaskMsgUserReq::has_number_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetMaskMsgUserReq::set_has_number_limit() {
  _has_bits_[0] |= 0x00000010u;
}
void GetMaskMsgUserReq::clear_has_number_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetMaskMsgUserReq::clear_number_limit() {
  number_limit_ = 0u;
  clear_has_number_limit();
}
 ::youmecommon::protobuf::uint32 GetMaskMsgUserReq::number_limit() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetMaskMsgUserReq.number_limit)
  return number_limit_;
}
 void GetMaskMsgUserReq::set_number_limit(::youmecommon::protobuf::uint32 value) {
  set_has_number_limit();
  number_limit_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetMaskMsgUserReq.number_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetMaskMsgUserRsp::kVersionFieldNumber;
const int GetMaskMsgUserRsp::kRetFieldNumber;
const int GetMaskMsgUserRsp::kUserCntFieldNumber;
const int GetMaskMsgUserRsp::kMaskSeqFieldNumber;
const int GetMaskMsgUserRsp::kMaskUserListFieldNumber;
#endif  // !_MSC_VER

GetMaskMsgUserRsp::GetMaskMsgUserRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.GetMaskMsgUserRsp)
}

void GetMaskMsgUserRsp::InitAsDefaultInstance() {
}

GetMaskMsgUserRsp::GetMaskMsgUserRsp(const GetMaskMsgUserRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.GetMaskMsgUserRsp)
}

void GetMaskMsgUserRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  user_cnt_ = 0u;
  mask_seq_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMaskMsgUserRsp::~GetMaskMsgUserRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.GetMaskMsgUserRsp)
  SharedDtor();
}

void GetMaskMsgUserRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetMaskMsgUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetMaskMsgUserRsp& GetMaskMsgUserRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fmask_5fusermsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fmask_5fusermsg_2eproto();
#endif
  return *default_instance_;
}

GetMaskMsgUserRsp* GetMaskMsgUserRsp::default_instance_ = NULL;

GetMaskMsgUserRsp* GetMaskMsgUserRsp::New(::youmecommon::protobuf::Arena* arena) const {
  GetMaskMsgUserRsp* n = new GetMaskMsgUserRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMaskMsgUserRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetMaskMsgUserRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(version_, mask_seq_);
    user_cnt_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  mask_user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetMaskMsgUserRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.GetMaskMsgUserRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_cnt;
        break;
      }

      // required uint32 user_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_user_cnt:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_cnt_)));
          set_has_user_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mask_seq;
        break;
      }

      // required uint64 mask_seq = 4;
      case 4: {
        if (tag == 32) {
         parse_mask_seq:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mask_seq_)));
          set_has_mask_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mask_user_list;
        break;
      }

      // repeated bytes mask_user_list = 5;
      case 5: {
        if (tag == 42) {
         parse_mask_user_list:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_mask_user_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mask_user_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.GetMaskMsgUserRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.GetMaskMsgUserRsp)
  return false;
#undef DO_
}

void GetMaskMsgUserRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.GetMaskMsgUserRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // required uint32 user_cnt = 3;
  if (has_user_cnt()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(3, this->user_cnt(), output);
  }

  // required uint64 mask_seq = 4;
  if (has_mask_seq()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt64(4, this->mask_seq(), output);
  }

  // repeated bytes mask_user_list = 5;
  for (int i = 0; i < this->mask_user_list_size(); i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->mask_user_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.GetMaskMsgUserRsp)
}

int GetMaskMsgUserRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_user_cnt()) {
    // required uint32 user_cnt = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_cnt());
  }

  if (has_mask_seq()) {
    // required uint64 mask_seq = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->mask_seq());
  }

  return total_size;
}
int GetMaskMsgUserRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required uint32 user_cnt = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_cnt());

    // required uint64 mask_seq = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->mask_seq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated bytes mask_user_list = 5;
  total_size += 1 * this->mask_user_list_size();
  for (int i = 0; i < this->mask_user_list_size(); i++) {
    total_size += ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
      this->mask_user_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMaskMsgUserRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetMaskMsgUserRsp*>(&from));
}

void GetMaskMsgUserRsp::MergeFrom(const GetMaskMsgUserRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  mask_user_list_.MergeFrom(from.mask_user_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_user_cnt()) {
      set_user_cnt(from.user_cnt());
    }
    if (from.has_mask_seq()) {
      set_mask_seq(from.mask_seq());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetMaskMsgUserRsp::CopyFrom(const GetMaskMsgUserRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMaskMsgUserRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GetMaskMsgUserRsp::Swap(GetMaskMsgUserRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMaskMsgUserRsp::InternalSwap(GetMaskMsgUserRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(user_cnt_, other->user_cnt_);
  std::swap(mask_seq_, other->mask_seq_);
  mask_user_list_.UnsafeArenaSwap(&other->mask_user_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetMaskMsgUserRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.GetMaskMsgUserRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMaskMsgUserRsp

// required int32 version = 1;
bool GetMaskMsgUserRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetMaskMsgUserRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GetMaskMsgUserRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetMaskMsgUserRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 GetMaskMsgUserRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetMaskMsgUserRsp.version)
  return version_;
}
 void GetMaskMsgUserRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetMaskMsgUserRsp.version)
}

// required int32 ret = 2;
bool GetMaskMsgUserRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetMaskMsgUserRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void GetMaskMsgUserRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetMaskMsgUserRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 GetMaskMsgUserRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetMaskMsgUserRsp.ret)
  return ret_;
}
 void GetMaskMsgUserRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetMaskMsgUserRsp.ret)
}

// required uint32 user_cnt = 3;
bool GetMaskMsgUserRsp::has_user_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetMaskMsgUserRsp::set_has_user_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
void GetMaskMsgUserRsp::clear_has_user_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetMaskMsgUserRsp::clear_user_cnt() {
  user_cnt_ = 0u;
  clear_has_user_cnt();
}
 ::youmecommon::protobuf::uint32 GetMaskMsgUserRsp::user_cnt() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetMaskMsgUserRsp.user_cnt)
  return user_cnt_;
}
 void GetMaskMsgUserRsp::set_user_cnt(::youmecommon::protobuf::uint32 value) {
  set_has_user_cnt();
  user_cnt_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetMaskMsgUserRsp.user_cnt)
}

// required uint64 mask_seq = 4;
bool GetMaskMsgUserRsp::has_mask_seq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetMaskMsgUserRsp::set_has_mask_seq() {
  _has_bits_[0] |= 0x00000008u;
}
void GetMaskMsgUserRsp::clear_has_mask_seq() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetMaskMsgUserRsp::clear_mask_seq() {
  mask_seq_ = GOOGLE_ULONGLONG(0);
  clear_has_mask_seq();
}
 ::youmecommon::protobuf::uint64 GetMaskMsgUserRsp::mask_seq() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetMaskMsgUserRsp.mask_seq)
  return mask_seq_;
}
 void GetMaskMsgUserRsp::set_mask_seq(::youmecommon::protobuf::uint64 value) {
  set_has_mask_seq();
  mask_seq_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetMaskMsgUserRsp.mask_seq)
}

// repeated bytes mask_user_list = 5;
int GetMaskMsgUserRsp::mask_user_list_size() const {
  return mask_user_list_.size();
}
void GetMaskMsgUserRsp::clear_mask_user_list() {
  mask_user_list_.Clear();
}
 const ::std::string& GetMaskMsgUserRsp::mask_user_list(int index) const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetMaskMsgUserRsp.mask_user_list)
  return mask_user_list_.Get(index);
}
 ::std::string* GetMaskMsgUserRsp::mutable_mask_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.GetMaskMsgUserRsp.mask_user_list)
  return mask_user_list_.Mutable(index);
}
 void GetMaskMsgUserRsp::set_mask_user_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetMaskMsgUserRsp.mask_user_list)
  mask_user_list_.Mutable(index)->assign(value);
}
 void GetMaskMsgUserRsp::set_mask_user_list(int index, const char* value) {
  mask_user_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.GetMaskMsgUserRsp.mask_user_list)
}
 void GetMaskMsgUserRsp::set_mask_user_list(int index, const void* value, size_t size) {
  mask_user_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.GetMaskMsgUserRsp.mask_user_list)
}
 ::std::string* GetMaskMsgUserRsp::add_mask_user_list() {
  return mask_user_list_.Add();
}
 void GetMaskMsgUserRsp::add_mask_user_list(const ::std::string& value) {
  mask_user_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:YOUMEServiceProtocol.GetMaskMsgUserRsp.mask_user_list)
}
 void GetMaskMsgUserRsp::add_mask_user_list(const char* value) {
  mask_user_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:YOUMEServiceProtocol.GetMaskMsgUserRsp.mask_user_list)
}
 void GetMaskMsgUserRsp::add_mask_user_list(const void* value, size_t size) {
  mask_user_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:YOUMEServiceProtocol.GetMaskMsgUserRsp.mask_user_list)
}
 const ::youmecommon::protobuf::RepeatedPtrField< ::std::string>&
GetMaskMsgUserRsp::mask_user_list() const {
  // @@protoc_insertion_point(field_list:YOUMEServiceProtocol.GetMaskMsgUserRsp.mask_user_list)
  return mask_user_list_;
}
 ::youmecommon::protobuf::RepeatedPtrField< ::std::string>*
GetMaskMsgUserRsp::mutable_mask_user_list() {
  // @@protoc_insertion_point(field_mutable_list:YOUMEServiceProtocol.GetMaskMsgUserRsp.mask_user_list)
  return &mask_user_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CleanMaskMsgUserReq::kVersionFieldNumber;
const int CleanMaskMsgUserReq::kRoomIdFieldNumber;
#endif  // !_MSC_VER

CleanMaskMsgUserReq::CleanMaskMsgUserReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.CleanMaskMsgUserReq)
}

void CleanMaskMsgUserReq::InitAsDefaultInstance() {
}

CleanMaskMsgUserReq::CleanMaskMsgUserReq(const CleanMaskMsgUserReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.CleanMaskMsgUserReq)
}

void CleanMaskMsgUserReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  room_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CleanMaskMsgUserReq::~CleanMaskMsgUserReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.CleanMaskMsgUserReq)
  SharedDtor();
}

void CleanMaskMsgUserReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CleanMaskMsgUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CleanMaskMsgUserReq& CleanMaskMsgUserReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fmask_5fusermsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fmask_5fusermsg_2eproto();
#endif
  return *default_instance_;
}

CleanMaskMsgUserReq* CleanMaskMsgUserReq::default_instance_ = NULL;

CleanMaskMsgUserReq* CleanMaskMsgUserReq::New(::youmecommon::protobuf::Arena* arena) const {
  CleanMaskMsgUserReq* n = new CleanMaskMsgUserReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CleanMaskMsgUserReq::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    version_ = 0;
    if (has_room_id()) {
      room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CleanMaskMsgUserReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.CleanMaskMsgUserReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_room_id;
        break;
      }

      // required bytes room_id = 2;
      case 2: {
        if (tag == 18) {
         parse_room_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_room_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.CleanMaskMsgUserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.CleanMaskMsgUserReq)
  return false;
#undef DO_
}

void CleanMaskMsgUserReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.CleanMaskMsgUserReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required bytes room_id = 2;
  if (has_room_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->room_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.CleanMaskMsgUserReq)
}

int CleanMaskMsgUserReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_room_id()) {
    // required bytes room_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->room_id());
  }

  return total_size;
}
int CleanMaskMsgUserReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required bytes room_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->room_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanMaskMsgUserReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const CleanMaskMsgUserReq*>(&from));
}

void CleanMaskMsgUserReq::MergeFrom(const CleanMaskMsgUserReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_room_id()) {
      set_has_room_id();
      room_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CleanMaskMsgUserReq::CopyFrom(const CleanMaskMsgUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanMaskMsgUserReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CleanMaskMsgUserReq::Swap(CleanMaskMsgUserReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CleanMaskMsgUserReq::InternalSwap(CleanMaskMsgUserReq* other) {
  std::swap(version_, other->version_);
  room_id_.Swap(&other->room_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CleanMaskMsgUserReq::GetTypeName() const {
  return "YOUMEServiceProtocol.CleanMaskMsgUserReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanMaskMsgUserReq

// required int32 version = 1;
bool CleanMaskMsgUserReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CleanMaskMsgUserReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CleanMaskMsgUserReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CleanMaskMsgUserReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 CleanMaskMsgUserReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CleanMaskMsgUserReq.version)
  return version_;
}
 void CleanMaskMsgUserReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CleanMaskMsgUserReq.version)
}

// required bytes room_id = 2;
bool CleanMaskMsgUserReq::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CleanMaskMsgUserReq::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CleanMaskMsgUserReq::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CleanMaskMsgUserReq::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
 const ::std::string& CleanMaskMsgUserReq::room_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CleanMaskMsgUserReq.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CleanMaskMsgUserReq::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CleanMaskMsgUserReq.room_id)
}
 void CleanMaskMsgUserReq::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.CleanMaskMsgUserReq.room_id)
}
 void CleanMaskMsgUserReq::set_room_id(const void* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.CleanMaskMsgUserReq.room_id)
}
 ::std::string* CleanMaskMsgUserReq::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.CleanMaskMsgUserReq.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CleanMaskMsgUserReq::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CleanMaskMsgUserReq::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.CleanMaskMsgUserReq.room_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CleanMaskMsgUserRsp::kVersionFieldNumber;
const int CleanMaskMsgUserRsp::kRetFieldNumber;
#endif  // !_MSC_VER

CleanMaskMsgUserRsp::CleanMaskMsgUserRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.CleanMaskMsgUserRsp)
}

void CleanMaskMsgUserRsp::InitAsDefaultInstance() {
}

CleanMaskMsgUserRsp::CleanMaskMsgUserRsp(const CleanMaskMsgUserRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.CleanMaskMsgUserRsp)
}

void CleanMaskMsgUserRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CleanMaskMsgUserRsp::~CleanMaskMsgUserRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.CleanMaskMsgUserRsp)
  SharedDtor();
}

void CleanMaskMsgUserRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CleanMaskMsgUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CleanMaskMsgUserRsp& CleanMaskMsgUserRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fmask_5fusermsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fmask_5fusermsg_2eproto();
#endif
  return *default_instance_;
}

CleanMaskMsgUserRsp* CleanMaskMsgUserRsp::default_instance_ = NULL;

CleanMaskMsgUserRsp* CleanMaskMsgUserRsp::New(::youmecommon::protobuf::Arena* arena) const {
  CleanMaskMsgUserRsp* n = new CleanMaskMsgUserRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CleanMaskMsgUserRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CleanMaskMsgUserRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, ret_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CleanMaskMsgUserRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.CleanMaskMsgUserRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.CleanMaskMsgUserRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.CleanMaskMsgUserRsp)
  return false;
#undef DO_
}

void CleanMaskMsgUserRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.CleanMaskMsgUserRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.CleanMaskMsgUserRsp)
}

int CleanMaskMsgUserRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  return total_size;
}
int CleanMaskMsgUserRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanMaskMsgUserRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const CleanMaskMsgUserRsp*>(&from));
}

void CleanMaskMsgUserRsp::MergeFrom(const CleanMaskMsgUserRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CleanMaskMsgUserRsp::CopyFrom(const CleanMaskMsgUserRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanMaskMsgUserRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CleanMaskMsgUserRsp::Swap(CleanMaskMsgUserRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CleanMaskMsgUserRsp::InternalSwap(CleanMaskMsgUserRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CleanMaskMsgUserRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.CleanMaskMsgUserRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanMaskMsgUserRsp

// required int32 version = 1;
bool CleanMaskMsgUserRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CleanMaskMsgUserRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CleanMaskMsgUserRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CleanMaskMsgUserRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 CleanMaskMsgUserRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CleanMaskMsgUserRsp.version)
  return version_;
}
 void CleanMaskMsgUserRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CleanMaskMsgUserRsp.version)
}

// required int32 ret = 2;
bool CleanMaskMsgUserRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CleanMaskMsgUserRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void CleanMaskMsgUserRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void CleanMaskMsgUserRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 CleanMaskMsgUserRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.CleanMaskMsgUserRsp.ret)
  return ret_;
}
 void CleanMaskMsgUserRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.CleanMaskMsgUserRsp.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YOUMEServiceProtocol

// @@protoc_insertion_point(global_scope)
