// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youme_rcuserinfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "youme_rcuserinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YOUMEServiceProtocol {

void protobuf_ShutdownFile_youme_5frcuserinfo_2eproto() {
  delete RcUserInfo::default_instance_;
  delete RcUserBriefInfo::default_instance_;
  delete RcHeartbeatReq::default_instance_;
  delete RcHeartbeatRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_youme_5frcuserinfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_youme_5frcuserinfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  RcUserInfo::default_instance_ = new RcUserInfo();
  RcUserBriefInfo::default_instance_ = new RcUserBriefInfo();
  RcHeartbeatReq::default_instance_ = new RcHeartbeatReq();
  RcHeartbeatRsp::default_instance_ = new RcHeartbeatRsp();
  RcUserInfo::default_instance_->InitAsDefaultInstance();
  RcUserBriefInfo::default_instance_->InitAsDefaultInstance();
  RcHeartbeatReq::default_instance_->InitAsDefaultInstance();
  RcHeartbeatRsp::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_youme_5frcuserinfo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_youme_5frcuserinfo_2eproto_once_);
void protobuf_AddDesc_youme_5frcuserinfo_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_youme_5frcuserinfo_2eproto_once_,
                 &protobuf_AddDesc_youme_5frcuserinfo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_youme_5frcuserinfo_2eproto {
  StaticDescriptorInitializer_youme_5frcuserinfo_2eproto() {
    protobuf_AddDesc_youme_5frcuserinfo_2eproto();
  }
} static_descriptor_initializer_youme_5frcuserinfo_2eproto_;
#endif
bool RC_ONLINE_STATE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int RcUserInfo::kUserIdFieldNumber;
const int RcUserInfo::kNicknameFieldNumber;
const int RcUserInfo::kGenderFieldNumber;
const int RcUserInfo::kCountryFieldNumber;
const int RcUserInfo::kProvinceFieldNumber;
const int RcUserInfo::kPrivacyFieldNumber;
const int RcUserInfo::kCityFieldNumber;
const int RcUserInfo::kAvatarFieldNumber;
const int RcUserInfo::kSignatureFieldNumber;
const int RcUserInfo::kExtandJsonFieldNumber;
const int RcUserInfo::kOnlineStateFieldNumber;
#endif  // !_MSC_VER

RcUserInfo::RcUserInfo()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.RcUserInfo)
}

void RcUserInfo::InitAsDefaultInstance() {
}

RcUserInfo::RcUserInfo(const RcUserInfo& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.RcUserInfo)
}

void RcUserInfo::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 0;
  country_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  province_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  privacy_ = 0;
  city_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  extand_json_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  online_state_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RcUserInfo::~RcUserInfo() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.RcUserInfo)
  SharedDtor();
}

void RcUserInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  province_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  extand_json_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RcUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RcUserInfo& RcUserInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frcuserinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frcuserinfo_2eproto();
#endif
  return *default_instance_;
}

RcUserInfo* RcUserInfo::default_instance_ = NULL;

RcUserInfo* RcUserInfo::New(::youmecommon::protobuf::Arena* arena) const {
  RcUserInfo* n = new RcUserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RcUserInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RcUserInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(gender_, privacy_);
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_nickname()) {
      nickname_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_country()) {
      country_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_province()) {
      province_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_city()) {
      city_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_avatar()) {
      avatar_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    if (has_signature()) {
      signature_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_extand_json()) {
      extand_json_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    online_state_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RcUserInfo::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.RcUserInfo)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional bytes nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gender;
        break;
      }

      // optional int32 gender = 3;
      case 3: {
        if (tag == 24) {
         parse_gender:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_country;
        break;
      }

      // optional bytes country = 4;
      case 4: {
        if (tag == 34) {
         parse_country:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_country()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_province;
        break;
      }

      // optional bytes province = 5;
      case 5: {
        if (tag == 42) {
         parse_province:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_province()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_privacy;
        break;
      }

      // optional int32 privacy = 6;
      case 6: {
        if (tag == 48) {
         parse_privacy:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &privacy_)));
          set_has_privacy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_city;
        break;
      }

      // optional bytes city = 7;
      case 7: {
        if (tag == 58) {
         parse_city:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_city()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_avatar;
        break;
      }

      // optional bytes avatar = 8;
      case 8: {
        if (tag == 66) {
         parse_avatar:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_signature;
        break;
      }

      // optional bytes signature = 9;
      case 9: {
        if (tag == 74) {
         parse_signature:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_extand_json;
        break;
      }

      // optional string extand_json = 10;
      case 10: {
        if (tag == 82) {
         parse_extand_json:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extand_json()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_online_state;
        break;
      }

      // optional .YOUMEServiceProtocol.RC_ONLINE_STATE online_state = 11;
      case 11: {
        if (tag == 88) {
         parse_online_state:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YOUMEServiceProtocol::RC_ONLINE_STATE_IsValid(value)) {
            set_online_state(static_cast< ::YOUMEServiceProtocol::RC_ONLINE_STATE >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.RcUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.RcUserInfo)
  return false;
#undef DO_
}

void RcUserInfo::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.RcUserInfo)
  // required bytes user_id = 1;
  if (has_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_id(), output);
  }

  // optional bytes nickname = 2;
  if (has_nickname()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->nickname(), output);
  }

  // optional int32 gender = 3;
  if (has_gender()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->gender(), output);
  }

  // optional bytes country = 4;
  if (has_country()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->country(), output);
  }

  // optional bytes province = 5;
  if (has_province()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->province(), output);
  }

  // optional int32 privacy = 6;
  if (has_privacy()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(6, this->privacy(), output);
  }

  // optional bytes city = 7;
  if (has_city()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->city(), output);
  }

  // optional bytes avatar = 8;
  if (has_avatar()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->avatar(), output);
  }

  // optional bytes signature = 9;
  if (has_signature()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->signature(), output);
  }

  // optional string extand_json = 10;
  if (has_extand_json()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->extand_json(), output);
  }

  // optional .YOUMEServiceProtocol.RC_ONLINE_STATE online_state = 11;
  if (has_online_state()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->online_state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.RcUserInfo)
}

int RcUserInfo::ByteSize() const {
  int total_size = 0;

  // required bytes user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional bytes nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
          this->nickname());
    }

    // optional int32 gender = 3;
    if (has_gender()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

    // optional bytes country = 4;
    if (has_country()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
          this->country());
    }

    // optional bytes province = 5;
    if (has_province()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
          this->province());
    }

    // optional int32 privacy = 6;
    if (has_privacy()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->privacy());
    }

    // optional bytes city = 7;
    if (has_city()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
          this->city());
    }

    // optional bytes avatar = 8;
    if (has_avatar()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional bytes signature = 9;
    if (has_signature()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional string extand_json = 10;
    if (has_extand_json()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->extand_json());
    }

    // optional .YOUMEServiceProtocol.RC_ONLINE_STATE online_state = 11;
    if (has_online_state()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->online_state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RcUserInfo::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const RcUserInfo*>(&from));
}

void RcUserInfo::MergeFrom(const RcUserInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_country()) {
      set_has_country();
      country_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (from.has_province()) {
      set_has_province();
      province_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.province_);
    }
    if (from.has_privacy()) {
      set_privacy(from.privacy());
    }
    if (from.has_city()) {
      set_has_city();
      city_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
    }
    if (from.has_avatar()) {
      set_has_avatar();
      avatar_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_signature()) {
      set_has_signature();
      signature_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (from.has_extand_json()) {
      set_has_extand_json();
      extand_json_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.extand_json_);
    }
    if (from.has_online_state()) {
      set_online_state(from.online_state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RcUserInfo::CopyFrom(const RcUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RcUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RcUserInfo::Swap(RcUserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RcUserInfo::InternalSwap(RcUserInfo* other) {
  user_id_.Swap(&other->user_id_);
  nickname_.Swap(&other->nickname_);
  std::swap(gender_, other->gender_);
  country_.Swap(&other->country_);
  province_.Swap(&other->province_);
  std::swap(privacy_, other->privacy_);
  city_.Swap(&other->city_);
  avatar_.Swap(&other->avatar_);
  signature_.Swap(&other->signature_);
  extand_json_.Swap(&other->extand_json_);
  std::swap(online_state_, other->online_state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RcUserInfo::GetTypeName() const {
  return "YOUMEServiceProtocol.RcUserInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RcUserInfo

// required bytes user_id = 1;
bool RcUserInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RcUserInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RcUserInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RcUserInfo::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& RcUserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfo.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserInfo::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfo.user_id)
}
 void RcUserInfo::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcUserInfo.user_id)
}
 void RcUserInfo::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcUserInfo.user_id)
}
 ::std::string* RcUserInfo::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcUserInfo.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcUserInfo::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserInfo::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcUserInfo.user_id)
}

// optional bytes nickname = 2;
bool RcUserInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RcUserInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void RcUserInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void RcUserInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
 const ::std::string& RcUserInfo::nickname() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfo.nickname)
  return nickname_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfo.nickname)
}
 void RcUserInfo::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcUserInfo.nickname)
}
 void RcUserInfo::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcUserInfo.nickname)
}
 ::std::string* RcUserInfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcUserInfo.nickname)
  return nickname_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcUserInfo::release_nickname() {
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcUserInfo.nickname)
}

// optional int32 gender = 3;
bool RcUserInfo::has_gender() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RcUserInfo::set_has_gender() {
  _has_bits_[0] |= 0x00000004u;
}
void RcUserInfo::clear_has_gender() {
  _has_bits_[0] &= ~0x00000004u;
}
void RcUserInfo::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
 ::youmecommon::protobuf::int32 RcUserInfo::gender() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfo.gender)
  return gender_;
}
 void RcUserInfo::set_gender(::youmecommon::protobuf::int32 value) {
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfo.gender)
}

// optional bytes country = 4;
bool RcUserInfo::has_country() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RcUserInfo::set_has_country() {
  _has_bits_[0] |= 0x00000008u;
}
void RcUserInfo::clear_has_country() {
  _has_bits_[0] &= ~0x00000008u;
}
void RcUserInfo::clear_country() {
  country_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
 const ::std::string& RcUserInfo::country() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfo.country)
  return country_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserInfo::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfo.country)
}
 void RcUserInfo::set_country(const char* value) {
  set_has_country();
  country_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcUserInfo.country)
}
 void RcUserInfo::set_country(const void* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcUserInfo.country)
}
 ::std::string* RcUserInfo::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcUserInfo.country)
  return country_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcUserInfo::release_country() {
  clear_has_country();
  return country_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserInfo::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcUserInfo.country)
}

// optional bytes province = 5;
bool RcUserInfo::has_province() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RcUserInfo::set_has_province() {
  _has_bits_[0] |= 0x00000010u;
}
void RcUserInfo::clear_has_province() {
  _has_bits_[0] &= ~0x00000010u;
}
void RcUserInfo::clear_province() {
  province_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
 const ::std::string& RcUserInfo::province() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfo.province)
  return province_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserInfo::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfo.province)
}
 void RcUserInfo::set_province(const char* value) {
  set_has_province();
  province_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcUserInfo.province)
}
 void RcUserInfo::set_province(const void* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcUserInfo.province)
}
 ::std::string* RcUserInfo::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcUserInfo.province)
  return province_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcUserInfo::release_province() {
  clear_has_province();
  return province_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserInfo::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcUserInfo.province)
}

// optional int32 privacy = 6;
bool RcUserInfo::has_privacy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RcUserInfo::set_has_privacy() {
  _has_bits_[0] |= 0x00000020u;
}
void RcUserInfo::clear_has_privacy() {
  _has_bits_[0] &= ~0x00000020u;
}
void RcUserInfo::clear_privacy() {
  privacy_ = 0;
  clear_has_privacy();
}
 ::youmecommon::protobuf::int32 RcUserInfo::privacy() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfo.privacy)
  return privacy_;
}
 void RcUserInfo::set_privacy(::youmecommon::protobuf::int32 value) {
  set_has_privacy();
  privacy_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfo.privacy)
}

// optional bytes city = 7;
bool RcUserInfo::has_city() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RcUserInfo::set_has_city() {
  _has_bits_[0] |= 0x00000040u;
}
void RcUserInfo::clear_has_city() {
  _has_bits_[0] &= ~0x00000040u;
}
void RcUserInfo::clear_city() {
  city_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
 const ::std::string& RcUserInfo::city() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfo.city)
  return city_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserInfo::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfo.city)
}
 void RcUserInfo::set_city(const char* value) {
  set_has_city();
  city_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcUserInfo.city)
}
 void RcUserInfo::set_city(const void* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcUserInfo.city)
}
 ::std::string* RcUserInfo::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcUserInfo.city)
  return city_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcUserInfo::release_city() {
  clear_has_city();
  return city_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserInfo::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcUserInfo.city)
}

// optional bytes avatar = 8;
bool RcUserInfo::has_avatar() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RcUserInfo::set_has_avatar() {
  _has_bits_[0] |= 0x00000080u;
}
void RcUserInfo::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000080u;
}
void RcUserInfo::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_avatar();
}
 const ::std::string& RcUserInfo::avatar() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfo.avatar)
  return avatar_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserInfo::set_avatar(const ::std::string& value) {
  set_has_avatar();
  avatar_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfo.avatar)
}
 void RcUserInfo::set_avatar(const char* value) {
  set_has_avatar();
  avatar_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcUserInfo.avatar)
}
 void RcUserInfo::set_avatar(const void* value, size_t size) {
  set_has_avatar();
  avatar_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcUserInfo.avatar)
}
 ::std::string* RcUserInfo::mutable_avatar() {
  set_has_avatar();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcUserInfo.avatar)
  return avatar_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcUserInfo::release_avatar() {
  clear_has_avatar();
  return avatar_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserInfo::set_allocated_avatar(::std::string* avatar) {
  if (avatar != NULL) {
    set_has_avatar();
  } else {
    clear_has_avatar();
  }
  avatar_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcUserInfo.avatar)
}

// optional bytes signature = 9;
bool RcUserInfo::has_signature() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RcUserInfo::set_has_signature() {
  _has_bits_[0] |= 0x00000100u;
}
void RcUserInfo::clear_has_signature() {
  _has_bits_[0] &= ~0x00000100u;
}
void RcUserInfo::clear_signature() {
  signature_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
 const ::std::string& RcUserInfo::signature() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfo.signature)
  return signature_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserInfo::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfo.signature)
}
 void RcUserInfo::set_signature(const char* value) {
  set_has_signature();
  signature_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcUserInfo.signature)
}
 void RcUserInfo::set_signature(const void* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcUserInfo.signature)
}
 ::std::string* RcUserInfo::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcUserInfo.signature)
  return signature_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcUserInfo::release_signature() {
  clear_has_signature();
  return signature_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserInfo::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcUserInfo.signature)
}

// optional string extand_json = 10;
bool RcUserInfo::has_extand_json() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RcUserInfo::set_has_extand_json() {
  _has_bits_[0] |= 0x00000200u;
}
void RcUserInfo::clear_has_extand_json() {
  _has_bits_[0] &= ~0x00000200u;
}
void RcUserInfo::clear_extand_json() {
  extand_json_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extand_json();
}
 const ::std::string& RcUserInfo::extand_json() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfo.extand_json)
  return extand_json_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserInfo::set_extand_json(const ::std::string& value) {
  set_has_extand_json();
  extand_json_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfo.extand_json)
}
 void RcUserInfo::set_extand_json(const char* value) {
  set_has_extand_json();
  extand_json_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcUserInfo.extand_json)
}
 void RcUserInfo::set_extand_json(const char* value, size_t size) {
  set_has_extand_json();
  extand_json_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcUserInfo.extand_json)
}
 ::std::string* RcUserInfo::mutable_extand_json() {
  set_has_extand_json();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcUserInfo.extand_json)
  return extand_json_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcUserInfo::release_extand_json() {
  clear_has_extand_json();
  return extand_json_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserInfo::set_allocated_extand_json(::std::string* extand_json) {
  if (extand_json != NULL) {
    set_has_extand_json();
  } else {
    clear_has_extand_json();
  }
  extand_json_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), extand_json);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcUserInfo.extand_json)
}

// optional .YOUMEServiceProtocol.RC_ONLINE_STATE online_state = 11;
bool RcUserInfo::has_online_state() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void RcUserInfo::set_has_online_state() {
  _has_bits_[0] |= 0x00000400u;
}
void RcUserInfo::clear_has_online_state() {
  _has_bits_[0] &= ~0x00000400u;
}
void RcUserInfo::clear_online_state() {
  online_state_ = 1;
  clear_has_online_state();
}
 ::YOUMEServiceProtocol::RC_ONLINE_STATE RcUserInfo::online_state() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfo.online_state)
  return static_cast< ::YOUMEServiceProtocol::RC_ONLINE_STATE >(online_state_);
}
 void RcUserInfo::set_online_state(::YOUMEServiceProtocol::RC_ONLINE_STATE value) {
  assert(::YOUMEServiceProtocol::RC_ONLINE_STATE_IsValid(value));
  set_has_online_state();
  online_state_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfo.online_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RcUserBriefInfo::kUserIdFieldNumber;
const int RcUserBriefInfo::kNicknameFieldNumber;
const int RcUserBriefInfo::kPrivacyFieldNumber;
const int RcUserBriefInfo::kOnlineStateFieldNumber;
#endif  // !_MSC_VER

RcUserBriefInfo::RcUserBriefInfo()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.RcUserBriefInfo)
}

void RcUserBriefInfo::InitAsDefaultInstance() {
}

RcUserBriefInfo::RcUserBriefInfo(const RcUserBriefInfo& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.RcUserBriefInfo)
}

void RcUserBriefInfo::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  privacy_ = 0;
  online_state_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RcUserBriefInfo::~RcUserBriefInfo() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.RcUserBriefInfo)
  SharedDtor();
}

void RcUserBriefInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RcUserBriefInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RcUserBriefInfo& RcUserBriefInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frcuserinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frcuserinfo_2eproto();
#endif
  return *default_instance_;
}

RcUserBriefInfo* RcUserBriefInfo::default_instance_ = NULL;

RcUserBriefInfo* RcUserBriefInfo::New(::youmecommon::protobuf::Arena* arena) const {
  RcUserBriefInfo* n = new RcUserBriefInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RcUserBriefInfo::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_nickname()) {
      nickname_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    privacy_ = 0;
    online_state_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RcUserBriefInfo::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.RcUserBriefInfo)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional bytes nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_privacy;
        break;
      }

      // optional int32 privacy = 3;
      case 3: {
        if (tag == 24) {
         parse_privacy:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &privacy_)));
          set_has_privacy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_online_state;
        break;
      }

      // optional .YOUMEServiceProtocol.RC_ONLINE_STATE online_state = 4;
      case 4: {
        if (tag == 32) {
         parse_online_state:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YOUMEServiceProtocol::RC_ONLINE_STATE_IsValid(value)) {
            set_online_state(static_cast< ::YOUMEServiceProtocol::RC_ONLINE_STATE >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.RcUserBriefInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.RcUserBriefInfo)
  return false;
#undef DO_
}

void RcUserBriefInfo::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.RcUserBriefInfo)
  // required bytes user_id = 1;
  if (has_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_id(), output);
  }

  // optional bytes nickname = 2;
  if (has_nickname()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->nickname(), output);
  }

  // optional int32 privacy = 3;
  if (has_privacy()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->privacy(), output);
  }

  // optional .YOUMEServiceProtocol.RC_ONLINE_STATE online_state = 4;
  if (has_online_state()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->online_state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.RcUserBriefInfo)
}

int RcUserBriefInfo::ByteSize() const {
  int total_size = 0;

  // required bytes user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional bytes nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
          this->nickname());
    }

    // optional int32 privacy = 3;
    if (has_privacy()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->privacy());
    }

    // optional .YOUMEServiceProtocol.RC_ONLINE_STATE online_state = 4;
    if (has_online_state()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->online_state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RcUserBriefInfo::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const RcUserBriefInfo*>(&from));
}

void RcUserBriefInfo::MergeFrom(const RcUserBriefInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_privacy()) {
      set_privacy(from.privacy());
    }
    if (from.has_online_state()) {
      set_online_state(from.online_state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RcUserBriefInfo::CopyFrom(const RcUserBriefInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RcUserBriefInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RcUserBriefInfo::Swap(RcUserBriefInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RcUserBriefInfo::InternalSwap(RcUserBriefInfo* other) {
  user_id_.Swap(&other->user_id_);
  nickname_.Swap(&other->nickname_);
  std::swap(privacy_, other->privacy_);
  std::swap(online_state_, other->online_state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RcUserBriefInfo::GetTypeName() const {
  return "YOUMEServiceProtocol.RcUserBriefInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RcUserBriefInfo

// required bytes user_id = 1;
bool RcUserBriefInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RcUserBriefInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RcUserBriefInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RcUserBriefInfo::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& RcUserBriefInfo::user_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserBriefInfo.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserBriefInfo::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserBriefInfo.user_id)
}
 void RcUserBriefInfo::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcUserBriefInfo.user_id)
}
 void RcUserBriefInfo::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcUserBriefInfo.user_id)
}
 ::std::string* RcUserBriefInfo::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcUserBriefInfo.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcUserBriefInfo::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserBriefInfo::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcUserBriefInfo.user_id)
}

// optional bytes nickname = 2;
bool RcUserBriefInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RcUserBriefInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void RcUserBriefInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void RcUserBriefInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
 const ::std::string& RcUserBriefInfo::nickname() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserBriefInfo.nickname)
  return nickname_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserBriefInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserBriefInfo.nickname)
}
 void RcUserBriefInfo::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcUserBriefInfo.nickname)
}
 void RcUserBriefInfo::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcUserBriefInfo.nickname)
}
 ::std::string* RcUserBriefInfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcUserBriefInfo.nickname)
  return nickname_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcUserBriefInfo::release_nickname() {
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserBriefInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcUserBriefInfo.nickname)
}

// optional int32 privacy = 3;
bool RcUserBriefInfo::has_privacy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RcUserBriefInfo::set_has_privacy() {
  _has_bits_[0] |= 0x00000004u;
}
void RcUserBriefInfo::clear_has_privacy() {
  _has_bits_[0] &= ~0x00000004u;
}
void RcUserBriefInfo::clear_privacy() {
  privacy_ = 0;
  clear_has_privacy();
}
 ::youmecommon::protobuf::int32 RcUserBriefInfo::privacy() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserBriefInfo.privacy)
  return privacy_;
}
 void RcUserBriefInfo::set_privacy(::youmecommon::protobuf::int32 value) {
  set_has_privacy();
  privacy_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserBriefInfo.privacy)
}

// optional .YOUMEServiceProtocol.RC_ONLINE_STATE online_state = 4;
bool RcUserBriefInfo::has_online_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RcUserBriefInfo::set_has_online_state() {
  _has_bits_[0] |= 0x00000008u;
}
void RcUserBriefInfo::clear_has_online_state() {
  _has_bits_[0] &= ~0x00000008u;
}
void RcUserBriefInfo::clear_online_state() {
  online_state_ = 1;
  clear_has_online_state();
}
 ::YOUMEServiceProtocol::RC_ONLINE_STATE RcUserBriefInfo::online_state() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserBriefInfo.online_state)
  return static_cast< ::YOUMEServiceProtocol::RC_ONLINE_STATE >(online_state_);
}
 void RcUserBriefInfo::set_online_state(::YOUMEServiceProtocol::RC_ONLINE_STATE value) {
  assert(::YOUMEServiceProtocol::RC_ONLINE_STATE_IsValid(value));
  set_has_online_state();
  online_state_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserBriefInfo.online_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RcHeartbeatReq::kVersionFieldNumber;
#endif  // !_MSC_VER

RcHeartbeatReq::RcHeartbeatReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.RcHeartbeatReq)
}

void RcHeartbeatReq::InitAsDefaultInstance() {
}

RcHeartbeatReq::RcHeartbeatReq(const RcHeartbeatReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.RcHeartbeatReq)
}

void RcHeartbeatReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RcHeartbeatReq::~RcHeartbeatReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.RcHeartbeatReq)
  SharedDtor();
}

void RcHeartbeatReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RcHeartbeatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RcHeartbeatReq& RcHeartbeatReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frcuserinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frcuserinfo_2eproto();
#endif
  return *default_instance_;
}

RcHeartbeatReq* RcHeartbeatReq::default_instance_ = NULL;

RcHeartbeatReq* RcHeartbeatReq::New(::youmecommon::protobuf::Arena* arena) const {
  RcHeartbeatReq* n = new RcHeartbeatReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RcHeartbeatReq::Clear() {
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RcHeartbeatReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.RcHeartbeatReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.RcHeartbeatReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.RcHeartbeatReq)
  return false;
#undef DO_
}

void RcHeartbeatReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.RcHeartbeatReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.RcHeartbeatReq)
}

int RcHeartbeatReq::ByteSize() const {
  int total_size = 0;

  // required int32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RcHeartbeatReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const RcHeartbeatReq*>(&from));
}

void RcHeartbeatReq::MergeFrom(const RcHeartbeatReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RcHeartbeatReq::CopyFrom(const RcHeartbeatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RcHeartbeatReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RcHeartbeatReq::Swap(RcHeartbeatReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RcHeartbeatReq::InternalSwap(RcHeartbeatReq* other) {
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RcHeartbeatReq::GetTypeName() const {
  return "YOUMEServiceProtocol.RcHeartbeatReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RcHeartbeatReq

// required int32 version = 1;
bool RcHeartbeatReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RcHeartbeatReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void RcHeartbeatReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void RcHeartbeatReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 RcHeartbeatReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcHeartbeatReq.version)
  return version_;
}
 void RcHeartbeatReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcHeartbeatReq.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RcHeartbeatRsp::kVersionFieldNumber;
const int RcHeartbeatRsp::kRetFieldNumber;
#endif  // !_MSC_VER

RcHeartbeatRsp::RcHeartbeatRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.RcHeartbeatRsp)
}

void RcHeartbeatRsp::InitAsDefaultInstance() {
}

RcHeartbeatRsp::RcHeartbeatRsp(const RcHeartbeatRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.RcHeartbeatRsp)
}

void RcHeartbeatRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RcHeartbeatRsp::~RcHeartbeatRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.RcHeartbeatRsp)
  SharedDtor();
}

void RcHeartbeatRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RcHeartbeatRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RcHeartbeatRsp& RcHeartbeatRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frcuserinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frcuserinfo_2eproto();
#endif
  return *default_instance_;
}

RcHeartbeatRsp* RcHeartbeatRsp::default_instance_ = NULL;

RcHeartbeatRsp* RcHeartbeatRsp::New(::youmecommon::protobuf::Arena* arena) const {
  RcHeartbeatRsp* n = new RcHeartbeatRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RcHeartbeatRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RcHeartbeatRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, ret_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RcHeartbeatRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.RcHeartbeatRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.RcHeartbeatRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.RcHeartbeatRsp)
  return false;
#undef DO_
}

void RcHeartbeatRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.RcHeartbeatRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.RcHeartbeatRsp)
}

int RcHeartbeatRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  return total_size;
}
int RcHeartbeatRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RcHeartbeatRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const RcHeartbeatRsp*>(&from));
}

void RcHeartbeatRsp::MergeFrom(const RcHeartbeatRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RcHeartbeatRsp::CopyFrom(const RcHeartbeatRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RcHeartbeatRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RcHeartbeatRsp::Swap(RcHeartbeatRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RcHeartbeatRsp::InternalSwap(RcHeartbeatRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RcHeartbeatRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.RcHeartbeatRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RcHeartbeatRsp

// required int32 version = 1;
bool RcHeartbeatRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RcHeartbeatRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void RcHeartbeatRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void RcHeartbeatRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 RcHeartbeatRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcHeartbeatRsp.version)
  return version_;
}
 void RcHeartbeatRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcHeartbeatRsp.version)
}

// required int32 ret = 2;
bool RcHeartbeatRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RcHeartbeatRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void RcHeartbeatRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void RcHeartbeatRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 RcHeartbeatRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcHeartbeatRsp.ret)
  return ret_;
}
 void RcHeartbeatRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcHeartbeatRsp.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YOUMEServiceProtocol

// @@protoc_insertion_point(global_scope)
