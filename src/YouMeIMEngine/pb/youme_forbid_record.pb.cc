// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youme_forbid_record.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "youme_forbid_record.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YOUMEServiceProtocol {

void protobuf_ShutdownFile_youme_5fforbid_5frecord_2eproto() {
  delete ForbidRecordReq::default_instance_;
  delete YoumeForbidRecord::default_instance_;
  delete ForbidRecordRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_youme_5fforbid_5frecord_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_youme_5fforbid_5frecord_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ForbidRecordReq::default_instance_ = new ForbidRecordReq();
  YoumeForbidRecord::default_instance_ = new YoumeForbidRecord();
  ForbidRecordRsp::default_instance_ = new ForbidRecordRsp();
  ForbidRecordReq::default_instance_->InitAsDefaultInstance();
  YoumeForbidRecord::default_instance_->InitAsDefaultInstance();
  ForbidRecordRsp::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_youme_5fforbid_5frecord_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_youme_5fforbid_5frecord_2eproto_once_);
void protobuf_AddDesc_youme_5fforbid_5frecord_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_youme_5fforbid_5frecord_2eproto_once_,
                 &protobuf_AddDesc_youme_5fforbid_5frecord_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_youme_5fforbid_5frecord_2eproto {
  StaticDescriptorInitializer_youme_5fforbid_5frecord_2eproto() {
    protobuf_AddDesc_youme_5fforbid_5frecord_2eproto();
  }
} static_descriptor_initializer_youme_5fforbid_5frecord_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ForbidRecordReq::kVersionFieldNumber;
const int ForbidRecordReq::kRoomidFieldNumber;
const int ForbidRecordReq::kUserRightFieldNumber;
const int ForbidRecordReq::kRoomSeqFieldNumber;
const int ForbidRecordReq::kLimitFieldNumber;
#endif  // !_MSC_VER

ForbidRecordReq::ForbidRecordReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.ForbidRecordReq)
}

void ForbidRecordReq::InitAsDefaultInstance() {
}

ForbidRecordReq::ForbidRecordReq(const ForbidRecordReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.ForbidRecordReq)
}

void ForbidRecordReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  roomid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_right_ = 0;
  room_seq_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForbidRecordReq::~ForbidRecordReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.ForbidRecordReq)
  SharedDtor();
}

void ForbidRecordReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ForbidRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ForbidRecordReq& ForbidRecordReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fforbid_5frecord_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fforbid_5frecord_2eproto();
#endif
  return *default_instance_;
}

ForbidRecordReq* ForbidRecordReq::default_instance_ = NULL;

ForbidRecordReq* ForbidRecordReq::New(::youmecommon::protobuf::Arena* arena) const {
  ForbidRecordReq* n = new ForbidRecordReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForbidRecordReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ForbidRecordReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(version_, limit_);
    if (has_roomid()) {
      roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ForbidRecordReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.ForbidRecordReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roomid;
        break;
      }

      // optional bytes roomid = 2;
      case 2: {
        if (tag == 18) {
         parse_roomid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_right;
        break;
      }

      // optional int32 user_right = 3;
      case 3: {
        if (tag == 24) {
         parse_user_right:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_right_)));
          set_has_user_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_room_seq;
        break;
      }

      // optional uint32 room_seq = 4;
      case 4: {
        if (tag == 32) {
         parse_room_seq:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_seq_)));
          set_has_room_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_limit;
        break;
      }

      // optional uint32 limit = 5;
      case 5: {
        if (tag == 40) {
         parse_limit:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.ForbidRecordReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.ForbidRecordReq)
  return false;
#undef DO_
}

void ForbidRecordReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.ForbidRecordReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional bytes roomid = 2;
  if (has_roomid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->roomid(), output);
  }

  // optional int32 user_right = 3;
  if (has_user_right()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_right(), output);
  }

  // optional uint32 room_seq = 4;
  if (has_room_seq()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(4, this->room_seq(), output);
  }

  // optional uint32 limit = 5;
  if (has_limit()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(5, this->limit(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.ForbidRecordReq)
}

int ForbidRecordReq::ByteSize() const {
  int total_size = 0;

  // required int32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }
  if (_has_bits_[1 / 32] & 30u) {
    // optional bytes roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
          this->roomid());
    }

    // optional int32 user_right = 3;
    if (has_user_right()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->user_right());
    }

    // optional uint32 room_seq = 4;
    if (has_room_seq()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_seq());
    }

    // optional uint32 limit = 5;
    if (has_limit()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForbidRecordReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const ForbidRecordReq*>(&from));
}

void ForbidRecordReq::MergeFrom(const ForbidRecordReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_roomid()) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
    if (from.has_user_right()) {
      set_user_right(from.user_right());
    }
    if (from.has_room_seq()) {
      set_room_seq(from.room_seq());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ForbidRecordReq::CopyFrom(const ForbidRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForbidRecordReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ForbidRecordReq::Swap(ForbidRecordReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForbidRecordReq::InternalSwap(ForbidRecordReq* other) {
  std::swap(version_, other->version_);
  roomid_.Swap(&other->roomid_);
  std::swap(user_right_, other->user_right_);
  std::swap(room_seq_, other->room_seq_);
  std::swap(limit_, other->limit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ForbidRecordReq::GetTypeName() const {
  return "YOUMEServiceProtocol.ForbidRecordReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForbidRecordReq

// required int32 version = 1;
bool ForbidRecordReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ForbidRecordReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void ForbidRecordReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void ForbidRecordReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 ForbidRecordReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.ForbidRecordReq.version)
  return version_;
}
 void ForbidRecordReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.ForbidRecordReq.version)
}

// optional bytes roomid = 2;
bool ForbidRecordReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ForbidRecordReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
void ForbidRecordReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ForbidRecordReq::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
 const ::std::string& ForbidRecordReq::roomid() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.ForbidRecordReq.roomid)
  return roomid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ForbidRecordReq::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.ForbidRecordReq.roomid)
}
 void ForbidRecordReq::set_roomid(const char* value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.ForbidRecordReq.roomid)
}
 void ForbidRecordReq::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.ForbidRecordReq.roomid)
}
 ::std::string* ForbidRecordReq::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.ForbidRecordReq.roomid)
  return roomid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ForbidRecordReq::release_roomid() {
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ForbidRecordReq::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.ForbidRecordReq.roomid)
}

// optional int32 user_right = 3;
bool ForbidRecordReq::has_user_right() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ForbidRecordReq::set_has_user_right() {
  _has_bits_[0] |= 0x00000004u;
}
void ForbidRecordReq::clear_has_user_right() {
  _has_bits_[0] &= ~0x00000004u;
}
void ForbidRecordReq::clear_user_right() {
  user_right_ = 0;
  clear_has_user_right();
}
 ::youmecommon::protobuf::int32 ForbidRecordReq::user_right() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.ForbidRecordReq.user_right)
  return user_right_;
}
 void ForbidRecordReq::set_user_right(::youmecommon::protobuf::int32 value) {
  set_has_user_right();
  user_right_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.ForbidRecordReq.user_right)
}

// optional uint32 room_seq = 4;
bool ForbidRecordReq::has_room_seq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ForbidRecordReq::set_has_room_seq() {
  _has_bits_[0] |= 0x00000008u;
}
void ForbidRecordReq::clear_has_room_seq() {
  _has_bits_[0] &= ~0x00000008u;
}
void ForbidRecordReq::clear_room_seq() {
  room_seq_ = 0u;
  clear_has_room_seq();
}
 ::youmecommon::protobuf::uint32 ForbidRecordReq::room_seq() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.ForbidRecordReq.room_seq)
  return room_seq_;
}
 void ForbidRecordReq::set_room_seq(::youmecommon::protobuf::uint32 value) {
  set_has_room_seq();
  room_seq_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.ForbidRecordReq.room_seq)
}

// optional uint32 limit = 5;
bool ForbidRecordReq::has_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ForbidRecordReq::set_has_limit() {
  _has_bits_[0] |= 0x00000010u;
}
void ForbidRecordReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
void ForbidRecordReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
 ::youmecommon::protobuf::uint32 ForbidRecordReq::limit() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.ForbidRecordReq.limit)
  return limit_;
}
 void ForbidRecordReq::set_limit(::youmecommon::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.ForbidRecordReq.limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YoumeForbidRecord::kRoomSeqFieldNumber;
const int YoumeForbidRecord::kRoomidFieldNumber;
const int YoumeForbidRecord::kUserRightFieldNumber;
const int YoumeForbidRecord::kExpireTimeFieldNumber;
const int YoumeForbidRecord::kForbidRoomFieldNumber;
const int YoumeForbidRecord::kReasonTypeFieldNumber;
const int YoumeForbidRecord::kReasonFieldNumber;
#endif  // !_MSC_VER

YoumeForbidRecord::YoumeForbidRecord()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.YoumeForbidRecord)
}

void YoumeForbidRecord::InitAsDefaultInstance() {
}

YoumeForbidRecord::YoumeForbidRecord(const YoumeForbidRecord& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.YoumeForbidRecord)
}

void YoumeForbidRecord::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  room_seq_ = 0u;
  roomid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_right_ = 0;
  expire_time_ = GOOGLE_ULONGLONG(0);
  forbid_room_ = false;
  reason_type_ = 0;
  reason_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YoumeForbidRecord::~YoumeForbidRecord() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.YoumeForbidRecord)
  SharedDtor();
}

void YoumeForbidRecord::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void YoumeForbidRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YoumeForbidRecord& YoumeForbidRecord::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fforbid_5frecord_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fforbid_5frecord_2eproto();
#endif
  return *default_instance_;
}

YoumeForbidRecord* YoumeForbidRecord::default_instance_ = NULL;

YoumeForbidRecord* YoumeForbidRecord::New(::youmecommon::protobuf::Arena* arena) const {
  YoumeForbidRecord* n = new YoumeForbidRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YoumeForbidRecord::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YoumeForbidRecord*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(room_seq_, reason_type_);
    if (has_roomid()) {
      roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_reason()) {
      reason_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YoumeForbidRecord::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.YoumeForbidRecord)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 room_seq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_seq_)));
          set_has_room_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roomid;
        break;
      }

      // required bytes roomid = 2;
      case 2: {
        if (tag == 18) {
         parse_roomid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_right;
        break;
      }

      // required int32 user_right = 3;
      case 3: {
        if (tag == 24) {
         parse_user_right:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_right_)));
          set_has_user_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_expire_time;
        break;
      }

      // required uint64 expire_time = 4;
      case 4: {
        if (tag == 32) {
         parse_expire_time:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_forbid_room;
        break;
      }

      // required bool forbid_room = 5;
      case 5: {
        if (tag == 40) {
         parse_forbid_room:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forbid_room_)));
          set_has_forbid_room();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_reason_type;
        break;
      }

      // required int32 reason_type = 6;
      case 6: {
        if (tag == 48) {
         parse_reason_type:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_type_)));
          set_has_reason_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_reason;
        break;
      }

      // required string reason = 7;
      case 7: {
        if (tag == 58) {
         parse_reason:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.YoumeForbidRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.YoumeForbidRecord)
  return false;
#undef DO_
}

void YoumeForbidRecord::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.YoumeForbidRecord)
  // required uint32 room_seq = 1;
  if (has_room_seq()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_seq(), output);
  }

  // required bytes roomid = 2;
  if (has_roomid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->roomid(), output);
  }

  // required int32 user_right = 3;
  if (has_user_right()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_right(), output);
  }

  // required uint64 expire_time = 4;
  if (has_expire_time()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt64(4, this->expire_time(), output);
  }

  // required bool forbid_room = 5;
  if (has_forbid_room()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBool(5, this->forbid_room(), output);
  }

  // required int32 reason_type = 6;
  if (has_reason_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(6, this->reason_type(), output);
  }

  // required string reason = 7;
  if (has_reason()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->reason(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.YoumeForbidRecord)
}

int YoumeForbidRecord::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_room_seq()) {
    // required uint32 room_seq = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->room_seq());
  }

  if (has_roomid()) {
    // required bytes roomid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->roomid());
  }

  if (has_user_right()) {
    // required int32 user_right = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->user_right());
  }

  if (has_expire_time()) {
    // required uint64 expire_time = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->expire_time());
  }

  if (has_forbid_room()) {
    // required bool forbid_room = 5;
    total_size += 1 + 1;
  }

  if (has_reason_type()) {
    // required int32 reason_type = 6;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->reason_type());
  }

  if (has_reason()) {
    // required string reason = 7;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  return total_size;
}
int YoumeForbidRecord::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required uint32 room_seq = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->room_seq());

    // required bytes roomid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->roomid());

    // required int32 user_right = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->user_right());

    // required uint64 expire_time = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->expire_time());

    // required bool forbid_room = 5;
    total_size += 1 + 1;

    // required int32 reason_type = 6;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->reason_type());

    // required string reason = 7;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->reason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YoumeForbidRecord::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YoumeForbidRecord*>(&from));
}

void YoumeForbidRecord::MergeFrom(const YoumeForbidRecord& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_seq()) {
      set_room_seq(from.room_seq());
    }
    if (from.has_roomid()) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
    if (from.has_user_right()) {
      set_user_right(from.user_right());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_forbid_room()) {
      set_forbid_room(from.forbid_room());
    }
    if (from.has_reason_type()) {
      set_reason_type(from.reason_type());
    }
    if (from.has_reason()) {
      set_has_reason();
      reason_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YoumeForbidRecord::CopyFrom(const YoumeForbidRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YoumeForbidRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void YoumeForbidRecord::Swap(YoumeForbidRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YoumeForbidRecord::InternalSwap(YoumeForbidRecord* other) {
  std::swap(room_seq_, other->room_seq_);
  roomid_.Swap(&other->roomid_);
  std::swap(user_right_, other->user_right_);
  std::swap(expire_time_, other->expire_time_);
  std::swap(forbid_room_, other->forbid_room_);
  std::swap(reason_type_, other->reason_type_);
  reason_.Swap(&other->reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YoumeForbidRecord::GetTypeName() const {
  return "YOUMEServiceProtocol.YoumeForbidRecord";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YoumeForbidRecord

// required uint32 room_seq = 1;
bool YoumeForbidRecord::has_room_seq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YoumeForbidRecord::set_has_room_seq() {
  _has_bits_[0] |= 0x00000001u;
}
void YoumeForbidRecord::clear_has_room_seq() {
  _has_bits_[0] &= ~0x00000001u;
}
void YoumeForbidRecord::clear_room_seq() {
  room_seq_ = 0u;
  clear_has_room_seq();
}
 ::youmecommon::protobuf::uint32 YoumeForbidRecord::room_seq() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeForbidRecord.room_seq)
  return room_seq_;
}
 void YoumeForbidRecord::set_room_seq(::youmecommon::protobuf::uint32 value) {
  set_has_room_seq();
  room_seq_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeForbidRecord.room_seq)
}

// required bytes roomid = 2;
bool YoumeForbidRecord::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YoumeForbidRecord::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
void YoumeForbidRecord::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YoumeForbidRecord::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
 const ::std::string& YoumeForbidRecord::roomid() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeForbidRecord.roomid)
  return roomid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YoumeForbidRecord::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeForbidRecord.roomid)
}
 void YoumeForbidRecord::set_roomid(const char* value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.YoumeForbidRecord.roomid)
}
 void YoumeForbidRecord::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.YoumeForbidRecord.roomid)
}
 ::std::string* YoumeForbidRecord::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.YoumeForbidRecord.roomid)
  return roomid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YoumeForbidRecord::release_roomid() {
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YoumeForbidRecord::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.YoumeForbidRecord.roomid)
}

// required int32 user_right = 3;
bool YoumeForbidRecord::has_user_right() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YoumeForbidRecord::set_has_user_right() {
  _has_bits_[0] |= 0x00000004u;
}
void YoumeForbidRecord::clear_has_user_right() {
  _has_bits_[0] &= ~0x00000004u;
}
void YoumeForbidRecord::clear_user_right() {
  user_right_ = 0;
  clear_has_user_right();
}
 ::youmecommon::protobuf::int32 YoumeForbidRecord::user_right() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeForbidRecord.user_right)
  return user_right_;
}
 void YoumeForbidRecord::set_user_right(::youmecommon::protobuf::int32 value) {
  set_has_user_right();
  user_right_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeForbidRecord.user_right)
}

// required uint64 expire_time = 4;
bool YoumeForbidRecord::has_expire_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YoumeForbidRecord::set_has_expire_time() {
  _has_bits_[0] |= 0x00000008u;
}
void YoumeForbidRecord::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void YoumeForbidRecord::clear_expire_time() {
  expire_time_ = GOOGLE_ULONGLONG(0);
  clear_has_expire_time();
}
 ::youmecommon::protobuf::uint64 YoumeForbidRecord::expire_time() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeForbidRecord.expire_time)
  return expire_time_;
}
 void YoumeForbidRecord::set_expire_time(::youmecommon::protobuf::uint64 value) {
  set_has_expire_time();
  expire_time_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeForbidRecord.expire_time)
}

// required bool forbid_room = 5;
bool YoumeForbidRecord::has_forbid_room() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YoumeForbidRecord::set_has_forbid_room() {
  _has_bits_[0] |= 0x00000010u;
}
void YoumeForbidRecord::clear_has_forbid_room() {
  _has_bits_[0] &= ~0x00000010u;
}
void YoumeForbidRecord::clear_forbid_room() {
  forbid_room_ = false;
  clear_has_forbid_room();
}
 bool YoumeForbidRecord::forbid_room() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeForbidRecord.forbid_room)
  return forbid_room_;
}
 void YoumeForbidRecord::set_forbid_room(bool value) {
  set_has_forbid_room();
  forbid_room_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeForbidRecord.forbid_room)
}

// required int32 reason_type = 6;
bool YoumeForbidRecord::has_reason_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YoumeForbidRecord::set_has_reason_type() {
  _has_bits_[0] |= 0x00000020u;
}
void YoumeForbidRecord::clear_has_reason_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void YoumeForbidRecord::clear_reason_type() {
  reason_type_ = 0;
  clear_has_reason_type();
}
 ::youmecommon::protobuf::int32 YoumeForbidRecord::reason_type() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeForbidRecord.reason_type)
  return reason_type_;
}
 void YoumeForbidRecord::set_reason_type(::youmecommon::protobuf::int32 value) {
  set_has_reason_type();
  reason_type_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeForbidRecord.reason_type)
}

// required string reason = 7;
bool YoumeForbidRecord::has_reason() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void YoumeForbidRecord::set_has_reason() {
  _has_bits_[0] |= 0x00000040u;
}
void YoumeForbidRecord::clear_has_reason() {
  _has_bits_[0] &= ~0x00000040u;
}
void YoumeForbidRecord::clear_reason() {
  reason_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
 const ::std::string& YoumeForbidRecord::reason() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeForbidRecord.reason)
  return reason_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YoumeForbidRecord::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeForbidRecord.reason)
}
 void YoumeForbidRecord::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.YoumeForbidRecord.reason)
}
 void YoumeForbidRecord::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.YoumeForbidRecord.reason)
}
 ::std::string* YoumeForbidRecord::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.YoumeForbidRecord.reason)
  return reason_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YoumeForbidRecord::release_reason() {
  clear_has_reason();
  return reason_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YoumeForbidRecord::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.YoumeForbidRecord.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ForbidRecordRsp::kVersionFieldNumber;
const int ForbidRecordRsp::kRetFieldNumber;
const int ForbidRecordRsp::kRecordCntFieldNumber;
const int ForbidRecordRsp::kRecordListFieldNumber;
#endif  // !_MSC_VER

ForbidRecordRsp::ForbidRecordRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.ForbidRecordRsp)
}

void ForbidRecordRsp::InitAsDefaultInstance() {
}

ForbidRecordRsp::ForbidRecordRsp(const ForbidRecordRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.ForbidRecordRsp)
}

void ForbidRecordRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  record_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForbidRecordRsp::~ForbidRecordRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.ForbidRecordRsp)
  SharedDtor();
}

void ForbidRecordRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ForbidRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ForbidRecordRsp& ForbidRecordRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fforbid_5frecord_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fforbid_5frecord_2eproto();
#endif
  return *default_instance_;
}

ForbidRecordRsp* ForbidRecordRsp::default_instance_ = NULL;

ForbidRecordRsp* ForbidRecordRsp::New(::youmecommon::protobuf::Arena* arena) const {
  ForbidRecordRsp* n = new ForbidRecordRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForbidRecordRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ForbidRecordRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(version_, ret_);
    record_cnt_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  record_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ForbidRecordRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.ForbidRecordRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_record_cnt;
        break;
      }

      // required int32 record_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_record_cnt:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &record_cnt_)));
          set_has_record_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_record_list;
        break;
      }

      // repeated .YOUMEServiceProtocol.YoumeForbidRecord record_list = 4;
      case 4: {
        if (tag == 34) {
         parse_record_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_record_list:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_record_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_record_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.ForbidRecordRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.ForbidRecordRsp)
  return false;
#undef DO_
}

void ForbidRecordRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.ForbidRecordRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // required int32 record_cnt = 3;
  if (has_record_cnt()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->record_cnt(), output);
  }

  // repeated .YOUMEServiceProtocol.YoumeForbidRecord record_list = 4;
  for (unsigned int i = 0, n = this->record_list_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->record_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.ForbidRecordRsp)
}

int ForbidRecordRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_record_cnt()) {
    // required int32 record_cnt = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->record_cnt());
  }

  return total_size;
}
int ForbidRecordRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required int32 record_cnt = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->record_cnt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .YOUMEServiceProtocol.YoumeForbidRecord record_list = 4;
  total_size += 1 * this->record_list_size();
  for (int i = 0; i < this->record_list_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForbidRecordRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const ForbidRecordRsp*>(&from));
}

void ForbidRecordRsp::MergeFrom(const ForbidRecordRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  record_list_.MergeFrom(from.record_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_record_cnt()) {
      set_record_cnt(from.record_cnt());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ForbidRecordRsp::CopyFrom(const ForbidRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForbidRecordRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->record_list())) return false;
  return true;
}

void ForbidRecordRsp::Swap(ForbidRecordRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForbidRecordRsp::InternalSwap(ForbidRecordRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(record_cnt_, other->record_cnt_);
  record_list_.UnsafeArenaSwap(&other->record_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ForbidRecordRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.ForbidRecordRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForbidRecordRsp

// required int32 version = 1;
bool ForbidRecordRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ForbidRecordRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void ForbidRecordRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void ForbidRecordRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 ForbidRecordRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.ForbidRecordRsp.version)
  return version_;
}
 void ForbidRecordRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.ForbidRecordRsp.version)
}

// required int32 ret = 2;
bool ForbidRecordRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ForbidRecordRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void ForbidRecordRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void ForbidRecordRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 ForbidRecordRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.ForbidRecordRsp.ret)
  return ret_;
}
 void ForbidRecordRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.ForbidRecordRsp.ret)
}

// required int32 record_cnt = 3;
bool ForbidRecordRsp::has_record_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ForbidRecordRsp::set_has_record_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
void ForbidRecordRsp::clear_has_record_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
void ForbidRecordRsp::clear_record_cnt() {
  record_cnt_ = 0;
  clear_has_record_cnt();
}
 ::youmecommon::protobuf::int32 ForbidRecordRsp::record_cnt() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.ForbidRecordRsp.record_cnt)
  return record_cnt_;
}
 void ForbidRecordRsp::set_record_cnt(::youmecommon::protobuf::int32 value) {
  set_has_record_cnt();
  record_cnt_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.ForbidRecordRsp.record_cnt)
}

// repeated .YOUMEServiceProtocol.YoumeForbidRecord record_list = 4;
int ForbidRecordRsp::record_list_size() const {
  return record_list_.size();
}
void ForbidRecordRsp::clear_record_list() {
  record_list_.Clear();
}
const ::YOUMEServiceProtocol::YoumeForbidRecord& ForbidRecordRsp::record_list(int index) const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.ForbidRecordRsp.record_list)
  return record_list_.Get(index);
}
::YOUMEServiceProtocol::YoumeForbidRecord* ForbidRecordRsp::mutable_record_list(int index) {
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.ForbidRecordRsp.record_list)
  return record_list_.Mutable(index);
}
::YOUMEServiceProtocol::YoumeForbidRecord* ForbidRecordRsp::add_record_list() {
  // @@protoc_insertion_point(field_add:YOUMEServiceProtocol.ForbidRecordRsp.record_list)
  return record_list_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::YoumeForbidRecord >*
ForbidRecordRsp::mutable_record_list() {
  // @@protoc_insertion_point(field_mutable_list:YOUMEServiceProtocol.ForbidRecordRsp.record_list)
  return &record_list_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::YoumeForbidRecord >&
ForbidRecordRsp::record_list() const {
  // @@protoc_insertion_point(field_list:YOUMEServiceProtocol.ForbidRecordRsp.record_list)
  return record_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YOUMEServiceProtocol

// @@protoc_insertion_point(global_scope)
