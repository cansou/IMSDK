// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youme_rc_query_friend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "youme_rc_query_friend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YOUMEServiceProtocol {

void protobuf_ShutdownFile_youme_5frc_5fquery_5ffriend_2eproto() {
  delete QueryRcFriendByUserNameReq::default_instance_;
  delete QueryRcFriendByUserNameRsp::default_instance_;
  delete QueryRcFriendByUserNicknameReq::default_instance_;
  delete QueryRcFriendByUserNicknameRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_youme_5frc_5fquery_5ffriend_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_youme_5frc_5fquery_5ffriend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::YOUMEServiceProtocol::protobuf_AddDesc_youme_5frc_5fcomm_2eproto();
  QueryRcFriendByUserNameReq::default_instance_ = new QueryRcFriendByUserNameReq();
  QueryRcFriendByUserNameRsp::default_instance_ = new QueryRcFriendByUserNameRsp();
  QueryRcFriendByUserNicknameReq::default_instance_ = new QueryRcFriendByUserNicknameReq();
  QueryRcFriendByUserNicknameRsp::default_instance_ = new QueryRcFriendByUserNicknameRsp();
  QueryRcFriendByUserNameReq::default_instance_->InitAsDefaultInstance();
  QueryRcFriendByUserNameRsp::default_instance_->InitAsDefaultInstance();
  QueryRcFriendByUserNicknameReq::default_instance_->InitAsDefaultInstance();
  QueryRcFriendByUserNicknameRsp::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_youme_5frc_5fquery_5ffriend_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_youme_5frc_5fquery_5ffriend_2eproto_once_);
void protobuf_AddDesc_youme_5frc_5fquery_5ffriend_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_youme_5frc_5fquery_5ffriend_2eproto_once_,
                 &protobuf_AddDesc_youme_5frc_5fquery_5ffriend_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_youme_5frc_5fquery_5ffriend_2eproto {
  StaticDescriptorInitializer_youme_5frc_5fquery_5ffriend_2eproto() {
    protobuf_AddDesc_youme_5frc_5fquery_5ffriend_2eproto();
  }
} static_descriptor_initializer_youme_5frc_5fquery_5ffriend_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int QueryRcFriendByUserNameReq::kVersionFieldNumber;
const int QueryRcFriendByUserNameReq::kUserIdFieldNumber;
const int QueryRcFriendByUserNameReq::kStartIdxFieldNumber;
const int QueryRcFriendByUserNameReq::kLenFieldNumber;
#endif  // !_MSC_VER

QueryRcFriendByUserNameReq::QueryRcFriendByUserNameReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.QueryRcFriendByUserNameReq)
}

void QueryRcFriendByUserNameReq::InitAsDefaultInstance() {
}

QueryRcFriendByUserNameReq::QueryRcFriendByUserNameReq(const QueryRcFriendByUserNameReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.QueryRcFriendByUserNameReq)
}

void QueryRcFriendByUserNameReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  start_idx_ = 0;
  len_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryRcFriendByUserNameReq::~QueryRcFriendByUserNameReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.QueryRcFriendByUserNameReq)
  SharedDtor();
}

void QueryRcFriendByUserNameReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void QueryRcFriendByUserNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QueryRcFriendByUserNameReq& QueryRcFriendByUserNameReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fquery_5ffriend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fquery_5ffriend_2eproto();
#endif
  return *default_instance_;
}

QueryRcFriendByUserNameReq* QueryRcFriendByUserNameReq::default_instance_ = NULL;

QueryRcFriendByUserNameReq* QueryRcFriendByUserNameReq::New(::youmecommon::protobuf::Arena* arena) const {
  QueryRcFriendByUserNameReq* n = new QueryRcFriendByUserNameReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryRcFriendByUserNameReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QueryRcFriendByUserNameReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(version_, len_);
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool QueryRcFriendByUserNameReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.QueryRcFriendByUserNameReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // required bytes user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_start_idx;
        break;
      }

      // required int32 start_idx = 3;
      case 3: {
        if (tag == 24) {
         parse_start_idx:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_idx_)));
          set_has_start_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_len;
        break;
      }

      // required int32 len = 4;
      case 4: {
        if (tag == 32) {
         parse_len:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.QueryRcFriendByUserNameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.QueryRcFriendByUserNameReq)
  return false;
#undef DO_
}

void QueryRcFriendByUserNameReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.QueryRcFriendByUserNameReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required bytes user_id = 2;
  if (has_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_id(), output);
  }

  // required int32 start_idx = 3;
  if (has_start_idx()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->start_idx(), output);
  }

  // required int32 len = 4;
  if (has_len()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->len(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.QueryRcFriendByUserNameReq)
}

int QueryRcFriendByUserNameReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_user_id()) {
    // required bytes user_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());
  }

  if (has_start_idx()) {
    // required int32 start_idx = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->start_idx());
  }

  if (has_len()) {
    // required int32 len = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->len());
  }

  return total_size;
}
int QueryRcFriendByUserNameReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required bytes user_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());

    // required int32 start_idx = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->start_idx());

    // required int32 len = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->len());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryRcFriendByUserNameReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const QueryRcFriendByUserNameReq*>(&from));
}

void QueryRcFriendByUserNameReq::MergeFrom(const QueryRcFriendByUserNameReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_start_idx()) {
      set_start_idx(from.start_idx());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void QueryRcFriendByUserNameReq::CopyFrom(const QueryRcFriendByUserNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRcFriendByUserNameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void QueryRcFriendByUserNameReq::Swap(QueryRcFriendByUserNameReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryRcFriendByUserNameReq::InternalSwap(QueryRcFriendByUserNameReq* other) {
  std::swap(version_, other->version_);
  user_id_.Swap(&other->user_id_);
  std::swap(start_idx_, other->start_idx_);
  std::swap(len_, other->len_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string QueryRcFriendByUserNameReq::GetTypeName() const {
  return "YOUMEServiceProtocol.QueryRcFriendByUserNameReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryRcFriendByUserNameReq

// required int32 version = 1;
bool QueryRcFriendByUserNameReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryRcFriendByUserNameReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryRcFriendByUserNameReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryRcFriendByUserNameReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 QueryRcFriendByUserNameReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.QueryRcFriendByUserNameReq.version)
  return version_;
}
 void QueryRcFriendByUserNameReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.QueryRcFriendByUserNameReq.version)
}

// required bytes user_id = 2;
bool QueryRcFriendByUserNameReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryRcFriendByUserNameReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryRcFriendByUserNameReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryRcFriendByUserNameReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& QueryRcFriendByUserNameReq::user_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.QueryRcFriendByUserNameReq.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryRcFriendByUserNameReq::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.QueryRcFriendByUserNameReq.user_id)
}
 void QueryRcFriendByUserNameReq::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.QueryRcFriendByUserNameReq.user_id)
}
 void QueryRcFriendByUserNameReq::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.QueryRcFriendByUserNameReq.user_id)
}
 ::std::string* QueryRcFriendByUserNameReq::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.QueryRcFriendByUserNameReq.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QueryRcFriendByUserNameReq::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryRcFriendByUserNameReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.QueryRcFriendByUserNameReq.user_id)
}

// required int32 start_idx = 3;
bool QueryRcFriendByUserNameReq::has_start_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QueryRcFriendByUserNameReq::set_has_start_idx() {
  _has_bits_[0] |= 0x00000004u;
}
void QueryRcFriendByUserNameReq::clear_has_start_idx() {
  _has_bits_[0] &= ~0x00000004u;
}
void QueryRcFriendByUserNameReq::clear_start_idx() {
  start_idx_ = 0;
  clear_has_start_idx();
}
 ::youmecommon::protobuf::int32 QueryRcFriendByUserNameReq::start_idx() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.QueryRcFriendByUserNameReq.start_idx)
  return start_idx_;
}
 void QueryRcFriendByUserNameReq::set_start_idx(::youmecommon::protobuf::int32 value) {
  set_has_start_idx();
  start_idx_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.QueryRcFriendByUserNameReq.start_idx)
}

// required int32 len = 4;
bool QueryRcFriendByUserNameReq::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QueryRcFriendByUserNameReq::set_has_len() {
  _has_bits_[0] |= 0x00000008u;
}
void QueryRcFriendByUserNameReq::clear_has_len() {
  _has_bits_[0] &= ~0x00000008u;
}
void QueryRcFriendByUserNameReq::clear_len() {
  len_ = 0;
  clear_has_len();
}
 ::youmecommon::protobuf::int32 QueryRcFriendByUserNameReq::len() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.QueryRcFriendByUserNameReq.len)
  return len_;
}
 void QueryRcFriendByUserNameReq::set_len(::youmecommon::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.QueryRcFriendByUserNameReq.len)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int QueryRcFriendByUserNameRsp::kVersionFieldNumber;
const int QueryRcFriendByUserNameRsp::kRetFieldNumber;
const int QueryRcFriendByUserNameRsp::kListCntFieldNumber;
const int QueryRcFriendByUserNameRsp::kUserListFieldNumber;
#endif  // !_MSC_VER

QueryRcFriendByUserNameRsp::QueryRcFriendByUserNameRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.QueryRcFriendByUserNameRsp)
}

void QueryRcFriendByUserNameRsp::InitAsDefaultInstance() {
}

QueryRcFriendByUserNameRsp::QueryRcFriendByUserNameRsp(const QueryRcFriendByUserNameRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.QueryRcFriendByUserNameRsp)
}

void QueryRcFriendByUserNameRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  list_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryRcFriendByUserNameRsp::~QueryRcFriendByUserNameRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.QueryRcFriendByUserNameRsp)
  SharedDtor();
}

void QueryRcFriendByUserNameRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void QueryRcFriendByUserNameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QueryRcFriendByUserNameRsp& QueryRcFriendByUserNameRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fquery_5ffriend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fquery_5ffriend_2eproto();
#endif
  return *default_instance_;
}

QueryRcFriendByUserNameRsp* QueryRcFriendByUserNameRsp::default_instance_ = NULL;

QueryRcFriendByUserNameRsp* QueryRcFriendByUserNameRsp::New(::youmecommon::protobuf::Arena* arena) const {
  QueryRcFriendByUserNameRsp* n = new QueryRcFriendByUserNameRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryRcFriendByUserNameRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QueryRcFriendByUserNameRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(version_, ret_);
    list_cnt_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool QueryRcFriendByUserNameRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.QueryRcFriendByUserNameRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_list_cnt;
        break;
      }

      // required int32 list_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_list_cnt:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &list_cnt_)));
          set_has_list_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_list;
        break;
      }

      // repeated .YOUMEServiceProtocol.RcFriendBriefInfo user_list = 4;
      case 4: {
        if (tag == 34) {
         parse_user_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_user_list:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_user_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.QueryRcFriendByUserNameRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.QueryRcFriendByUserNameRsp)
  return false;
#undef DO_
}

void QueryRcFriendByUserNameRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.QueryRcFriendByUserNameRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // required int32 list_cnt = 3;
  if (has_list_cnt()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->list_cnt(), output);
  }

  // repeated .YOUMEServiceProtocol.RcFriendBriefInfo user_list = 4;
  for (unsigned int i = 0, n = this->user_list_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->user_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.QueryRcFriendByUserNameRsp)
}

int QueryRcFriendByUserNameRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_list_cnt()) {
    // required int32 list_cnt = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->list_cnt());
  }

  return total_size;
}
int QueryRcFriendByUserNameRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required int32 list_cnt = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->list_cnt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .YOUMEServiceProtocol.RcFriendBriefInfo user_list = 4;
  total_size += 1 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryRcFriendByUserNameRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const QueryRcFriendByUserNameRsp*>(&from));
}

void QueryRcFriendByUserNameRsp::MergeFrom(const QueryRcFriendByUserNameRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  user_list_.MergeFrom(from.user_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_list_cnt()) {
      set_list_cnt(from.list_cnt());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void QueryRcFriendByUserNameRsp::CopyFrom(const QueryRcFriendByUserNameRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRcFriendByUserNameRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->user_list())) return false;
  return true;
}

void QueryRcFriendByUserNameRsp::Swap(QueryRcFriendByUserNameRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryRcFriendByUserNameRsp::InternalSwap(QueryRcFriendByUserNameRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(list_cnt_, other->list_cnt_);
  user_list_.UnsafeArenaSwap(&other->user_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string QueryRcFriendByUserNameRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.QueryRcFriendByUserNameRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryRcFriendByUserNameRsp

// required int32 version = 1;
bool QueryRcFriendByUserNameRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryRcFriendByUserNameRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryRcFriendByUserNameRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryRcFriendByUserNameRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 QueryRcFriendByUserNameRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.QueryRcFriendByUserNameRsp.version)
  return version_;
}
 void QueryRcFriendByUserNameRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.QueryRcFriendByUserNameRsp.version)
}

// required int32 ret = 2;
bool QueryRcFriendByUserNameRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryRcFriendByUserNameRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryRcFriendByUserNameRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryRcFriendByUserNameRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 QueryRcFriendByUserNameRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.QueryRcFriendByUserNameRsp.ret)
  return ret_;
}
 void QueryRcFriendByUserNameRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.QueryRcFriendByUserNameRsp.ret)
}

// required int32 list_cnt = 3;
bool QueryRcFriendByUserNameRsp::has_list_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QueryRcFriendByUserNameRsp::set_has_list_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
void QueryRcFriendByUserNameRsp::clear_has_list_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
void QueryRcFriendByUserNameRsp::clear_list_cnt() {
  list_cnt_ = 0;
  clear_has_list_cnt();
}
 ::youmecommon::protobuf::int32 QueryRcFriendByUserNameRsp::list_cnt() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.QueryRcFriendByUserNameRsp.list_cnt)
  return list_cnt_;
}
 void QueryRcFriendByUserNameRsp::set_list_cnt(::youmecommon::protobuf::int32 value) {
  set_has_list_cnt();
  list_cnt_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.QueryRcFriendByUserNameRsp.list_cnt)
}

// repeated .YOUMEServiceProtocol.RcFriendBriefInfo user_list = 4;
int QueryRcFriendByUserNameRsp::user_list_size() const {
  return user_list_.size();
}
void QueryRcFriendByUserNameRsp::clear_user_list() {
  user_list_.Clear();
}
const ::YOUMEServiceProtocol::RcFriendBriefInfo& QueryRcFriendByUserNameRsp::user_list(int index) const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.QueryRcFriendByUserNameRsp.user_list)
  return user_list_.Get(index);
}
::YOUMEServiceProtocol::RcFriendBriefInfo* QueryRcFriendByUserNameRsp::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.QueryRcFriendByUserNameRsp.user_list)
  return user_list_.Mutable(index);
}
::YOUMEServiceProtocol::RcFriendBriefInfo* QueryRcFriendByUserNameRsp::add_user_list() {
  // @@protoc_insertion_point(field_add:YOUMEServiceProtocol.QueryRcFriendByUserNameRsp.user_list)
  return user_list_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::RcFriendBriefInfo >*
QueryRcFriendByUserNameRsp::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:YOUMEServiceProtocol.QueryRcFriendByUserNameRsp.user_list)
  return &user_list_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::RcFriendBriefInfo >&
QueryRcFriendByUserNameRsp::user_list() const {
  // @@protoc_insertion_point(field_list:YOUMEServiceProtocol.QueryRcFriendByUserNameRsp.user_list)
  return user_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int QueryRcFriendByUserNicknameReq::kVersionFieldNumber;
const int QueryRcFriendByUserNicknameReq::kNicknameFieldNumber;
const int QueryRcFriendByUserNicknameReq::kStartIdxFieldNumber;
const int QueryRcFriendByUserNicknameReq::kLenFieldNumber;
#endif  // !_MSC_VER

QueryRcFriendByUserNicknameReq::QueryRcFriendByUserNicknameReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.QueryRcFriendByUserNicknameReq)
}

void QueryRcFriendByUserNicknameReq::InitAsDefaultInstance() {
}

QueryRcFriendByUserNicknameReq::QueryRcFriendByUserNicknameReq(const QueryRcFriendByUserNicknameReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.QueryRcFriendByUserNicknameReq)
}

void QueryRcFriendByUserNicknameReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  nickname_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  start_idx_ = 0;
  len_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryRcFriendByUserNicknameReq::~QueryRcFriendByUserNicknameReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.QueryRcFriendByUserNicknameReq)
  SharedDtor();
}

void QueryRcFriendByUserNicknameReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void QueryRcFriendByUserNicknameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QueryRcFriendByUserNicknameReq& QueryRcFriendByUserNicknameReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fquery_5ffriend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fquery_5ffriend_2eproto();
#endif
  return *default_instance_;
}

QueryRcFriendByUserNicknameReq* QueryRcFriendByUserNicknameReq::default_instance_ = NULL;

QueryRcFriendByUserNicknameReq* QueryRcFriendByUserNicknameReq::New(::youmecommon::protobuf::Arena* arena) const {
  QueryRcFriendByUserNicknameReq* n = new QueryRcFriendByUserNicknameReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryRcFriendByUserNicknameReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QueryRcFriendByUserNicknameReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(version_, len_);
    if (has_nickname()) {
      nickname_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool QueryRcFriendByUserNicknameReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.QueryRcFriendByUserNicknameReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // required bytes nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_start_idx;
        break;
      }

      // required int32 start_idx = 3;
      case 3: {
        if (tag == 24) {
         parse_start_idx:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_idx_)));
          set_has_start_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_len;
        break;
      }

      // required int32 len = 4;
      case 4: {
        if (tag == 32) {
         parse_len:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.QueryRcFriendByUserNicknameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.QueryRcFriendByUserNicknameReq)
  return false;
#undef DO_
}

void QueryRcFriendByUserNicknameReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.QueryRcFriendByUserNicknameReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required bytes nickname = 2;
  if (has_nickname()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->nickname(), output);
  }

  // required int32 start_idx = 3;
  if (has_start_idx()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->start_idx(), output);
  }

  // required int32 len = 4;
  if (has_len()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->len(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.QueryRcFriendByUserNicknameReq)
}

int QueryRcFriendByUserNicknameReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_nickname()) {
    // required bytes nickname = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->nickname());
  }

  if (has_start_idx()) {
    // required int32 start_idx = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->start_idx());
  }

  if (has_len()) {
    // required int32 len = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->len());
  }

  return total_size;
}
int QueryRcFriendByUserNicknameReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required bytes nickname = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->nickname());

    // required int32 start_idx = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->start_idx());

    // required int32 len = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->len());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryRcFriendByUserNicknameReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const QueryRcFriendByUserNicknameReq*>(&from));
}

void QueryRcFriendByUserNicknameReq::MergeFrom(const QueryRcFriendByUserNicknameReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_start_idx()) {
      set_start_idx(from.start_idx());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void QueryRcFriendByUserNicknameReq::CopyFrom(const QueryRcFriendByUserNicknameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRcFriendByUserNicknameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void QueryRcFriendByUserNicknameReq::Swap(QueryRcFriendByUserNicknameReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryRcFriendByUserNicknameReq::InternalSwap(QueryRcFriendByUserNicknameReq* other) {
  std::swap(version_, other->version_);
  nickname_.Swap(&other->nickname_);
  std::swap(start_idx_, other->start_idx_);
  std::swap(len_, other->len_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string QueryRcFriendByUserNicknameReq::GetTypeName() const {
  return "YOUMEServiceProtocol.QueryRcFriendByUserNicknameReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryRcFriendByUserNicknameReq

// required int32 version = 1;
bool QueryRcFriendByUserNicknameReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryRcFriendByUserNicknameReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryRcFriendByUserNicknameReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryRcFriendByUserNicknameReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 QueryRcFriendByUserNicknameReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.QueryRcFriendByUserNicknameReq.version)
  return version_;
}
 void QueryRcFriendByUserNicknameReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.QueryRcFriendByUserNicknameReq.version)
}

// required bytes nickname = 2;
bool QueryRcFriendByUserNicknameReq::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryRcFriendByUserNicknameReq::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryRcFriendByUserNicknameReq::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryRcFriendByUserNicknameReq::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
 const ::std::string& QueryRcFriendByUserNicknameReq::nickname() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.QueryRcFriendByUserNicknameReq.nickname)
  return nickname_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryRcFriendByUserNicknameReq::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.QueryRcFriendByUserNicknameReq.nickname)
}
 void QueryRcFriendByUserNicknameReq::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.QueryRcFriendByUserNicknameReq.nickname)
}
 void QueryRcFriendByUserNicknameReq::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.QueryRcFriendByUserNicknameReq.nickname)
}
 ::std::string* QueryRcFriendByUserNicknameReq::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.QueryRcFriendByUserNicknameReq.nickname)
  return nickname_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QueryRcFriendByUserNicknameReq::release_nickname() {
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryRcFriendByUserNicknameReq::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.QueryRcFriendByUserNicknameReq.nickname)
}

// required int32 start_idx = 3;
bool QueryRcFriendByUserNicknameReq::has_start_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QueryRcFriendByUserNicknameReq::set_has_start_idx() {
  _has_bits_[0] |= 0x00000004u;
}
void QueryRcFriendByUserNicknameReq::clear_has_start_idx() {
  _has_bits_[0] &= ~0x00000004u;
}
void QueryRcFriendByUserNicknameReq::clear_start_idx() {
  start_idx_ = 0;
  clear_has_start_idx();
}
 ::youmecommon::protobuf::int32 QueryRcFriendByUserNicknameReq::start_idx() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.QueryRcFriendByUserNicknameReq.start_idx)
  return start_idx_;
}
 void QueryRcFriendByUserNicknameReq::set_start_idx(::youmecommon::protobuf::int32 value) {
  set_has_start_idx();
  start_idx_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.QueryRcFriendByUserNicknameReq.start_idx)
}

// required int32 len = 4;
bool QueryRcFriendByUserNicknameReq::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QueryRcFriendByUserNicknameReq::set_has_len() {
  _has_bits_[0] |= 0x00000008u;
}
void QueryRcFriendByUserNicknameReq::clear_has_len() {
  _has_bits_[0] &= ~0x00000008u;
}
void QueryRcFriendByUserNicknameReq::clear_len() {
  len_ = 0;
  clear_has_len();
}
 ::youmecommon::protobuf::int32 QueryRcFriendByUserNicknameReq::len() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.QueryRcFriendByUserNicknameReq.len)
  return len_;
}
 void QueryRcFriendByUserNicknameReq::set_len(::youmecommon::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.QueryRcFriendByUserNicknameReq.len)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int QueryRcFriendByUserNicknameRsp::kVersionFieldNumber;
const int QueryRcFriendByUserNicknameRsp::kRetFieldNumber;
const int QueryRcFriendByUserNicknameRsp::kListCntFieldNumber;
const int QueryRcFriendByUserNicknameRsp::kUserListFieldNumber;
#endif  // !_MSC_VER

QueryRcFriendByUserNicknameRsp::QueryRcFriendByUserNicknameRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.QueryRcFriendByUserNicknameRsp)
}

void QueryRcFriendByUserNicknameRsp::InitAsDefaultInstance() {
}

QueryRcFriendByUserNicknameRsp::QueryRcFriendByUserNicknameRsp(const QueryRcFriendByUserNicknameRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.QueryRcFriendByUserNicknameRsp)
}

void QueryRcFriendByUserNicknameRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  list_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryRcFriendByUserNicknameRsp::~QueryRcFriendByUserNicknameRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.QueryRcFriendByUserNicknameRsp)
  SharedDtor();
}

void QueryRcFriendByUserNicknameRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void QueryRcFriendByUserNicknameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QueryRcFriendByUserNicknameRsp& QueryRcFriendByUserNicknameRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fquery_5ffriend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fquery_5ffriend_2eproto();
#endif
  return *default_instance_;
}

QueryRcFriendByUserNicknameRsp* QueryRcFriendByUserNicknameRsp::default_instance_ = NULL;

QueryRcFriendByUserNicknameRsp* QueryRcFriendByUserNicknameRsp::New(::youmecommon::protobuf::Arena* arena) const {
  QueryRcFriendByUserNicknameRsp* n = new QueryRcFriendByUserNicknameRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryRcFriendByUserNicknameRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QueryRcFriendByUserNicknameRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(version_, ret_);
    list_cnt_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool QueryRcFriendByUserNicknameRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.QueryRcFriendByUserNicknameRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_list_cnt;
        break;
      }

      // required int32 list_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_list_cnt:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &list_cnt_)));
          set_has_list_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_list;
        break;
      }

      // repeated .YOUMEServiceProtocol.RcFriendBriefInfo user_list = 4;
      case 4: {
        if (tag == 34) {
         parse_user_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_user_list:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_user_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.QueryRcFriendByUserNicknameRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.QueryRcFriendByUserNicknameRsp)
  return false;
#undef DO_
}

void QueryRcFriendByUserNicknameRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.QueryRcFriendByUserNicknameRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // required int32 list_cnt = 3;
  if (has_list_cnt()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->list_cnt(), output);
  }

  // repeated .YOUMEServiceProtocol.RcFriendBriefInfo user_list = 4;
  for (unsigned int i = 0, n = this->user_list_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->user_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.QueryRcFriendByUserNicknameRsp)
}

int QueryRcFriendByUserNicknameRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_list_cnt()) {
    // required int32 list_cnt = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->list_cnt());
  }

  return total_size;
}
int QueryRcFriendByUserNicknameRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required int32 list_cnt = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->list_cnt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .YOUMEServiceProtocol.RcFriendBriefInfo user_list = 4;
  total_size += 1 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryRcFriendByUserNicknameRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const QueryRcFriendByUserNicknameRsp*>(&from));
}

void QueryRcFriendByUserNicknameRsp::MergeFrom(const QueryRcFriendByUserNicknameRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  user_list_.MergeFrom(from.user_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_list_cnt()) {
      set_list_cnt(from.list_cnt());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void QueryRcFriendByUserNicknameRsp::CopyFrom(const QueryRcFriendByUserNicknameRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRcFriendByUserNicknameRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->user_list())) return false;
  return true;
}

void QueryRcFriendByUserNicknameRsp::Swap(QueryRcFriendByUserNicknameRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryRcFriendByUserNicknameRsp::InternalSwap(QueryRcFriendByUserNicknameRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(list_cnt_, other->list_cnt_);
  user_list_.UnsafeArenaSwap(&other->user_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string QueryRcFriendByUserNicknameRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.QueryRcFriendByUserNicknameRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryRcFriendByUserNicknameRsp

// required int32 version = 1;
bool QueryRcFriendByUserNicknameRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryRcFriendByUserNicknameRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryRcFriendByUserNicknameRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryRcFriendByUserNicknameRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 QueryRcFriendByUserNicknameRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.QueryRcFriendByUserNicknameRsp.version)
  return version_;
}
 void QueryRcFriendByUserNicknameRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.QueryRcFriendByUserNicknameRsp.version)
}

// required int32 ret = 2;
bool QueryRcFriendByUserNicknameRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryRcFriendByUserNicknameRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryRcFriendByUserNicknameRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryRcFriendByUserNicknameRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 QueryRcFriendByUserNicknameRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.QueryRcFriendByUserNicknameRsp.ret)
  return ret_;
}
 void QueryRcFriendByUserNicknameRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.QueryRcFriendByUserNicknameRsp.ret)
}

// required int32 list_cnt = 3;
bool QueryRcFriendByUserNicknameRsp::has_list_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QueryRcFriendByUserNicknameRsp::set_has_list_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
void QueryRcFriendByUserNicknameRsp::clear_has_list_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
void QueryRcFriendByUserNicknameRsp::clear_list_cnt() {
  list_cnt_ = 0;
  clear_has_list_cnt();
}
 ::youmecommon::protobuf::int32 QueryRcFriendByUserNicknameRsp::list_cnt() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.QueryRcFriendByUserNicknameRsp.list_cnt)
  return list_cnt_;
}
 void QueryRcFriendByUserNicknameRsp::set_list_cnt(::youmecommon::protobuf::int32 value) {
  set_has_list_cnt();
  list_cnt_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.QueryRcFriendByUserNicknameRsp.list_cnt)
}

// repeated .YOUMEServiceProtocol.RcFriendBriefInfo user_list = 4;
int QueryRcFriendByUserNicknameRsp::user_list_size() const {
  return user_list_.size();
}
void QueryRcFriendByUserNicknameRsp::clear_user_list() {
  user_list_.Clear();
}
const ::YOUMEServiceProtocol::RcFriendBriefInfo& QueryRcFriendByUserNicknameRsp::user_list(int index) const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.QueryRcFriendByUserNicknameRsp.user_list)
  return user_list_.Get(index);
}
::YOUMEServiceProtocol::RcFriendBriefInfo* QueryRcFriendByUserNicknameRsp::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.QueryRcFriendByUserNicknameRsp.user_list)
  return user_list_.Mutable(index);
}
::YOUMEServiceProtocol::RcFriendBriefInfo* QueryRcFriendByUserNicknameRsp::add_user_list() {
  // @@protoc_insertion_point(field_add:YOUMEServiceProtocol.QueryRcFriendByUserNicknameRsp.user_list)
  return user_list_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::RcFriendBriefInfo >*
QueryRcFriendByUserNicknameRsp::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:YOUMEServiceProtocol.QueryRcFriendByUserNicknameRsp.user_list)
  return &user_list_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::RcFriendBriefInfo >&
QueryRcFriendByUserNicknameRsp::user_list() const {
  // @@protoc_insertion_point(field_list:YOUMEServiceProtocol.QueryRcFriendByUserNicknameRsp.user_list)
  return user_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YOUMEServiceProtocol

// @@protoc_insertion_point(global_scope)
