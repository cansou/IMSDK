// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youme_room.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "youme_room.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YOUMEServiceProtocol {

void protobuf_ShutdownFile_youme_5froom_2eproto() {
  delete EnterRoomReq::default_instance_;
  delete EnterRoomRsp::default_instance_;
  delete LeaveRoomReq::default_instance_;
  delete LeaveRoomRsp::default_instance_;
  delete LeaveAllRoomReq::default_instance_;
  delete LeaveAllRoomRsp::default_instance_;
  delete GetRoomInfoReq::default_instance_;
  delete YoumeRoomInfo::default_instance_;
  delete GetRoomInfoRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_youme_5froom_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_youme_5froom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  EnterRoomReq::default_instance_ = new EnterRoomReq();
  EnterRoomRsp::default_instance_ = new EnterRoomRsp();
  LeaveRoomReq::default_instance_ = new LeaveRoomReq();
  LeaveRoomRsp::default_instance_ = new LeaveRoomRsp();
  LeaveAllRoomReq::default_instance_ = new LeaveAllRoomReq();
  LeaveAllRoomRsp::default_instance_ = new LeaveAllRoomRsp();
  GetRoomInfoReq::default_instance_ = new GetRoomInfoReq();
  YoumeRoomInfo::default_instance_ = new YoumeRoomInfo();
  GetRoomInfoRsp::default_instance_ = new GetRoomInfoRsp();
  EnterRoomReq::default_instance_->InitAsDefaultInstance();
  EnterRoomRsp::default_instance_->InitAsDefaultInstance();
  LeaveRoomReq::default_instance_->InitAsDefaultInstance();
  LeaveRoomRsp::default_instance_->InitAsDefaultInstance();
  LeaveAllRoomReq::default_instance_->InitAsDefaultInstance();
  LeaveAllRoomRsp::default_instance_->InitAsDefaultInstance();
  GetRoomInfoReq::default_instance_->InitAsDefaultInstance();
  YoumeRoomInfo::default_instance_->InitAsDefaultInstance();
  GetRoomInfoRsp::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_youme_5froom_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_youme_5froom_2eproto_once_);
void protobuf_AddDesc_youme_5froom_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_youme_5froom_2eproto_once_,
                 &protobuf_AddDesc_youme_5froom_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_youme_5froom_2eproto {
  StaticDescriptorInitializer_youme_5froom_2eproto() {
    protobuf_AddDesc_youme_5froom_2eproto();
  }
} static_descriptor_initializer_youme_5froom_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int EnterRoomReq::kVersionFieldNumber;
const int EnterRoomReq::kRoomIdFieldNumber;
#endif  // !_MSC_VER

EnterRoomReq::EnterRoomReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.EnterRoomReq)
}

void EnterRoomReq::InitAsDefaultInstance() {
}

EnterRoomReq::EnterRoomReq(const EnterRoomReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.EnterRoomReq)
}

void EnterRoomReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  room_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterRoomReq::~EnterRoomReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.EnterRoomReq)
  SharedDtor();
}

void EnterRoomReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnterRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnterRoomReq& EnterRoomReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5froom_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5froom_2eproto();
#endif
  return *default_instance_;
}

EnterRoomReq* EnterRoomReq::default_instance_ = NULL;

EnterRoomReq* EnterRoomReq::New(::youmecommon::protobuf::Arena* arena) const {
  EnterRoomReq* n = new EnterRoomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnterRoomReq::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    version_ = 0;
    if (has_room_id()) {
      room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EnterRoomReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.EnterRoomReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_room_id;
        break;
      }

      // required bytes room_id = 2;
      case 2: {
        if (tag == 18) {
         parse_room_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_room_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.EnterRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.EnterRoomReq)
  return false;
#undef DO_
}

void EnterRoomReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.EnterRoomReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required bytes room_id = 2;
  if (has_room_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->room_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.EnterRoomReq)
}

int EnterRoomReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_room_id()) {
    // required bytes room_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->room_id());
  }

  return total_size;
}
int EnterRoomReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required bytes room_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->room_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterRoomReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const EnterRoomReq*>(&from));
}

void EnterRoomReq::MergeFrom(const EnterRoomReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_room_id()) {
      set_has_room_id();
      room_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EnterRoomReq::CopyFrom(const EnterRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EnterRoomReq::Swap(EnterRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnterRoomReq::InternalSwap(EnterRoomReq* other) {
  std::swap(version_, other->version_);
  room_id_.Swap(&other->room_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EnterRoomReq::GetTypeName() const {
  return "YOUMEServiceProtocol.EnterRoomReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnterRoomReq

// required int32 version = 1;
bool EnterRoomReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EnterRoomReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void EnterRoomReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void EnterRoomReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 EnterRoomReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.EnterRoomReq.version)
  return version_;
}
 void EnterRoomReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.EnterRoomReq.version)
}

// required bytes room_id = 2;
bool EnterRoomReq::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EnterRoomReq::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
void EnterRoomReq::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void EnterRoomReq::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
 const ::std::string& EnterRoomReq::room_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.EnterRoomReq.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EnterRoomReq::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.EnterRoomReq.room_id)
}
 void EnterRoomReq::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.EnterRoomReq.room_id)
}
 void EnterRoomReq::set_room_id(const void* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.EnterRoomReq.room_id)
}
 ::std::string* EnterRoomReq::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.EnterRoomReq.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EnterRoomReq::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EnterRoomReq::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.EnterRoomReq.room_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int EnterRoomRsp::kVersionFieldNumber;
const int EnterRoomRsp::kRetFieldNumber;
#endif  // !_MSC_VER

EnterRoomRsp::EnterRoomRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.EnterRoomRsp)
}

void EnterRoomRsp::InitAsDefaultInstance() {
}

EnterRoomRsp::EnterRoomRsp(const EnterRoomRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.EnterRoomRsp)
}

void EnterRoomRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterRoomRsp::~EnterRoomRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.EnterRoomRsp)
  SharedDtor();
}

void EnterRoomRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EnterRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EnterRoomRsp& EnterRoomRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5froom_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5froom_2eproto();
#endif
  return *default_instance_;
}

EnterRoomRsp* EnterRoomRsp::default_instance_ = NULL;

EnterRoomRsp* EnterRoomRsp::New(::youmecommon::protobuf::Arena* arena) const {
  EnterRoomRsp* n = new EnterRoomRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnterRoomRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EnterRoomRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, ret_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EnterRoomRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.EnterRoomRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.EnterRoomRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.EnterRoomRsp)
  return false;
#undef DO_
}

void EnterRoomRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.EnterRoomRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.EnterRoomRsp)
}

int EnterRoomRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  return total_size;
}
int EnterRoomRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterRoomRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const EnterRoomRsp*>(&from));
}

void EnterRoomRsp::MergeFrom(const EnterRoomRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void EnterRoomRsp::CopyFrom(const EnterRoomRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EnterRoomRsp::Swap(EnterRoomRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnterRoomRsp::InternalSwap(EnterRoomRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EnterRoomRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.EnterRoomRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnterRoomRsp

// required int32 version = 1;
bool EnterRoomRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EnterRoomRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void EnterRoomRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void EnterRoomRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 EnterRoomRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.EnterRoomRsp.version)
  return version_;
}
 void EnterRoomRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.EnterRoomRsp.version)
}

// required int32 ret = 2;
bool EnterRoomRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EnterRoomRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void EnterRoomRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void EnterRoomRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 EnterRoomRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.EnterRoomRsp.ret)
  return ret_;
}
 void EnterRoomRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.EnterRoomRsp.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int LeaveRoomReq::kVersionFieldNumber;
const int LeaveRoomReq::kRoomIdFieldNumber;
#endif  // !_MSC_VER

LeaveRoomReq::LeaveRoomReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.LeaveRoomReq)
}

void LeaveRoomReq::InitAsDefaultInstance() {
}

LeaveRoomReq::LeaveRoomReq(const LeaveRoomReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.LeaveRoomReq)
}

void LeaveRoomReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  room_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveRoomReq::~LeaveRoomReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.LeaveRoomReq)
  SharedDtor();
}

void LeaveRoomReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LeaveRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LeaveRoomReq& LeaveRoomReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5froom_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5froom_2eproto();
#endif
  return *default_instance_;
}

LeaveRoomReq* LeaveRoomReq::default_instance_ = NULL;

LeaveRoomReq* LeaveRoomReq::New(::youmecommon::protobuf::Arena* arena) const {
  LeaveRoomReq* n = new LeaveRoomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaveRoomReq::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    version_ = 0;
    if (has_room_id()) {
      room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LeaveRoomReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.LeaveRoomReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_room_id;
        break;
      }

      // required bytes room_id = 2;
      case 2: {
        if (tag == 18) {
         parse_room_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_room_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.LeaveRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.LeaveRoomReq)
  return false;
#undef DO_
}

void LeaveRoomReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.LeaveRoomReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required bytes room_id = 2;
  if (has_room_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->room_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.LeaveRoomReq)
}

int LeaveRoomReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_room_id()) {
    // required bytes room_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->room_id());
  }

  return total_size;
}
int LeaveRoomReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required bytes room_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->room_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveRoomReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const LeaveRoomReq*>(&from));
}

void LeaveRoomReq::MergeFrom(const LeaveRoomReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_room_id()) {
      set_has_room_id();
      room_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LeaveRoomReq::CopyFrom(const LeaveRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LeaveRoomReq::Swap(LeaveRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaveRoomReq::InternalSwap(LeaveRoomReq* other) {
  std::swap(version_, other->version_);
  room_id_.Swap(&other->room_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LeaveRoomReq::GetTypeName() const {
  return "YOUMEServiceProtocol.LeaveRoomReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaveRoomReq

// required int32 version = 1;
bool LeaveRoomReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LeaveRoomReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void LeaveRoomReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void LeaveRoomReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 LeaveRoomReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.LeaveRoomReq.version)
  return version_;
}
 void LeaveRoomReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.LeaveRoomReq.version)
}

// required bytes room_id = 2;
bool LeaveRoomReq::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LeaveRoomReq::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
void LeaveRoomReq::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void LeaveRoomReq::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
 const ::std::string& LeaveRoomReq::room_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.LeaveRoomReq.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LeaveRoomReq::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.LeaveRoomReq.room_id)
}
 void LeaveRoomReq::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.LeaveRoomReq.room_id)
}
 void LeaveRoomReq::set_room_id(const void* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.LeaveRoomReq.room_id)
}
 ::std::string* LeaveRoomReq::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.LeaveRoomReq.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LeaveRoomReq::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LeaveRoomReq::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.LeaveRoomReq.room_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int LeaveRoomRsp::kVersionFieldNumber;
const int LeaveRoomRsp::kRetFieldNumber;
#endif  // !_MSC_VER

LeaveRoomRsp::LeaveRoomRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.LeaveRoomRsp)
}

void LeaveRoomRsp::InitAsDefaultInstance() {
}

LeaveRoomRsp::LeaveRoomRsp(const LeaveRoomRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.LeaveRoomRsp)
}

void LeaveRoomRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveRoomRsp::~LeaveRoomRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.LeaveRoomRsp)
  SharedDtor();
}

void LeaveRoomRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LeaveRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LeaveRoomRsp& LeaveRoomRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5froom_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5froom_2eproto();
#endif
  return *default_instance_;
}

LeaveRoomRsp* LeaveRoomRsp::default_instance_ = NULL;

LeaveRoomRsp* LeaveRoomRsp::New(::youmecommon::protobuf::Arena* arena) const {
  LeaveRoomRsp* n = new LeaveRoomRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaveRoomRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LeaveRoomRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, ret_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LeaveRoomRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.LeaveRoomRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.LeaveRoomRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.LeaveRoomRsp)
  return false;
#undef DO_
}

void LeaveRoomRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.LeaveRoomRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.LeaveRoomRsp)
}

int LeaveRoomRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  return total_size;
}
int LeaveRoomRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveRoomRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const LeaveRoomRsp*>(&from));
}

void LeaveRoomRsp::MergeFrom(const LeaveRoomRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LeaveRoomRsp::CopyFrom(const LeaveRoomRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveRoomRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LeaveRoomRsp::Swap(LeaveRoomRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaveRoomRsp::InternalSwap(LeaveRoomRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LeaveRoomRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.LeaveRoomRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaveRoomRsp

// required int32 version = 1;
bool LeaveRoomRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LeaveRoomRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void LeaveRoomRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void LeaveRoomRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 LeaveRoomRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.LeaveRoomRsp.version)
  return version_;
}
 void LeaveRoomRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.LeaveRoomRsp.version)
}

// required int32 ret = 2;
bool LeaveRoomRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LeaveRoomRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void LeaveRoomRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void LeaveRoomRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 LeaveRoomRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.LeaveRoomRsp.ret)
  return ret_;
}
 void LeaveRoomRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.LeaveRoomRsp.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int LeaveAllRoomReq::kVersionFieldNumber;
#endif  // !_MSC_VER

LeaveAllRoomReq::LeaveAllRoomReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.LeaveAllRoomReq)
}

void LeaveAllRoomReq::InitAsDefaultInstance() {
}

LeaveAllRoomReq::LeaveAllRoomReq(const LeaveAllRoomReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.LeaveAllRoomReq)
}

void LeaveAllRoomReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveAllRoomReq::~LeaveAllRoomReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.LeaveAllRoomReq)
  SharedDtor();
}

void LeaveAllRoomReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LeaveAllRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LeaveAllRoomReq& LeaveAllRoomReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5froom_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5froom_2eproto();
#endif
  return *default_instance_;
}

LeaveAllRoomReq* LeaveAllRoomReq::default_instance_ = NULL;

LeaveAllRoomReq* LeaveAllRoomReq::New(::youmecommon::protobuf::Arena* arena) const {
  LeaveAllRoomReq* n = new LeaveAllRoomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaveAllRoomReq::Clear() {
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LeaveAllRoomReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.LeaveAllRoomReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.LeaveAllRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.LeaveAllRoomReq)
  return false;
#undef DO_
}

void LeaveAllRoomReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.LeaveAllRoomReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.LeaveAllRoomReq)
}

int LeaveAllRoomReq::ByteSize() const {
  int total_size = 0;

  // required int32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveAllRoomReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const LeaveAllRoomReq*>(&from));
}

void LeaveAllRoomReq::MergeFrom(const LeaveAllRoomReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LeaveAllRoomReq::CopyFrom(const LeaveAllRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveAllRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LeaveAllRoomReq::Swap(LeaveAllRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaveAllRoomReq::InternalSwap(LeaveAllRoomReq* other) {
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LeaveAllRoomReq::GetTypeName() const {
  return "YOUMEServiceProtocol.LeaveAllRoomReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaveAllRoomReq

// required int32 version = 1;
bool LeaveAllRoomReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LeaveAllRoomReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void LeaveAllRoomReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void LeaveAllRoomReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 LeaveAllRoomReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.LeaveAllRoomReq.version)
  return version_;
}
 void LeaveAllRoomReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.LeaveAllRoomReq.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int LeaveAllRoomRsp::kVersionFieldNumber;
const int LeaveAllRoomRsp::kRetFieldNumber;
#endif  // !_MSC_VER

LeaveAllRoomRsp::LeaveAllRoomRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.LeaveAllRoomRsp)
}

void LeaveAllRoomRsp::InitAsDefaultInstance() {
}

LeaveAllRoomRsp::LeaveAllRoomRsp(const LeaveAllRoomRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.LeaveAllRoomRsp)
}

void LeaveAllRoomRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveAllRoomRsp::~LeaveAllRoomRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.LeaveAllRoomRsp)
  SharedDtor();
}

void LeaveAllRoomRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LeaveAllRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LeaveAllRoomRsp& LeaveAllRoomRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5froom_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5froom_2eproto();
#endif
  return *default_instance_;
}

LeaveAllRoomRsp* LeaveAllRoomRsp::default_instance_ = NULL;

LeaveAllRoomRsp* LeaveAllRoomRsp::New(::youmecommon::protobuf::Arena* arena) const {
  LeaveAllRoomRsp* n = new LeaveAllRoomRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaveAllRoomRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LeaveAllRoomRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, ret_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LeaveAllRoomRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.LeaveAllRoomRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.LeaveAllRoomRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.LeaveAllRoomRsp)
  return false;
#undef DO_
}

void LeaveAllRoomRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.LeaveAllRoomRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.LeaveAllRoomRsp)
}

int LeaveAllRoomRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  return total_size;
}
int LeaveAllRoomRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveAllRoomRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const LeaveAllRoomRsp*>(&from));
}

void LeaveAllRoomRsp::MergeFrom(const LeaveAllRoomRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LeaveAllRoomRsp::CopyFrom(const LeaveAllRoomRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveAllRoomRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LeaveAllRoomRsp::Swap(LeaveAllRoomRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaveAllRoomRsp::InternalSwap(LeaveAllRoomRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LeaveAllRoomRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.LeaveAllRoomRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaveAllRoomRsp

// required int32 version = 1;
bool LeaveAllRoomRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LeaveAllRoomRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void LeaveAllRoomRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void LeaveAllRoomRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 LeaveAllRoomRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.LeaveAllRoomRsp.version)
  return version_;
}
 void LeaveAllRoomRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.LeaveAllRoomRsp.version)
}

// required int32 ret = 2;
bool LeaveAllRoomRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LeaveAllRoomRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void LeaveAllRoomRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void LeaveAllRoomRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 LeaveAllRoomRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.LeaveAllRoomRsp.ret)
  return ret_;
}
 void LeaveAllRoomRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.LeaveAllRoomRsp.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetRoomInfoReq::kVersionFieldNumber;
const int GetRoomInfoReq::kRoomIdFieldNumber;
#endif  // !_MSC_VER

GetRoomInfoReq::GetRoomInfoReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.GetRoomInfoReq)
}

void GetRoomInfoReq::InitAsDefaultInstance() {
}

GetRoomInfoReq::GetRoomInfoReq(const GetRoomInfoReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.GetRoomInfoReq)
}

void GetRoomInfoReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  room_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRoomInfoReq::~GetRoomInfoReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.GetRoomInfoReq)
  SharedDtor();
}

void GetRoomInfoReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetRoomInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetRoomInfoReq& GetRoomInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5froom_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5froom_2eproto();
#endif
  return *default_instance_;
}

GetRoomInfoReq* GetRoomInfoReq::default_instance_ = NULL;

GetRoomInfoReq* GetRoomInfoReq::New(::youmecommon::protobuf::Arena* arena) const {
  GetRoomInfoReq* n = new GetRoomInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRoomInfoReq::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    version_ = 0;
    if (has_room_id()) {
      room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetRoomInfoReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.GetRoomInfoReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_room_id;
        break;
      }

      // required bytes room_id = 2;
      case 2: {
        if (tag == 18) {
         parse_room_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_room_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.GetRoomInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.GetRoomInfoReq)
  return false;
#undef DO_
}

void GetRoomInfoReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.GetRoomInfoReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required bytes room_id = 2;
  if (has_room_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->room_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.GetRoomInfoReq)
}

int GetRoomInfoReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_room_id()) {
    // required bytes room_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->room_id());
  }

  return total_size;
}
int GetRoomInfoReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required bytes room_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->room_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoomInfoReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetRoomInfoReq*>(&from));
}

void GetRoomInfoReq::MergeFrom(const GetRoomInfoReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_room_id()) {
      set_has_room_id();
      room_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetRoomInfoReq::CopyFrom(const GetRoomInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoomInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetRoomInfoReq::Swap(GetRoomInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRoomInfoReq::InternalSwap(GetRoomInfoReq* other) {
  std::swap(version_, other->version_);
  room_id_.Swap(&other->room_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetRoomInfoReq::GetTypeName() const {
  return "YOUMEServiceProtocol.GetRoomInfoReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRoomInfoReq

// required int32 version = 1;
bool GetRoomInfoReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetRoomInfoReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GetRoomInfoReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetRoomInfoReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 GetRoomInfoReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRoomInfoReq.version)
  return version_;
}
 void GetRoomInfoReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRoomInfoReq.version)
}

// required bytes room_id = 2;
bool GetRoomInfoReq::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetRoomInfoReq::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
void GetRoomInfoReq::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetRoomInfoReq::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
 const ::std::string& GetRoomInfoReq::room_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRoomInfoReq.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetRoomInfoReq::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRoomInfoReq.room_id)
}
 void GetRoomInfoReq::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.GetRoomInfoReq.room_id)
}
 void GetRoomInfoReq::set_room_id(const void* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.GetRoomInfoReq.room_id)
}
 ::std::string* GetRoomInfoReq::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.GetRoomInfoReq.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetRoomInfoReq::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetRoomInfoReq::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.GetRoomInfoReq.room_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YoumeRoomInfo::kMemberCntFieldNumber;
#endif  // !_MSC_VER

YoumeRoomInfo::YoumeRoomInfo()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.YoumeRoomInfo)
}

void YoumeRoomInfo::InitAsDefaultInstance() {
}

YoumeRoomInfo::YoumeRoomInfo(const YoumeRoomInfo& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.YoumeRoomInfo)
}

void YoumeRoomInfo::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  member_cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YoumeRoomInfo::~YoumeRoomInfo() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.YoumeRoomInfo)
  SharedDtor();
}

void YoumeRoomInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void YoumeRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YoumeRoomInfo& YoumeRoomInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5froom_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5froom_2eproto();
#endif
  return *default_instance_;
}

YoumeRoomInfo* YoumeRoomInfo::default_instance_ = NULL;

YoumeRoomInfo* YoumeRoomInfo::New(::youmecommon::protobuf::Arena* arena) const {
  YoumeRoomInfo* n = new YoumeRoomInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YoumeRoomInfo::Clear() {
  member_cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YoumeRoomInfo::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.YoumeRoomInfo)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 member_cnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_cnt_)));
          set_has_member_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.YoumeRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.YoumeRoomInfo)
  return false;
#undef DO_
}

void YoumeRoomInfo::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.YoumeRoomInfo)
  // required uint32 member_cnt = 1;
  if (has_member_cnt()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(1, this->member_cnt(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.YoumeRoomInfo)
}

int YoumeRoomInfo::ByteSize() const {
  int total_size = 0;

  // required uint32 member_cnt = 1;
  if (has_member_cnt()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->member_cnt());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YoumeRoomInfo::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YoumeRoomInfo*>(&from));
}

void YoumeRoomInfo::MergeFrom(const YoumeRoomInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_cnt()) {
      set_member_cnt(from.member_cnt());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YoumeRoomInfo::CopyFrom(const YoumeRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YoumeRoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void YoumeRoomInfo::Swap(YoumeRoomInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YoumeRoomInfo::InternalSwap(YoumeRoomInfo* other) {
  std::swap(member_cnt_, other->member_cnt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YoumeRoomInfo::GetTypeName() const {
  return "YOUMEServiceProtocol.YoumeRoomInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YoumeRoomInfo

// required uint32 member_cnt = 1;
bool YoumeRoomInfo::has_member_cnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YoumeRoomInfo::set_has_member_cnt() {
  _has_bits_[0] |= 0x00000001u;
}
void YoumeRoomInfo::clear_has_member_cnt() {
  _has_bits_[0] &= ~0x00000001u;
}
void YoumeRoomInfo::clear_member_cnt() {
  member_cnt_ = 0u;
  clear_has_member_cnt();
}
 ::youmecommon::protobuf::uint32 YoumeRoomInfo::member_cnt() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeRoomInfo.member_cnt)
  return member_cnt_;
}
 void YoumeRoomInfo::set_member_cnt(::youmecommon::protobuf::uint32 value) {
  set_has_member_cnt();
  member_cnt_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeRoomInfo.member_cnt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetRoomInfoRsp::kVersionFieldNumber;
const int GetRoomInfoRsp::kRetFieldNumber;
const int GetRoomInfoRsp::kRoomInfoFieldNumber;
#endif  // !_MSC_VER

GetRoomInfoRsp::GetRoomInfoRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.GetRoomInfoRsp)
}

void GetRoomInfoRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  room_info_ = const_cast< ::YOUMEServiceProtocol::YoumeRoomInfo*>(
      ::YOUMEServiceProtocol::YoumeRoomInfo::internal_default_instance());
#else
  room_info_ = const_cast< ::YOUMEServiceProtocol::YoumeRoomInfo*>(&::YOUMEServiceProtocol::YoumeRoomInfo::default_instance());
#endif
}

GetRoomInfoRsp::GetRoomInfoRsp(const GetRoomInfoRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.GetRoomInfoRsp)
}

void GetRoomInfoRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  room_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRoomInfoRsp::~GetRoomInfoRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.GetRoomInfoRsp)
  SharedDtor();
}

void GetRoomInfoRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete room_info_;
  }
}

void GetRoomInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetRoomInfoRsp& GetRoomInfoRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5froom_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5froom_2eproto();
#endif
  return *default_instance_;
}

GetRoomInfoRsp* GetRoomInfoRsp::default_instance_ = NULL;

GetRoomInfoRsp* GetRoomInfoRsp::New(::youmecommon::protobuf::Arena* arena) const {
  GetRoomInfoRsp* n = new GetRoomInfoRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRoomInfoRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetRoomInfoRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(version_, ret_);
    if (has_room_info()) {
      if (room_info_ != NULL) room_info_->::YOUMEServiceProtocol::YoumeRoomInfo::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetRoomInfoRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.GetRoomInfoRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_room_info;
        break;
      }

      // required .YOUMEServiceProtocol.YoumeRoomInfo room_info = 3;
      case 3: {
        if (tag == 26) {
         parse_room_info:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.GetRoomInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.GetRoomInfoRsp)
  return false;
#undef DO_
}

void GetRoomInfoRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.GetRoomInfoRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // required .YOUMEServiceProtocol.YoumeRoomInfo room_info = 3;
  if (has_room_info()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->room_info_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.GetRoomInfoRsp)
}

int GetRoomInfoRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_room_info()) {
    // required .YOUMEServiceProtocol.YoumeRoomInfo room_info = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->room_info_);
  }

  return total_size;
}
int GetRoomInfoRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required .YOUMEServiceProtocol.YoumeRoomInfo room_info = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->room_info_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoomInfoRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetRoomInfoRsp*>(&from));
}

void GetRoomInfoRsp::MergeFrom(const GetRoomInfoRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_room_info()) {
      mutable_room_info()->::YOUMEServiceProtocol::YoumeRoomInfo::MergeFrom(from.room_info());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetRoomInfoRsp::CopyFrom(const GetRoomInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoomInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_room_info()) {
    if (!this->room_info_->IsInitialized()) return false;
  }
  return true;
}

void GetRoomInfoRsp::Swap(GetRoomInfoRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRoomInfoRsp::InternalSwap(GetRoomInfoRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(room_info_, other->room_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetRoomInfoRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.GetRoomInfoRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRoomInfoRsp

// required int32 version = 1;
bool GetRoomInfoRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetRoomInfoRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GetRoomInfoRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetRoomInfoRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 GetRoomInfoRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRoomInfoRsp.version)
  return version_;
}
 void GetRoomInfoRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRoomInfoRsp.version)
}

// required int32 ret = 2;
bool GetRoomInfoRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetRoomInfoRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void GetRoomInfoRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetRoomInfoRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 GetRoomInfoRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRoomInfoRsp.ret)
  return ret_;
}
 void GetRoomInfoRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRoomInfoRsp.ret)
}

// required .YOUMEServiceProtocol.YoumeRoomInfo room_info = 3;
bool GetRoomInfoRsp::has_room_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetRoomInfoRsp::set_has_room_info() {
  _has_bits_[0] |= 0x00000004u;
}
void GetRoomInfoRsp::clear_has_room_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetRoomInfoRsp::clear_room_info() {
  if (room_info_ != NULL) room_info_->::YOUMEServiceProtocol::YoumeRoomInfo::Clear();
  clear_has_room_info();
}
const ::YOUMEServiceProtocol::YoumeRoomInfo& GetRoomInfoRsp::room_info() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRoomInfoRsp.room_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return room_info_ != NULL ? *room_info_ : *default_instance().room_info_;
#else
  return room_info_ != NULL ? *room_info_ : *default_instance_->room_info_;
#endif
}
::YOUMEServiceProtocol::YoumeRoomInfo* GetRoomInfoRsp::mutable_room_info() {
  set_has_room_info();
  if (room_info_ == NULL) {
    room_info_ = new ::YOUMEServiceProtocol::YoumeRoomInfo;
  }
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.GetRoomInfoRsp.room_info)
  return room_info_;
}
::YOUMEServiceProtocol::YoumeRoomInfo* GetRoomInfoRsp::release_room_info() {
  clear_has_room_info();
  ::YOUMEServiceProtocol::YoumeRoomInfo* temp = room_info_;
  room_info_ = NULL;
  return temp;
}
void GetRoomInfoRsp::set_allocated_room_info(::YOUMEServiceProtocol::YoumeRoomInfo* room_info) {
  delete room_info_;
  room_info_ = room_info;
  if (room_info) {
    set_has_room_info();
  } else {
    clear_has_room_info();
  }
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.GetRoomInfoRsp.room_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YOUMEServiceProtocol

// @@protoc_insertion_point(global_scope)
