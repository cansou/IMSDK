// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youme_upload_token.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "youme_upload_token.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YOUMEServiceProtocol {

void protobuf_ShutdownFile_youme_5fupload_5ftoken_2eproto() {
  delete GetUploadTokenReq::default_instance_;
  delete GetUploadTokenRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_youme_5fupload_5ftoken_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_youme_5fupload_5ftoken_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::YOUMECommonProtocol::protobuf_AddDesc_youme_5fcomm_2eproto();
  GetUploadTokenReq::default_instance_ = new GetUploadTokenReq();
  GetUploadTokenRsp::default_instance_ = new GetUploadTokenRsp();
  GetUploadTokenReq::default_instance_->InitAsDefaultInstance();
  GetUploadTokenRsp::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_youme_5fupload_5ftoken_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_youme_5fupload_5ftoken_2eproto_once_);
void protobuf_AddDesc_youme_5fupload_5ftoken_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_youme_5fupload_5ftoken_2eproto_once_,
                 &protobuf_AddDesc_youme_5fupload_5ftoken_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_youme_5fupload_5ftoken_2eproto {
  StaticDescriptorInitializer_youme_5fupload_5ftoken_2eproto() {
    protobuf_AddDesc_youme_5fupload_5ftoken_2eproto();
  }
} static_descriptor_initializer_youme_5fupload_5ftoken_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int GetUploadTokenReq::kVersionFieldNumber;
const int GetUploadTokenReq::kFileSizeFieldNumber;
const int GetUploadTokenReq::kFileMd5FieldNumber;
const int GetUploadTokenReq::kFileSuffixFieldNumber;
#endif  // !_MSC_VER

GetUploadTokenReq::GetUploadTokenReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.GetUploadTokenReq)
}

void GetUploadTokenReq::InitAsDefaultInstance() {
}

GetUploadTokenReq::GetUploadTokenReq(const GetUploadTokenReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.GetUploadTokenReq)
}

void GetUploadTokenReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  file_size_ = 0;
  file_md5_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  file_suffix_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUploadTokenReq::~GetUploadTokenReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.GetUploadTokenReq)
  SharedDtor();
}

void GetUploadTokenReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  file_md5_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  file_suffix_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUploadTokenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUploadTokenReq& GetUploadTokenReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fupload_5ftoken_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fupload_5ftoken_2eproto();
#endif
  return *default_instance_;
}

GetUploadTokenReq* GetUploadTokenReq::default_instance_ = NULL;

GetUploadTokenReq* GetUploadTokenReq::New(::youmecommon::protobuf::Arena* arena) const {
  GetUploadTokenReq* n = new GetUploadTokenReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetUploadTokenReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetUploadTokenReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(version_, file_size_);
    if (has_file_md5()) {
      file_md5_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_file_suffix()) {
      file_suffix_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetUploadTokenReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.GetUploadTokenReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_file_size;
        break;
      }

      // required int32 file_size = 2;
      case 2: {
        if (tag == 16) {
         parse_file_size:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_file_md5;
        break;
      }

      // required string file_md5 = 3;
      case 3: {
        if (tag == 26) {
         parse_file_md5:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_md5()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_file_suffix;
        break;
      }

      // required string file_suffix = 4;
      case 4: {
        if (tag == 34) {
         parse_file_suffix:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_suffix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.GetUploadTokenReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.GetUploadTokenReq)
  return false;
#undef DO_
}

void GetUploadTokenReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.GetUploadTokenReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 file_size = 2;
  if (has_file_size()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->file_size(), output);
  }

  // required string file_md5 = 3;
  if (has_file_md5()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_md5(), output);
  }

  // required string file_suffix = 4;
  if (has_file_suffix()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->file_suffix(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.GetUploadTokenReq)
}

int GetUploadTokenReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_file_size()) {
    // required int32 file_size = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->file_size());
  }

  if (has_file_md5()) {
    // required string file_md5 = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->file_md5());
  }

  if (has_file_suffix()) {
    // required string file_suffix = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->file_suffix());
  }

  return total_size;
}
int GetUploadTokenReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 file_size = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->file_size());

    // required string file_md5 = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->file_md5());

    // required string file_suffix = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->file_suffix());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUploadTokenReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetUploadTokenReq*>(&from));
}

void GetUploadTokenReq::MergeFrom(const GetUploadTokenReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_file_md5()) {
      set_has_file_md5();
      file_md5_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_md5_);
    }
    if (from.has_file_suffix()) {
      set_has_file_suffix();
      file_suffix_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_suffix_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUploadTokenReq::CopyFrom(const GetUploadTokenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUploadTokenReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GetUploadTokenReq::Swap(GetUploadTokenReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUploadTokenReq::InternalSwap(GetUploadTokenReq* other) {
  std::swap(version_, other->version_);
  std::swap(file_size_, other->file_size_);
  file_md5_.Swap(&other->file_md5_);
  file_suffix_.Swap(&other->file_suffix_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetUploadTokenReq::GetTypeName() const {
  return "YOUMEServiceProtocol.GetUploadTokenReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetUploadTokenReq

// required int32 version = 1;
bool GetUploadTokenReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetUploadTokenReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GetUploadTokenReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetUploadTokenReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 GetUploadTokenReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetUploadTokenReq.version)
  return version_;
}
 void GetUploadTokenReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetUploadTokenReq.version)
}

// required int32 file_size = 2;
bool GetUploadTokenReq::has_file_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetUploadTokenReq::set_has_file_size() {
  _has_bits_[0] |= 0x00000002u;
}
void GetUploadTokenReq::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetUploadTokenReq::clear_file_size() {
  file_size_ = 0;
  clear_has_file_size();
}
 ::youmecommon::protobuf::int32 GetUploadTokenReq::file_size() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetUploadTokenReq.file_size)
  return file_size_;
}
 void GetUploadTokenReq::set_file_size(::youmecommon::protobuf::int32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetUploadTokenReq.file_size)
}

// required string file_md5 = 3;
bool GetUploadTokenReq::has_file_md5() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetUploadTokenReq::set_has_file_md5() {
  _has_bits_[0] |= 0x00000004u;
}
void GetUploadTokenReq::clear_has_file_md5() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetUploadTokenReq::clear_file_md5() {
  file_md5_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_md5();
}
 const ::std::string& GetUploadTokenReq::file_md5() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetUploadTokenReq.file_md5)
  return file_md5_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetUploadTokenReq::set_file_md5(const ::std::string& value) {
  set_has_file_md5();
  file_md5_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetUploadTokenReq.file_md5)
}
 void GetUploadTokenReq::set_file_md5(const char* value) {
  set_has_file_md5();
  file_md5_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.GetUploadTokenReq.file_md5)
}
 void GetUploadTokenReq::set_file_md5(const char* value, size_t size) {
  set_has_file_md5();
  file_md5_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.GetUploadTokenReq.file_md5)
}
 ::std::string* GetUploadTokenReq::mutable_file_md5() {
  set_has_file_md5();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.GetUploadTokenReq.file_md5)
  return file_md5_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetUploadTokenReq::release_file_md5() {
  clear_has_file_md5();
  return file_md5_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetUploadTokenReq::set_allocated_file_md5(::std::string* file_md5) {
  if (file_md5 != NULL) {
    set_has_file_md5();
  } else {
    clear_has_file_md5();
  }
  file_md5_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), file_md5);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.GetUploadTokenReq.file_md5)
}

// required string file_suffix = 4;
bool GetUploadTokenReq::has_file_suffix() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetUploadTokenReq::set_has_file_suffix() {
  _has_bits_[0] |= 0x00000008u;
}
void GetUploadTokenReq::clear_has_file_suffix() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetUploadTokenReq::clear_file_suffix() {
  file_suffix_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_suffix();
}
 const ::std::string& GetUploadTokenReq::file_suffix() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetUploadTokenReq.file_suffix)
  return file_suffix_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetUploadTokenReq::set_file_suffix(const ::std::string& value) {
  set_has_file_suffix();
  file_suffix_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetUploadTokenReq.file_suffix)
}
 void GetUploadTokenReq::set_file_suffix(const char* value) {
  set_has_file_suffix();
  file_suffix_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.GetUploadTokenReq.file_suffix)
}
 void GetUploadTokenReq::set_file_suffix(const char* value, size_t size) {
  set_has_file_suffix();
  file_suffix_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.GetUploadTokenReq.file_suffix)
}
 ::std::string* GetUploadTokenReq::mutable_file_suffix() {
  set_has_file_suffix();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.GetUploadTokenReq.file_suffix)
  return file_suffix_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetUploadTokenReq::release_file_suffix() {
  clear_has_file_suffix();
  return file_suffix_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetUploadTokenReq::set_allocated_file_suffix(::std::string* file_suffix) {
  if (file_suffix != NULL) {
    set_has_file_suffix();
  } else {
    clear_has_file_suffix();
  }
  file_suffix_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), file_suffix);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.GetUploadTokenReq.file_suffix)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetUploadTokenRsp::kVersionFieldNumber;
const int GetUploadTokenRsp::kRetFieldNumber;
const int GetUploadTokenRsp::kTokenFieldNumber;
const int GetUploadTokenRsp::kDownloadUrlFieldNumber;
const int GetUploadTokenRsp::kHeadersFieldNumber;
const int GetUploadTokenRsp::kBucketTypeFieldNumber;
#endif  // !_MSC_VER

GetUploadTokenRsp::GetUploadTokenRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.GetUploadTokenRsp)
}

void GetUploadTokenRsp::InitAsDefaultInstance() {
}

GetUploadTokenRsp::GetUploadTokenRsp(const GetUploadTokenRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.GetUploadTokenRsp)
}

void GetUploadTokenRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  token_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  download_url_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  bucket_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUploadTokenRsp::~GetUploadTokenRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.GetUploadTokenRsp)
  SharedDtor();
}

void GetUploadTokenRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  download_url_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUploadTokenRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUploadTokenRsp& GetUploadTokenRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fupload_5ftoken_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fupload_5ftoken_2eproto();
#endif
  return *default_instance_;
}

GetUploadTokenRsp* GetUploadTokenRsp::default_instance_ = NULL;

GetUploadTokenRsp* GetUploadTokenRsp::New(::youmecommon::protobuf::Arena* arena) const {
  GetUploadTokenRsp* n = new GetUploadTokenRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetUploadTokenRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetUploadTokenRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 47u) {
    ZR_(version_, ret_);
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_download_url()) {
      download_url_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    bucket_type_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  headers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetUploadTokenRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.GetUploadTokenRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // required string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_download_url;
        break;
      }

      // required string download_url = 4;
      case 4: {
        if (tag == 34) {
         parse_download_url:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_download_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_headers;
        break;
      }

      // repeated .YOUMECommonProtocol.NameValue headers = 5;
      case 5: {
        if (tag == 42) {
         parse_headers:
          DO_(input->IncrementRecursionDepth());
         parse_loop_headers:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_headers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_bucket_type;
        break;
      }

      // optional uint32 bucket_type = 6;
      case 6: {
        if (tag == 48) {
         parse_bucket_type:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bucket_type_)));
          set_has_bucket_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.GetUploadTokenRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.GetUploadTokenRsp)
  return false;
#undef DO_
}

void GetUploadTokenRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.GetUploadTokenRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // required string token = 3;
  if (has_token()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // required string download_url = 4;
  if (has_download_url()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->download_url(), output);
  }

  // repeated .YOUMECommonProtocol.NameValue headers = 5;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->headers(i), output);
  }

  // optional uint32 bucket_type = 6;
  if (has_bucket_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bucket_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.GetUploadTokenRsp)
}

int GetUploadTokenRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_token()) {
    // required string token = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  if (has_download_url()) {
    // required string download_url = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->download_url());
  }

  return total_size;
}
int GetUploadTokenRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required string token = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->token());

    // required string download_url = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->download_url());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 bucket_type = 6;
  if (has_bucket_type()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->bucket_type());
  }

  // repeated .YOUMECommonProtocol.NameValue headers = 5;
  total_size += 1 * this->headers_size();
  for (int i = 0; i < this->headers_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headers(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUploadTokenRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetUploadTokenRsp*>(&from));
}

void GetUploadTokenRsp::MergeFrom(const GetUploadTokenRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  headers_.MergeFrom(from.headers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (from.has_download_url()) {
      set_has_download_url();
      download_url_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.download_url_);
    }
    if (from.has_bucket_type()) {
      set_bucket_type(from.bucket_type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUploadTokenRsp::CopyFrom(const GetUploadTokenRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUploadTokenRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->headers())) return false;
  return true;
}

void GetUploadTokenRsp::Swap(GetUploadTokenRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUploadTokenRsp::InternalSwap(GetUploadTokenRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  token_.Swap(&other->token_);
  download_url_.Swap(&other->download_url_);
  headers_.UnsafeArenaSwap(&other->headers_);
  std::swap(bucket_type_, other->bucket_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetUploadTokenRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.GetUploadTokenRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetUploadTokenRsp

// required int32 version = 1;
bool GetUploadTokenRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetUploadTokenRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GetUploadTokenRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetUploadTokenRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 GetUploadTokenRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetUploadTokenRsp.version)
  return version_;
}
 void GetUploadTokenRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetUploadTokenRsp.version)
}

// required int32 ret = 2;
bool GetUploadTokenRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetUploadTokenRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void GetUploadTokenRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetUploadTokenRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 GetUploadTokenRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetUploadTokenRsp.ret)
  return ret_;
}
 void GetUploadTokenRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetUploadTokenRsp.ret)
}

// required string token = 3;
bool GetUploadTokenRsp::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetUploadTokenRsp::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
void GetUploadTokenRsp::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetUploadTokenRsp::clear_token() {
  token_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& GetUploadTokenRsp::token() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetUploadTokenRsp.token)
  return token_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetUploadTokenRsp::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetUploadTokenRsp.token)
}
 void GetUploadTokenRsp::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.GetUploadTokenRsp.token)
}
 void GetUploadTokenRsp::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.GetUploadTokenRsp.token)
}
 ::std::string* GetUploadTokenRsp::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.GetUploadTokenRsp.token)
  return token_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetUploadTokenRsp::release_token() {
  clear_has_token();
  return token_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetUploadTokenRsp::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.GetUploadTokenRsp.token)
}

// required string download_url = 4;
bool GetUploadTokenRsp::has_download_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetUploadTokenRsp::set_has_download_url() {
  _has_bits_[0] |= 0x00000008u;
}
void GetUploadTokenRsp::clear_has_download_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetUploadTokenRsp::clear_download_url() {
  download_url_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_download_url();
}
 const ::std::string& GetUploadTokenRsp::download_url() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetUploadTokenRsp.download_url)
  return download_url_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetUploadTokenRsp::set_download_url(const ::std::string& value) {
  set_has_download_url();
  download_url_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetUploadTokenRsp.download_url)
}
 void GetUploadTokenRsp::set_download_url(const char* value) {
  set_has_download_url();
  download_url_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.GetUploadTokenRsp.download_url)
}
 void GetUploadTokenRsp::set_download_url(const char* value, size_t size) {
  set_has_download_url();
  download_url_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.GetUploadTokenRsp.download_url)
}
 ::std::string* GetUploadTokenRsp::mutable_download_url() {
  set_has_download_url();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.GetUploadTokenRsp.download_url)
  return download_url_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetUploadTokenRsp::release_download_url() {
  clear_has_download_url();
  return download_url_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetUploadTokenRsp::set_allocated_download_url(::std::string* download_url) {
  if (download_url != NULL) {
    set_has_download_url();
  } else {
    clear_has_download_url();
  }
  download_url_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), download_url);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.GetUploadTokenRsp.download_url)
}

// repeated .YOUMECommonProtocol.NameValue headers = 5;
int GetUploadTokenRsp::headers_size() const {
  return headers_.size();
}
void GetUploadTokenRsp::clear_headers() {
  headers_.Clear();
}
const ::YOUMECommonProtocol::NameValue& GetUploadTokenRsp::headers(int index) const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetUploadTokenRsp.headers)
  return headers_.Get(index);
}
::YOUMECommonProtocol::NameValue* GetUploadTokenRsp::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.GetUploadTokenRsp.headers)
  return headers_.Mutable(index);
}
::YOUMECommonProtocol::NameValue* GetUploadTokenRsp::add_headers() {
  // @@protoc_insertion_point(field_add:YOUMEServiceProtocol.GetUploadTokenRsp.headers)
  return headers_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YOUMECommonProtocol::NameValue >*
GetUploadTokenRsp::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:YOUMEServiceProtocol.GetUploadTokenRsp.headers)
  return &headers_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YOUMECommonProtocol::NameValue >&
GetUploadTokenRsp::headers() const {
  // @@protoc_insertion_point(field_list:YOUMEServiceProtocol.GetUploadTokenRsp.headers)
  return headers_;
}

// optional uint32 bucket_type = 6;
bool GetUploadTokenRsp::has_bucket_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetUploadTokenRsp::set_has_bucket_type() {
  _has_bits_[0] |= 0x00000020u;
}
void GetUploadTokenRsp::clear_has_bucket_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetUploadTokenRsp::clear_bucket_type() {
  bucket_type_ = 0u;
  clear_has_bucket_type();
}
 ::youmecommon::protobuf::uint32 GetUploadTokenRsp::bucket_type() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetUploadTokenRsp.bucket_type)
  return bucket_type_;
}
 void GetUploadTokenRsp::set_bucket_type(::youmecommon::protobuf::uint32 value) {
  set_has_bucket_type();
  bucket_type_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetUploadTokenRsp.bucket_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YOUMEServiceProtocol

// @@protoc_insertion_point(global_scope)
