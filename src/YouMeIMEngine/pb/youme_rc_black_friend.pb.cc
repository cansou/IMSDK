// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youme_rc_black_friend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "youme_rc_black_friend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YOUMEServiceProtocol {

void protobuf_ShutdownFile_youme_5frc_5fblack_5ffriend_2eproto() {
  delete BlackRcFriendReq::default_instance_;
  delete BlackRcFriendRsp::default_instance_;
  delete UnblackRcFriendReq::default_instance_;
  delete UnblackRcFriendRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_youme_5frc_5fblack_5ffriend_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_youme_5frc_5fblack_5ffriend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  BlackRcFriendReq::default_instance_ = new BlackRcFriendReq();
  BlackRcFriendRsp::default_instance_ = new BlackRcFriendRsp();
  UnblackRcFriendReq::default_instance_ = new UnblackRcFriendReq();
  UnblackRcFriendRsp::default_instance_ = new UnblackRcFriendRsp();
  BlackRcFriendReq::default_instance_->InitAsDefaultInstance();
  BlackRcFriendRsp::default_instance_->InitAsDefaultInstance();
  UnblackRcFriendReq::default_instance_->InitAsDefaultInstance();
  UnblackRcFriendRsp::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_youme_5frc_5fblack_5ffriend_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_youme_5frc_5fblack_5ffriend_2eproto_once_);
void protobuf_AddDesc_youme_5frc_5fblack_5ffriend_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_youme_5frc_5fblack_5ffriend_2eproto_once_,
                 &protobuf_AddDesc_youme_5frc_5fblack_5ffriend_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_youme_5frc_5fblack_5ffriend_2eproto {
  StaticDescriptorInitializer_youme_5frc_5fblack_5ffriend_2eproto() {
    protobuf_AddDesc_youme_5frc_5fblack_5ffriend_2eproto();
  }
} static_descriptor_initializer_youme_5frc_5fblack_5ffriend_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int BlackRcFriendReq::kVersionFieldNumber;
const int BlackRcFriendReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

BlackRcFriendReq::BlackRcFriendReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.BlackRcFriendReq)
}

void BlackRcFriendReq::InitAsDefaultInstance() {
}

BlackRcFriendReq::BlackRcFriendReq(const BlackRcFriendReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.BlackRcFriendReq)
}

void BlackRcFriendReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlackRcFriendReq::~BlackRcFriendReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.BlackRcFriendReq)
  SharedDtor();
}

void BlackRcFriendReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BlackRcFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BlackRcFriendReq& BlackRcFriendReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fblack_5ffriend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fblack_5ffriend_2eproto();
#endif
  return *default_instance_;
}

BlackRcFriendReq* BlackRcFriendReq::default_instance_ = NULL;

BlackRcFriendReq* BlackRcFriendReq::New(::youmecommon::protobuf::Arena* arena) const {
  BlackRcFriendReq* n = new BlackRcFriendReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlackRcFriendReq::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    version_ = 0;
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BlackRcFriendReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.BlackRcFriendReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // required bytes user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.BlackRcFriendReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.BlackRcFriendReq)
  return false;
#undef DO_
}

void BlackRcFriendReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.BlackRcFriendReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required bytes user_id = 2;
  if (has_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.BlackRcFriendReq)
}

int BlackRcFriendReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_user_id()) {
    // required bytes user_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());
  }

  return total_size;
}
int BlackRcFriendReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required bytes user_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlackRcFriendReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const BlackRcFriendReq*>(&from));
}

void BlackRcFriendReq::MergeFrom(const BlackRcFriendReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BlackRcFriendReq::CopyFrom(const BlackRcFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackRcFriendReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BlackRcFriendReq::Swap(BlackRcFriendReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlackRcFriendReq::InternalSwap(BlackRcFriendReq* other) {
  std::swap(version_, other->version_);
  user_id_.Swap(&other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BlackRcFriendReq::GetTypeName() const {
  return "YOUMEServiceProtocol.BlackRcFriendReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlackRcFriendReq

// required int32 version = 1;
bool BlackRcFriendReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlackRcFriendReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void BlackRcFriendReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlackRcFriendReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 BlackRcFriendReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.BlackRcFriendReq.version)
  return version_;
}
 void BlackRcFriendReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.BlackRcFriendReq.version)
}

// required bytes user_id = 2;
bool BlackRcFriendReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlackRcFriendReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void BlackRcFriendReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlackRcFriendReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& BlackRcFriendReq::user_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.BlackRcFriendReq.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlackRcFriendReq::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.BlackRcFriendReq.user_id)
}
 void BlackRcFriendReq::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.BlackRcFriendReq.user_id)
}
 void BlackRcFriendReq::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.BlackRcFriendReq.user_id)
}
 ::std::string* BlackRcFriendReq::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.BlackRcFriendReq.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BlackRcFriendReq::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlackRcFriendReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.BlackRcFriendReq.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int BlackRcFriendRsp::kVersionFieldNumber;
const int BlackRcFriendRsp::kRetFieldNumber;
#endif  // !_MSC_VER

BlackRcFriendRsp::BlackRcFriendRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.BlackRcFriendRsp)
}

void BlackRcFriendRsp::InitAsDefaultInstance() {
}

BlackRcFriendRsp::BlackRcFriendRsp(const BlackRcFriendRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.BlackRcFriendRsp)
}

void BlackRcFriendRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlackRcFriendRsp::~BlackRcFriendRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.BlackRcFriendRsp)
  SharedDtor();
}

void BlackRcFriendRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BlackRcFriendRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BlackRcFriendRsp& BlackRcFriendRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fblack_5ffriend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fblack_5ffriend_2eproto();
#endif
  return *default_instance_;
}

BlackRcFriendRsp* BlackRcFriendRsp::default_instance_ = NULL;

BlackRcFriendRsp* BlackRcFriendRsp::New(::youmecommon::protobuf::Arena* arena) const {
  BlackRcFriendRsp* n = new BlackRcFriendRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlackRcFriendRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BlackRcFriendRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, ret_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BlackRcFriendRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.BlackRcFriendRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.BlackRcFriendRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.BlackRcFriendRsp)
  return false;
#undef DO_
}

void BlackRcFriendRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.BlackRcFriendRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.BlackRcFriendRsp)
}

int BlackRcFriendRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  return total_size;
}
int BlackRcFriendRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlackRcFriendRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const BlackRcFriendRsp*>(&from));
}

void BlackRcFriendRsp::MergeFrom(const BlackRcFriendRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BlackRcFriendRsp::CopyFrom(const BlackRcFriendRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackRcFriendRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BlackRcFriendRsp::Swap(BlackRcFriendRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlackRcFriendRsp::InternalSwap(BlackRcFriendRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BlackRcFriendRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.BlackRcFriendRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlackRcFriendRsp

// required int32 version = 1;
bool BlackRcFriendRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlackRcFriendRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void BlackRcFriendRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlackRcFriendRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 BlackRcFriendRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.BlackRcFriendRsp.version)
  return version_;
}
 void BlackRcFriendRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.BlackRcFriendRsp.version)
}

// required int32 ret = 2;
bool BlackRcFriendRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlackRcFriendRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void BlackRcFriendRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlackRcFriendRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 BlackRcFriendRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.BlackRcFriendRsp.ret)
  return ret_;
}
 void BlackRcFriendRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.BlackRcFriendRsp.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int UnblackRcFriendReq::kVersionFieldNumber;
const int UnblackRcFriendReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

UnblackRcFriendReq::UnblackRcFriendReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.UnblackRcFriendReq)
}

void UnblackRcFriendReq::InitAsDefaultInstance() {
}

UnblackRcFriendReq::UnblackRcFriendReq(const UnblackRcFriendReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.UnblackRcFriendReq)
}

void UnblackRcFriendReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnblackRcFriendReq::~UnblackRcFriendReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.UnblackRcFriendReq)
  SharedDtor();
}

void UnblackRcFriendReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UnblackRcFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UnblackRcFriendReq& UnblackRcFriendReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fblack_5ffriend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fblack_5ffriend_2eproto();
#endif
  return *default_instance_;
}

UnblackRcFriendReq* UnblackRcFriendReq::default_instance_ = NULL;

UnblackRcFriendReq* UnblackRcFriendReq::New(::youmecommon::protobuf::Arena* arena) const {
  UnblackRcFriendReq* n = new UnblackRcFriendReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnblackRcFriendReq::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    version_ = 0;
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UnblackRcFriendReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.UnblackRcFriendReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // required bytes user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.UnblackRcFriendReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.UnblackRcFriendReq)
  return false;
#undef DO_
}

void UnblackRcFriendReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.UnblackRcFriendReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required bytes user_id = 2;
  if (has_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.UnblackRcFriendReq)
}

int UnblackRcFriendReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_user_id()) {
    // required bytes user_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());
  }

  return total_size;
}
int UnblackRcFriendReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required bytes user_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnblackRcFriendReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const UnblackRcFriendReq*>(&from));
}

void UnblackRcFriendReq::MergeFrom(const UnblackRcFriendReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UnblackRcFriendReq::CopyFrom(const UnblackRcFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnblackRcFriendReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UnblackRcFriendReq::Swap(UnblackRcFriendReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnblackRcFriendReq::InternalSwap(UnblackRcFriendReq* other) {
  std::swap(version_, other->version_);
  user_id_.Swap(&other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UnblackRcFriendReq::GetTypeName() const {
  return "YOUMEServiceProtocol.UnblackRcFriendReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnblackRcFriendReq

// required int32 version = 1;
bool UnblackRcFriendReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UnblackRcFriendReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void UnblackRcFriendReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void UnblackRcFriendReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 UnblackRcFriendReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.UnblackRcFriendReq.version)
  return version_;
}
 void UnblackRcFriendReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.UnblackRcFriendReq.version)
}

// required bytes user_id = 2;
bool UnblackRcFriendReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UnblackRcFriendReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void UnblackRcFriendReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void UnblackRcFriendReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& UnblackRcFriendReq::user_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.UnblackRcFriendReq.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnblackRcFriendReq::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.UnblackRcFriendReq.user_id)
}
 void UnblackRcFriendReq::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.UnblackRcFriendReq.user_id)
}
 void UnblackRcFriendReq::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.UnblackRcFriendReq.user_id)
}
 ::std::string* UnblackRcFriendReq::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.UnblackRcFriendReq.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UnblackRcFriendReq::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnblackRcFriendReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.UnblackRcFriendReq.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int UnblackRcFriendRsp::kVersionFieldNumber;
const int UnblackRcFriendRsp::kRetFieldNumber;
#endif  // !_MSC_VER

UnblackRcFriendRsp::UnblackRcFriendRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.UnblackRcFriendRsp)
}

void UnblackRcFriendRsp::InitAsDefaultInstance() {
}

UnblackRcFriendRsp::UnblackRcFriendRsp(const UnblackRcFriendRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.UnblackRcFriendRsp)
}

void UnblackRcFriendRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnblackRcFriendRsp::~UnblackRcFriendRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.UnblackRcFriendRsp)
  SharedDtor();
}

void UnblackRcFriendRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UnblackRcFriendRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UnblackRcFriendRsp& UnblackRcFriendRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fblack_5ffriend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fblack_5ffriend_2eproto();
#endif
  return *default_instance_;
}

UnblackRcFriendRsp* UnblackRcFriendRsp::default_instance_ = NULL;

UnblackRcFriendRsp* UnblackRcFriendRsp::New(::youmecommon::protobuf::Arena* arena) const {
  UnblackRcFriendRsp* n = new UnblackRcFriendRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnblackRcFriendRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UnblackRcFriendRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, ret_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UnblackRcFriendRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.UnblackRcFriendRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.UnblackRcFriendRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.UnblackRcFriendRsp)
  return false;
#undef DO_
}

void UnblackRcFriendRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.UnblackRcFriendRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.UnblackRcFriendRsp)
}

int UnblackRcFriendRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  return total_size;
}
int UnblackRcFriendRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnblackRcFriendRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const UnblackRcFriendRsp*>(&from));
}

void UnblackRcFriendRsp::MergeFrom(const UnblackRcFriendRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UnblackRcFriendRsp::CopyFrom(const UnblackRcFriendRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnblackRcFriendRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UnblackRcFriendRsp::Swap(UnblackRcFriendRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnblackRcFriendRsp::InternalSwap(UnblackRcFriendRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UnblackRcFriendRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.UnblackRcFriendRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnblackRcFriendRsp

// required int32 version = 1;
bool UnblackRcFriendRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UnblackRcFriendRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void UnblackRcFriendRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void UnblackRcFriendRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 UnblackRcFriendRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.UnblackRcFriendRsp.version)
  return version_;
}
 void UnblackRcFriendRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.UnblackRcFriendRsp.version)
}

// required int32 ret = 2;
bool UnblackRcFriendRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UnblackRcFriendRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void UnblackRcFriendRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void UnblackRcFriendRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 UnblackRcFriendRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.UnblackRcFriendRsp.ret)
  return ret_;
}
 void UnblackRcFriendRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.UnblackRcFriendRsp.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YOUMEServiceProtocol

// @@protoc_insertion_point(global_scope)
