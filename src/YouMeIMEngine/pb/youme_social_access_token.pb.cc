// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youme_social_access_token.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "youme_social_access_token.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YOUMEServiceProtocol {

void protobuf_ShutdownFile_youme_5fweixin_5faccess_5ftoken_2eproto() {
  delete GetWeiXinAccessTokenReq::default_instance_;
  delete GetWeiXinAccessTokenRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_youme_5fweixin_5faccess_5ftoken_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_youme_5fweixin_5faccess_5ftoken_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  GetWeiXinAccessTokenReq::default_instance_ = new GetWeiXinAccessTokenReq();
  GetWeiXinAccessTokenRsp::default_instance_ = new GetWeiXinAccessTokenRsp();
  GetWeiXinAccessTokenReq::default_instance_->InitAsDefaultInstance();
  GetWeiXinAccessTokenRsp::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_youme_5fweixin_5faccess_5ftoken_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_youme_5fweixin_5faccess_5ftoken_2eproto_once_);
void protobuf_AddDesc_youme_5fweixin_5faccess_5ftoken_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_youme_5fweixin_5faccess_5ftoken_2eproto_once_,
                 &protobuf_AddDesc_youme_5fweixin_5faccess_5ftoken_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_youme_5fweixin_5faccess_5ftoken_2eproto {
  StaticDescriptorInitializer_youme_5fweixin_5faccess_5ftoken_2eproto() {
    protobuf_AddDesc_youme_5fweixin_5faccess_5ftoken_2eproto();
  }
} static_descriptor_initializer_youme_5fweixin_5faccess_5ftoken_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int GetWeiXinAccessTokenReq::kVersionFieldNumber;
#endif  // !_MSC_VER

GetWeiXinAccessTokenReq::GetWeiXinAccessTokenReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.GetWeiXinAccessTokenReq)
}

void GetWeiXinAccessTokenReq::InitAsDefaultInstance() {
}

GetWeiXinAccessTokenReq::GetWeiXinAccessTokenReq(const GetWeiXinAccessTokenReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.GetWeiXinAccessTokenReq)
}

void GetWeiXinAccessTokenReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetWeiXinAccessTokenReq::~GetWeiXinAccessTokenReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.GetWeiXinAccessTokenReq)
  SharedDtor();
}

void GetWeiXinAccessTokenReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetWeiXinAccessTokenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetWeiXinAccessTokenReq& GetWeiXinAccessTokenReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fweixin_5faccess_5ftoken_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fweixin_5faccess_5ftoken_2eproto();
#endif
  return *default_instance_;
}

GetWeiXinAccessTokenReq* GetWeiXinAccessTokenReq::default_instance_ = NULL;

GetWeiXinAccessTokenReq* GetWeiXinAccessTokenReq::New(::youmecommon::protobuf::Arena* arena) const {
  GetWeiXinAccessTokenReq* n = new GetWeiXinAccessTokenReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetWeiXinAccessTokenReq::Clear() {
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetWeiXinAccessTokenReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.GetWeiXinAccessTokenReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.GetWeiXinAccessTokenReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.GetWeiXinAccessTokenReq)
  return false;
#undef DO_
}

void GetWeiXinAccessTokenReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.GetWeiXinAccessTokenReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.GetWeiXinAccessTokenReq)
}

int GetWeiXinAccessTokenReq::ByteSize() const {
  int total_size = 0;

  // required int32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetWeiXinAccessTokenReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetWeiXinAccessTokenReq*>(&from));
}

void GetWeiXinAccessTokenReq::MergeFrom(const GetWeiXinAccessTokenReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetWeiXinAccessTokenReq::CopyFrom(const GetWeiXinAccessTokenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWeiXinAccessTokenReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetWeiXinAccessTokenReq::Swap(GetWeiXinAccessTokenReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetWeiXinAccessTokenReq::InternalSwap(GetWeiXinAccessTokenReq* other) {
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetWeiXinAccessTokenReq::GetTypeName() const {
  return "YOUMEServiceProtocol.GetWeiXinAccessTokenReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetWeiXinAccessTokenReq

// required int32 version = 1;
bool GetWeiXinAccessTokenReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetWeiXinAccessTokenReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GetWeiXinAccessTokenReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetWeiXinAccessTokenReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 GetWeiXinAccessTokenReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetWeiXinAccessTokenReq.version)
  return version_;
}
 void GetWeiXinAccessTokenReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetWeiXinAccessTokenReq.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetWeiXinAccessTokenRsp::kVersionFieldNumber;
const int GetWeiXinAccessTokenRsp::kRetFieldNumber;
const int GetWeiXinAccessTokenRsp::kTokenFieldNumber;
const int GetWeiXinAccessTokenRsp::kTokenSeqFieldNumber;
#endif  // !_MSC_VER

GetWeiXinAccessTokenRsp::GetWeiXinAccessTokenRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.GetWeiXinAccessTokenRsp)
}

void GetWeiXinAccessTokenRsp::InitAsDefaultInstance() {
}

GetWeiXinAccessTokenRsp::GetWeiXinAccessTokenRsp(const GetWeiXinAccessTokenRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.GetWeiXinAccessTokenRsp)
}

void GetWeiXinAccessTokenRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  token_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  token_seq_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetWeiXinAccessTokenRsp::~GetWeiXinAccessTokenRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.GetWeiXinAccessTokenRsp)
  SharedDtor();
}

void GetWeiXinAccessTokenRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetWeiXinAccessTokenRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetWeiXinAccessTokenRsp& GetWeiXinAccessTokenRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fweixin_5faccess_5ftoken_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fweixin_5faccess_5ftoken_2eproto();
#endif
  return *default_instance_;
}

GetWeiXinAccessTokenRsp* GetWeiXinAccessTokenRsp::default_instance_ = NULL;

GetWeiXinAccessTokenRsp* GetWeiXinAccessTokenRsp::New(::youmecommon::protobuf::Arena* arena) const {
  GetWeiXinAccessTokenRsp* n = new GetWeiXinAccessTokenRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetWeiXinAccessTokenRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetWeiXinAccessTokenRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(version_, ret_);
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    token_seq_ = GOOGLE_ULONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetWeiXinAccessTokenRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.GetWeiXinAccessTokenRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // required string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_token_seq;
        break;
      }

      // required uint64 token_seq = 4;
      case 4: {
        if (tag == 32) {
         parse_token_seq:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_seq_)));
          set_has_token_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.GetWeiXinAccessTokenRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.GetWeiXinAccessTokenRsp)
  return false;
#undef DO_
}

void GetWeiXinAccessTokenRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.GetWeiXinAccessTokenRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // required string token = 3;
  if (has_token()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // required uint64 token_seq = 4;
  if (has_token_seq()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt64(4, this->token_seq(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.GetWeiXinAccessTokenRsp)
}

int GetWeiXinAccessTokenRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_token()) {
    // required string token = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  if (has_token_seq()) {
    // required uint64 token_seq = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->token_seq());
  }

  return total_size;
}
int GetWeiXinAccessTokenRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required string token = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->token());

    // required uint64 token_seq = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->token_seq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetWeiXinAccessTokenRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetWeiXinAccessTokenRsp*>(&from));
}

void GetWeiXinAccessTokenRsp::MergeFrom(const GetWeiXinAccessTokenRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (from.has_token_seq()) {
      set_token_seq(from.token_seq());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetWeiXinAccessTokenRsp::CopyFrom(const GetWeiXinAccessTokenRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWeiXinAccessTokenRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GetWeiXinAccessTokenRsp::Swap(GetWeiXinAccessTokenRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetWeiXinAccessTokenRsp::InternalSwap(GetWeiXinAccessTokenRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  token_.Swap(&other->token_);
  std::swap(token_seq_, other->token_seq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetWeiXinAccessTokenRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.GetWeiXinAccessTokenRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetWeiXinAccessTokenRsp

// required int32 version = 1;
bool GetWeiXinAccessTokenRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetWeiXinAccessTokenRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GetWeiXinAccessTokenRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetWeiXinAccessTokenRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 GetWeiXinAccessTokenRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetWeiXinAccessTokenRsp.version)
  return version_;
}
 void GetWeiXinAccessTokenRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetWeiXinAccessTokenRsp.version)
}

// required int32 ret = 2;
bool GetWeiXinAccessTokenRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetWeiXinAccessTokenRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void GetWeiXinAccessTokenRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetWeiXinAccessTokenRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 GetWeiXinAccessTokenRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetWeiXinAccessTokenRsp.ret)
  return ret_;
}
 void GetWeiXinAccessTokenRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetWeiXinAccessTokenRsp.ret)
}

// required string token = 3;
bool GetWeiXinAccessTokenRsp::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetWeiXinAccessTokenRsp::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
void GetWeiXinAccessTokenRsp::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetWeiXinAccessTokenRsp::clear_token() {
  token_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& GetWeiXinAccessTokenRsp::token() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetWeiXinAccessTokenRsp.token)
  return token_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetWeiXinAccessTokenRsp::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetWeiXinAccessTokenRsp.token)
}
 void GetWeiXinAccessTokenRsp::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.GetWeiXinAccessTokenRsp.token)
}
 void GetWeiXinAccessTokenRsp::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.GetWeiXinAccessTokenRsp.token)
}
 ::std::string* GetWeiXinAccessTokenRsp::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.GetWeiXinAccessTokenRsp.token)
  return token_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetWeiXinAccessTokenRsp::release_token() {
  clear_has_token();
  return token_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetWeiXinAccessTokenRsp::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.GetWeiXinAccessTokenRsp.token)
}

// required uint64 token_seq = 4;
bool GetWeiXinAccessTokenRsp::has_token_seq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetWeiXinAccessTokenRsp::set_has_token_seq() {
  _has_bits_[0] |= 0x00000008u;
}
void GetWeiXinAccessTokenRsp::clear_has_token_seq() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetWeiXinAccessTokenRsp::clear_token_seq() {
  token_seq_ = GOOGLE_ULONGLONG(0);
  clear_has_token_seq();
}
 ::youmecommon::protobuf::uint64 GetWeiXinAccessTokenRsp::token_seq() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetWeiXinAccessTokenRsp.token_seq)
  return token_seq_;
}
 void GetWeiXinAccessTokenRsp::set_token_seq(::youmecommon::protobuf::uint64 value) {
  set_has_token_seq();
  token_seq_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetWeiXinAccessTokenRsp.token_seq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YOUMEServiceProtocol

// @@protoc_insertion_point(global_scope)
