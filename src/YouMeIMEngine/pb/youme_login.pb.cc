// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youme_login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "youme_login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YOUMEServiceProtocol {

void protobuf_ShutdownFile_youme_5flogin_2eproto() {
  delete LoginReq::default_instance_;
  delete LoginRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_youme_5flogin_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_youme_5flogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  LoginReq::default_instance_ = new LoginReq();
  LoginRsp::default_instance_ = new LoginRsp();
  LoginReq::default_instance_->InitAsDefaultInstance();
  LoginRsp::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_youme_5flogin_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_youme_5flogin_2eproto_once_);
void protobuf_AddDesc_youme_5flogin_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_youme_5flogin_2eproto_once_,
                 &protobuf_AddDesc_youme_5flogin_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_youme_5flogin_2eproto {
  StaticDescriptorInitializer_youme_5flogin_2eproto() {
    protobuf_AddDesc_youme_5flogin_2eproto();
  }
} static_descriptor_initializer_youme_5flogin_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int LoginReq::kVersionFieldNumber;
const int LoginReq::kDeviceTokenFieldNumber;
const int LoginReq::kPswdFieldNumber;
const int LoginReq::kOsTypeFieldNumber;
const int LoginReq::kAuthTokenFieldNumber;
const int LoginReq::kUserInfoFieldNumber;
#endif  // !_MSC_VER

LoginReq::LoginReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.LoginReq)
}

void LoginReq::InitAsDefaultInstance() {
}

LoginReq::LoginReq(const LoginReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.LoginReq)
}

void LoginReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  device_token_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  pswd_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  os_type_ = 0;
  auth_token_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_info_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginReq::~LoginReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.LoginReq)
  SharedDtor();
}

void LoginReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  device_token_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  pswd_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_token_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_info_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginReq& LoginReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5flogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5flogin_2eproto();
#endif
  return *default_instance_;
}

LoginReq* LoginReq::default_instance_ = NULL;

LoginReq* LoginReq::New(::youmecommon::protobuf::Arena* arena) const {
  LoginReq* n = new LoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LoginReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(version_, os_type_);
    if (has_device_token()) {
      device_token_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_pswd()) {
      pswd_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_auth_token()) {
      auth_token_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_info()) {
      user_info_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LoginReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.LoginReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_device_token;
        break;
      }

      // required string device_token = 2;
      case 2: {
        if (tag == 18) {
         parse_device_token:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pswd;
        break;
      }

      // required string pswd = 3;
      case 3: {
        if (tag == 26) {
         parse_pswd:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pswd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_os_type;
        break;
      }

      // required int32 os_type = 4;
      case 4: {
        if (tag == 32) {
         parse_os_type:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &os_type_)));
          set_has_os_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_auth_token;
        break;
      }

      // optional string auth_token = 5;
      case 5: {
        if (tag == 42) {
         parse_auth_token:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_user_info;
        break;
      }

      // optional string user_info = 6;
      case 6: {
        if (tag == 50) {
         parse_user_info:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.LoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.LoginReq)
  return false;
#undef DO_
}

void LoginReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.LoginReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required string device_token = 2;
  if (has_device_token()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->device_token(), output);
  }

  // required string pswd = 3;
  if (has_pswd()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pswd(), output);
  }

  // required int32 os_type = 4;
  if (has_os_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->os_type(), output);
  }

  // optional string auth_token = 5;
  if (has_auth_token()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->auth_token(), output);
  }

  // optional string user_info = 6;
  if (has_user_info()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->user_info(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.LoginReq)
}

int LoginReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_device_token()) {
    // required string device_token = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->device_token());
  }

  if (has_pswd()) {
    // required string pswd = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->pswd());
  }

  if (has_os_type()) {
    // required int32 os_type = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->os_type());
  }

  return total_size;
}
int LoginReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required string device_token = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->device_token());

    // required string pswd = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->pswd());

    // required int32 os_type = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->os_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 48u) {
    // optional string auth_token = 5;
    if (has_auth_token()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->auth_token());
    }

    // optional string user_info = 6;
    if (has_user_info()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->user_info());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const LoginReq*>(&from));
}

void LoginReq::MergeFrom(const LoginReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_device_token()) {
      set_has_device_token();
      device_token_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_token_);
    }
    if (from.has_pswd()) {
      set_has_pswd();
      pswd_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.pswd_);
    }
    if (from.has_os_type()) {
      set_os_type(from.os_type());
    }
    if (from.has_auth_token()) {
      set_has_auth_token();
      auth_token_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
    }
    if (from.has_user_info()) {
      set_has_user_info();
      user_info_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_info_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LoginReq::CopyFrom(const LoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LoginReq::Swap(LoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginReq::InternalSwap(LoginReq* other) {
  std::swap(version_, other->version_);
  device_token_.Swap(&other->device_token_);
  pswd_.Swap(&other->pswd_);
  std::swap(os_type_, other->os_type_);
  auth_token_.Swap(&other->auth_token_);
  user_info_.Swap(&other->user_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LoginReq::GetTypeName() const {
  return "YOUMEServiceProtocol.LoginReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginReq

// required int32 version = 1;
bool LoginReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 LoginReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.LoginReq.version)
  return version_;
}
 void LoginReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.LoginReq.version)
}

// required string device_token = 2;
bool LoginReq::has_device_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginReq::set_has_device_token() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginReq::clear_has_device_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginReq::clear_device_token() {
  device_token_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_token();
}
 const ::std::string& LoginReq::device_token() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.LoginReq.device_token)
  return device_token_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginReq::set_device_token(const ::std::string& value) {
  set_has_device_token();
  device_token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.LoginReq.device_token)
}
 void LoginReq::set_device_token(const char* value) {
  set_has_device_token();
  device_token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.LoginReq.device_token)
}
 void LoginReq::set_device_token(const char* value, size_t size) {
  set_has_device_token();
  device_token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.LoginReq.device_token)
}
 ::std::string* LoginReq::mutable_device_token() {
  set_has_device_token();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.LoginReq.device_token)
  return device_token_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginReq::release_device_token() {
  clear_has_device_token();
  return device_token_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginReq::set_allocated_device_token(::std::string* device_token) {
  if (device_token != NULL) {
    set_has_device_token();
  } else {
    clear_has_device_token();
  }
  device_token_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), device_token);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.LoginReq.device_token)
}

// required string pswd = 3;
bool LoginReq::has_pswd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoginReq::set_has_pswd() {
  _has_bits_[0] |= 0x00000004u;
}
void LoginReq::clear_has_pswd() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoginReq::clear_pswd() {
  pswd_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pswd();
}
 const ::std::string& LoginReq::pswd() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.LoginReq.pswd)
  return pswd_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginReq::set_pswd(const ::std::string& value) {
  set_has_pswd();
  pswd_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.LoginReq.pswd)
}
 void LoginReq::set_pswd(const char* value) {
  set_has_pswd();
  pswd_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.LoginReq.pswd)
}
 void LoginReq::set_pswd(const char* value, size_t size) {
  set_has_pswd();
  pswd_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.LoginReq.pswd)
}
 ::std::string* LoginReq::mutable_pswd() {
  set_has_pswd();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.LoginReq.pswd)
  return pswd_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginReq::release_pswd() {
  clear_has_pswd();
  return pswd_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginReq::set_allocated_pswd(::std::string* pswd) {
  if (pswd != NULL) {
    set_has_pswd();
  } else {
    clear_has_pswd();
  }
  pswd_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), pswd);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.LoginReq.pswd)
}

// required int32 os_type = 4;
bool LoginReq::has_os_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LoginReq::set_has_os_type() {
  _has_bits_[0] |= 0x00000008u;
}
void LoginReq::clear_has_os_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void LoginReq::clear_os_type() {
  os_type_ = 0;
  clear_has_os_type();
}
 ::youmecommon::protobuf::int32 LoginReq::os_type() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.LoginReq.os_type)
  return os_type_;
}
 void LoginReq::set_os_type(::youmecommon::protobuf::int32 value) {
  set_has_os_type();
  os_type_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.LoginReq.os_type)
}

// optional string auth_token = 5;
bool LoginReq::has_auth_token() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LoginReq::set_has_auth_token() {
  _has_bits_[0] |= 0x00000010u;
}
void LoginReq::clear_has_auth_token() {
  _has_bits_[0] &= ~0x00000010u;
}
void LoginReq::clear_auth_token() {
  auth_token_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_token();
}
 const ::std::string& LoginReq::auth_token() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.LoginReq.auth_token)
  return auth_token_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginReq::set_auth_token(const ::std::string& value) {
  set_has_auth_token();
  auth_token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.LoginReq.auth_token)
}
 void LoginReq::set_auth_token(const char* value) {
  set_has_auth_token();
  auth_token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.LoginReq.auth_token)
}
 void LoginReq::set_auth_token(const char* value, size_t size) {
  set_has_auth_token();
  auth_token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.LoginReq.auth_token)
}
 ::std::string* LoginReq::mutable_auth_token() {
  set_has_auth_token();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.LoginReq.auth_token)
  return auth_token_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginReq::release_auth_token() {
  clear_has_auth_token();
  return auth_token_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginReq::set_allocated_auth_token(::std::string* auth_token) {
  if (auth_token != NULL) {
    set_has_auth_token();
  } else {
    clear_has_auth_token();
  }
  auth_token_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), auth_token);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.LoginReq.auth_token)
}

// optional string user_info = 6;
bool LoginReq::has_user_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LoginReq::set_has_user_info() {
  _has_bits_[0] |= 0x00000020u;
}
void LoginReq::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000020u;
}
void LoginReq::clear_user_info() {
  user_info_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_info();
}
 const ::std::string& LoginReq::user_info() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.LoginReq.user_info)
  return user_info_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginReq::set_user_info(const ::std::string& value) {
  set_has_user_info();
  user_info_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.LoginReq.user_info)
}
 void LoginReq::set_user_info(const char* value) {
  set_has_user_info();
  user_info_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.LoginReq.user_info)
}
 void LoginReq::set_user_info(const char* value, size_t size) {
  set_has_user_info();
  user_info_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.LoginReq.user_info)
}
 ::std::string* LoginReq::mutable_user_info() {
  set_has_user_info();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.LoginReq.user_info)
  return user_info_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginReq::release_user_info() {
  clear_has_user_info();
  return user_info_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginReq::set_allocated_user_info(::std::string* user_info) {
  if (user_info != NULL) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  user_info_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_info);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.LoginReq.user_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int LoginRsp::kVersionFieldNumber;
const int LoginRsp::kRetFieldNumber;
const int LoginRsp::kSecretFieldNumber;
const int LoginRsp::kRetMsgFieldNumber;
#endif  // !_MSC_VER

LoginRsp::LoginRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.LoginRsp)
}

void LoginRsp::InitAsDefaultInstance() {
}

LoginRsp::LoginRsp(const LoginRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.LoginRsp)
}

void LoginRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  secret_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_msg_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRsp::~LoginRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.LoginRsp)
  SharedDtor();
}

void LoginRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_msg_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginRsp& LoginRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5flogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5flogin_2eproto();
#endif
  return *default_instance_;
}

LoginRsp* LoginRsp::default_instance_ = NULL;

LoginRsp* LoginRsp::New(::youmecommon::protobuf::Arena* arena) const {
  LoginRsp* n = new LoginRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LoginRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(version_, ret_);
    if (has_secret()) {
      secret_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ret_msg()) {
      ret_msg_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LoginRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.LoginRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_secret;
        break;
      }

      // required string secret = 3;
      case 3: {
        if (tag == 26) {
         parse_secret:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ret_msg;
        break;
      }

      // optional string ret_msg = 4;
      case 4: {
        if (tag == 34) {
         parse_ret_msg:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.LoginRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.LoginRsp)
  return false;
#undef DO_
}

void LoginRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.LoginRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // required string secret = 3;
  if (has_secret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->secret(), output);
  }

  // optional string ret_msg = 4;
  if (has_ret_msg()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ret_msg(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.LoginRsp)
}

int LoginRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_secret()) {
    // required string secret = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->secret());
  }

  return total_size;
}
int LoginRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required string secret = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->secret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string ret_msg = 4;
  if (has_ret_msg()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->ret_msg());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const LoginRsp*>(&from));
}

void LoginRsp::MergeFrom(const LoginRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_secret()) {
      set_has_secret();
      secret_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
    }
    if (from.has_ret_msg()) {
      set_has_ret_msg();
      ret_msg_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LoginRsp::CopyFrom(const LoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LoginRsp::Swap(LoginRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRsp::InternalSwap(LoginRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  secret_.Swap(&other->secret_);
  ret_msg_.Swap(&other->ret_msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LoginRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.LoginRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRsp

// required int32 version = 1;
bool LoginRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 LoginRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.LoginRsp.version)
  return version_;
}
 void LoginRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.LoginRsp.version)
}

// required int32 ret = 2;
bool LoginRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 LoginRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.LoginRsp.ret)
  return ret_;
}
 void LoginRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.LoginRsp.ret)
}

// required string secret = 3;
bool LoginRsp::has_secret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoginRsp::set_has_secret() {
  _has_bits_[0] |= 0x00000004u;
}
void LoginRsp::clear_has_secret() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoginRsp::clear_secret() {
  secret_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_secret();
}
 const ::std::string& LoginRsp::secret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.LoginRsp.secret)
  return secret_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRsp::set_secret(const ::std::string& value) {
  set_has_secret();
  secret_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.LoginRsp.secret)
}
 void LoginRsp::set_secret(const char* value) {
  set_has_secret();
  secret_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.LoginRsp.secret)
}
 void LoginRsp::set_secret(const char* value, size_t size) {
  set_has_secret();
  secret_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.LoginRsp.secret)
}
 ::std::string* LoginRsp::mutable_secret() {
  set_has_secret();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.LoginRsp.secret)
  return secret_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRsp::release_secret() {
  clear_has_secret();
  return secret_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRsp::set_allocated_secret(::std::string* secret) {
  if (secret != NULL) {
    set_has_secret();
  } else {
    clear_has_secret();
  }
  secret_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.LoginRsp.secret)
}

// optional string ret_msg = 4;
bool LoginRsp::has_ret_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LoginRsp::set_has_ret_msg() {
  _has_bits_[0] |= 0x00000008u;
}
void LoginRsp::clear_has_ret_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
void LoginRsp::clear_ret_msg() {
  ret_msg_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_msg();
}
 const ::std::string& LoginRsp::ret_msg() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.LoginRsp.ret_msg)
  return ret_msg_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRsp::set_ret_msg(const ::std::string& value) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.LoginRsp.ret_msg)
}
 void LoginRsp::set_ret_msg(const char* value) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.LoginRsp.ret_msg)
}
 void LoginRsp::set_ret_msg(const char* value, size_t size) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.LoginRsp.ret_msg)
}
 ::std::string* LoginRsp::mutable_ret_msg() {
  set_has_ret_msg();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.LoginRsp.ret_msg)
  return ret_msg_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRsp::release_ret_msg() {
  clear_has_ret_msg();
  return ret_msg_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRsp::set_allocated_ret_msg(::std::string* ret_msg) {
  if (ret_msg != NULL) {
    set_has_ret_msg();
  } else {
    clear_has_ret_msg();
  }
  ret_msg_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ret_msg);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.LoginRsp.ret_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YOUMEServiceProtocol

// @@protoc_insertion_point(global_scope)
