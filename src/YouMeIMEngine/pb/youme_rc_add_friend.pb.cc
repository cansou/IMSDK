// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youme_rc_add_friend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "youme_rc_add_friend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YOUMEServiceProtocol {

void protobuf_ShutdownFile_youme_5frc_5fadd_5ffriend_2eproto() {
  delete AddRcFriendReq::default_instance_;
  delete AddRcFriendRsp::default_instance_;
  delete RcFriendReqNotifyRsp::default_instance_;
  delete VerifyRcFriendReq::default_instance_;
  delete VerifyRcFriendRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_youme_5frc_5fadd_5ffriend_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_youme_5frc_5fadd_5ffriend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::YOUMEServiceProtocol::protobuf_AddDesc_youme_5frc_5fcomm_2eproto();
  AddRcFriendReq::default_instance_ = new AddRcFriendReq();
  AddRcFriendRsp::default_instance_ = new AddRcFriendRsp();
  RcFriendReqNotifyRsp::default_instance_ = new RcFriendReqNotifyRsp();
  VerifyRcFriendReq::default_instance_ = new VerifyRcFriendReq();
  VerifyRcFriendRsp::default_instance_ = new VerifyRcFriendRsp();
  AddRcFriendReq::default_instance_->InitAsDefaultInstance();
  AddRcFriendRsp::default_instance_->InitAsDefaultInstance();
  RcFriendReqNotifyRsp::default_instance_->InitAsDefaultInstance();
  VerifyRcFriendReq::default_instance_->InitAsDefaultInstance();
  VerifyRcFriendRsp::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_youme_5frc_5fadd_5ffriend_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_youme_5frc_5fadd_5ffriend_2eproto_once_);
void protobuf_AddDesc_youme_5frc_5fadd_5ffriend_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_youme_5frc_5fadd_5ffriend_2eproto_once_,
                 &protobuf_AddDesc_youme_5frc_5fadd_5ffriend_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_youme_5frc_5fadd_5ffriend_2eproto {
  StaticDescriptorInitializer_youme_5frc_5fadd_5ffriend_2eproto() {
    protobuf_AddDesc_youme_5frc_5fadd_5ffriend_2eproto();
  }
} static_descriptor_initializer_youme_5frc_5fadd_5ffriend_2eproto_;
#endif
bool RC_ADD_RESULT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int AddRcFriendReq::kVersionFieldNumber;
const int AddRcFriendReq::kUserIdFieldNumber;
const int AddRcFriendReq::kVerifyInfoFieldNumber;
#endif  // !_MSC_VER

AddRcFriendReq::AddRcFriendReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.AddRcFriendReq)
}

void AddRcFriendReq::InitAsDefaultInstance() {
}

AddRcFriendReq::AddRcFriendReq(const AddRcFriendReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.AddRcFriendReq)
}

void AddRcFriendReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  verify_info_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddRcFriendReq::~AddRcFriendReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.AddRcFriendReq)
  SharedDtor();
}

void AddRcFriendReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  verify_info_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AddRcFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AddRcFriendReq& AddRcFriendReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fadd_5ffriend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fadd_5ffriend_2eproto();
#endif
  return *default_instance_;
}

AddRcFriendReq* AddRcFriendReq::default_instance_ = NULL;

AddRcFriendReq* AddRcFriendReq::New(::youmecommon::protobuf::Arena* arena) const {
  AddRcFriendReq* n = new AddRcFriendReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddRcFriendReq::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    version_ = 0;
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_verify_info()) {
      verify_info_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AddRcFriendReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.AddRcFriendReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // required bytes user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_verify_info;
        break;
      }

      // optional bytes verify_info = 3;
      case 3: {
        if (tag == 26) {
         parse_verify_info:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verify_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.AddRcFriendReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.AddRcFriendReq)
  return false;
#undef DO_
}

void AddRcFriendReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.AddRcFriendReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required bytes user_id = 2;
  if (has_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_id(), output);
  }

  // optional bytes verify_info = 3;
  if (has_verify_info()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->verify_info(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.AddRcFriendReq)
}

int AddRcFriendReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_user_id()) {
    // required bytes user_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());
  }

  return total_size;
}
int AddRcFriendReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required bytes user_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes verify_info = 3;
  if (has_verify_info()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->verify_info());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRcFriendReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const AddRcFriendReq*>(&from));
}

void AddRcFriendReq::MergeFrom(const AddRcFriendReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_verify_info()) {
      set_has_verify_info();
      verify_info_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.verify_info_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AddRcFriendReq::CopyFrom(const AddRcFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRcFriendReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AddRcFriendReq::Swap(AddRcFriendReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddRcFriendReq::InternalSwap(AddRcFriendReq* other) {
  std::swap(version_, other->version_);
  user_id_.Swap(&other->user_id_);
  verify_info_.Swap(&other->verify_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AddRcFriendReq::GetTypeName() const {
  return "YOUMEServiceProtocol.AddRcFriendReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddRcFriendReq

// required int32 version = 1;
bool AddRcFriendReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddRcFriendReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void AddRcFriendReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddRcFriendReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 AddRcFriendReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.AddRcFriendReq.version)
  return version_;
}
 void AddRcFriendReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.AddRcFriendReq.version)
}

// required bytes user_id = 2;
bool AddRcFriendReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddRcFriendReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void AddRcFriendReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddRcFriendReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& AddRcFriendReq::user_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.AddRcFriendReq.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AddRcFriendReq::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.AddRcFriendReq.user_id)
}
 void AddRcFriendReq::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.AddRcFriendReq.user_id)
}
 void AddRcFriendReq::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.AddRcFriendReq.user_id)
}
 ::std::string* AddRcFriendReq::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.AddRcFriendReq.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AddRcFriendReq::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AddRcFriendReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.AddRcFriendReq.user_id)
}

// optional bytes verify_info = 3;
bool AddRcFriendReq::has_verify_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AddRcFriendReq::set_has_verify_info() {
  _has_bits_[0] |= 0x00000004u;
}
void AddRcFriendReq::clear_has_verify_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void AddRcFriendReq::clear_verify_info() {
  verify_info_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verify_info();
}
 const ::std::string& AddRcFriendReq::verify_info() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.AddRcFriendReq.verify_info)
  return verify_info_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AddRcFriendReq::set_verify_info(const ::std::string& value) {
  set_has_verify_info();
  verify_info_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.AddRcFriendReq.verify_info)
}
 void AddRcFriendReq::set_verify_info(const char* value) {
  set_has_verify_info();
  verify_info_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.AddRcFriendReq.verify_info)
}
 void AddRcFriendReq::set_verify_info(const void* value, size_t size) {
  set_has_verify_info();
  verify_info_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.AddRcFriendReq.verify_info)
}
 ::std::string* AddRcFriendReq::mutable_verify_info() {
  set_has_verify_info();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.AddRcFriendReq.verify_info)
  return verify_info_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AddRcFriendReq::release_verify_info() {
  clear_has_verify_info();
  return verify_info_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AddRcFriendReq::set_allocated_verify_info(::std::string* verify_info) {
  if (verify_info != NULL) {
    set_has_verify_info();
  } else {
    clear_has_verify_info();
  }
  verify_info_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), verify_info);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.AddRcFriendReq.verify_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AddRcFriendRsp::kVersionFieldNumber;
const int AddRcFriendRsp::kRetFieldNumber;
const int AddRcFriendRsp::kAddRsltFieldNumber;
#endif  // !_MSC_VER

AddRcFriendRsp::AddRcFriendRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.AddRcFriendRsp)
}

void AddRcFriendRsp::InitAsDefaultInstance() {
}

AddRcFriendRsp::AddRcFriendRsp(const AddRcFriendRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.AddRcFriendRsp)
}

void AddRcFriendRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  add_rslt_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddRcFriendRsp::~AddRcFriendRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.AddRcFriendRsp)
  SharedDtor();
}

void AddRcFriendRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AddRcFriendRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AddRcFriendRsp& AddRcFriendRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fadd_5ffriend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fadd_5ffriend_2eproto();
#endif
  return *default_instance_;
}

AddRcFriendRsp* AddRcFriendRsp::default_instance_ = NULL;

AddRcFriendRsp* AddRcFriendRsp::New(::youmecommon::protobuf::Arena* arena) const {
  AddRcFriendRsp* n = new AddRcFriendRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddRcFriendRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AddRcFriendRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(version_, ret_);
    add_rslt_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AddRcFriendRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.AddRcFriendRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_add_rslt;
        break;
      }

      // optional .YOUMEServiceProtocol.RC_ADD_RESULT add_rslt = 3;
      case 3: {
        if (tag == 24) {
         parse_add_rslt:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YOUMEServiceProtocol::RC_ADD_RESULT_IsValid(value)) {
            set_add_rslt(static_cast< ::YOUMEServiceProtocol::RC_ADD_RESULT >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.AddRcFriendRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.AddRcFriendRsp)
  return false;
#undef DO_
}

void AddRcFriendRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.AddRcFriendRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional .YOUMEServiceProtocol.RC_ADD_RESULT add_rslt = 3;
  if (has_add_rslt()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->add_rslt(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.AddRcFriendRsp)
}

int AddRcFriendRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  return total_size;
}
int AddRcFriendRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .YOUMEServiceProtocol.RC_ADD_RESULT add_rslt = 3;
  if (has_add_rslt()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->add_rslt());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRcFriendRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const AddRcFriendRsp*>(&from));
}

void AddRcFriendRsp::MergeFrom(const AddRcFriendRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_add_rslt()) {
      set_add_rslt(from.add_rslt());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AddRcFriendRsp::CopyFrom(const AddRcFriendRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRcFriendRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AddRcFriendRsp::Swap(AddRcFriendRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddRcFriendRsp::InternalSwap(AddRcFriendRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(add_rslt_, other->add_rslt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AddRcFriendRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.AddRcFriendRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddRcFriendRsp

// required int32 version = 1;
bool AddRcFriendRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddRcFriendRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void AddRcFriendRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddRcFriendRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 AddRcFriendRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.AddRcFriendRsp.version)
  return version_;
}
 void AddRcFriendRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.AddRcFriendRsp.version)
}

// required int32 ret = 2;
bool AddRcFriendRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddRcFriendRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void AddRcFriendRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddRcFriendRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 AddRcFriendRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.AddRcFriendRsp.ret)
  return ret_;
}
 void AddRcFriendRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.AddRcFriendRsp.ret)
}

// optional .YOUMEServiceProtocol.RC_ADD_RESULT add_rslt = 3;
bool AddRcFriendRsp::has_add_rslt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AddRcFriendRsp::set_has_add_rslt() {
  _has_bits_[0] |= 0x00000004u;
}
void AddRcFriendRsp::clear_has_add_rslt() {
  _has_bits_[0] &= ~0x00000004u;
}
void AddRcFriendRsp::clear_add_rslt() {
  add_rslt_ = 1;
  clear_has_add_rslt();
}
 ::YOUMEServiceProtocol::RC_ADD_RESULT AddRcFriendRsp::add_rslt() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.AddRcFriendRsp.add_rslt)
  return static_cast< ::YOUMEServiceProtocol::RC_ADD_RESULT >(add_rslt_);
}
 void AddRcFriendRsp::set_add_rslt(::YOUMEServiceProtocol::RC_ADD_RESULT value) {
  assert(::YOUMEServiceProtocol::RC_ADD_RESULT_IsValid(value));
  set_has_add_rslt();
  add_rslt_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.AddRcFriendRsp.add_rslt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RcFriendReqNotifyRsp::kVersionFieldNumber;
const int RcFriendReqNotifyRsp::kReqIdFieldNumber;
const int RcFriendReqNotifyRsp::kReqTypeFieldNumber;
const int RcFriendReqNotifyRsp::kSnderIdFieldNumber;
const int RcFriendReqNotifyRsp::kRecverIdFieldNumber;
const int RcFriendReqNotifyRsp::kReqSnderIdFieldNumber;
const int RcFriendReqNotifyRsp::kReqRecverIdFieldNumber;
const int RcFriendReqNotifyRsp::kCurStateFieldNumber;
const int RcFriendReqNotifyRsp::kNotifyMsgFieldNumber;
#endif  // !_MSC_VER

RcFriendReqNotifyRsp::RcFriendReqNotifyRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.RcFriendReqNotifyRsp)
}

void RcFriendReqNotifyRsp::InitAsDefaultInstance() {
}

RcFriendReqNotifyRsp::RcFriendReqNotifyRsp(const RcFriendReqNotifyRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.RcFriendReqNotifyRsp)
}

void RcFriendReqNotifyRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  req_id_ = GOOGLE_ULONGLONG(0);
  req_type_ = 1;
  snder_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  recver_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  req_snder_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  req_recver_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  cur_state_ = 1;
  notify_msg_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RcFriendReqNotifyRsp::~RcFriendReqNotifyRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.RcFriendReqNotifyRsp)
  SharedDtor();
}

void RcFriendReqNotifyRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  snder_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  recver_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  req_snder_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  req_recver_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  notify_msg_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RcFriendReqNotifyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RcFriendReqNotifyRsp& RcFriendReqNotifyRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fadd_5ffriend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fadd_5ffriend_2eproto();
#endif
  return *default_instance_;
}

RcFriendReqNotifyRsp* RcFriendReqNotifyRsp::default_instance_ = NULL;

RcFriendReqNotifyRsp* RcFriendReqNotifyRsp::New(::youmecommon::protobuf::Arena* arena) const {
  RcFriendReqNotifyRsp* n = new RcFriendReqNotifyRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RcFriendReqNotifyRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RcFriendReqNotifyRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(req_id_, version_);
    req_type_ = 1;
    if (has_snder_id()) {
      snder_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_recver_id()) {
      recver_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_req_snder_id()) {
      req_snder_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_req_recver_id()) {
      req_recver_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    cur_state_ = 1;
  }
  if (has_notify_msg()) {
    notify_msg_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RcFriendReqNotifyRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.RcFriendReqNotifyRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_req_id;
        break;
      }

      // required uint64 req_id = 2;
      case 2: {
        if (tag == 16) {
         parse_req_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &req_id_)));
          set_has_req_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_req_type;
        break;
      }

      // required .YOUMEServiceProtocol.RC_FRIEND_REQ_TYPE req_type = 3;
      case 3: {
        if (tag == 24) {
         parse_req_type:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YOUMEServiceProtocol::RC_FRIEND_REQ_TYPE_IsValid(value)) {
            set_req_type(static_cast< ::YOUMEServiceProtocol::RC_FRIEND_REQ_TYPE >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_snder_id;
        break;
      }

      // required bytes snder_id = 4;
      case 4: {
        if (tag == 34) {
         parse_snder_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_snder_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_recver_id;
        break;
      }

      // required bytes recver_id = 5;
      case 5: {
        if (tag == 42) {
         parse_recver_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_recver_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_req_snder_id;
        break;
      }

      // required bytes req_snder_id = 6;
      case 6: {
        if (tag == 50) {
         parse_req_snder_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_req_snder_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_req_recver_id;
        break;
      }

      // required bytes req_recver_id = 7;
      case 7: {
        if (tag == 58) {
         parse_req_recver_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_req_recver_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_cur_state;
        break;
      }

      // required .YOUMEServiceProtocol.RC_FRIEND_REQ_STATE cur_state = 8;
      case 8: {
        if (tag == 64) {
         parse_cur_state:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YOUMEServiceProtocol::RC_FRIEND_REQ_STATE_IsValid(value)) {
            set_cur_state(static_cast< ::YOUMEServiceProtocol::RC_FRIEND_REQ_STATE >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_notify_msg;
        break;
      }

      // optional bytes notify_msg = 9;
      case 9: {
        if (tag == 74) {
         parse_notify_msg:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_notify_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.RcFriendReqNotifyRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.RcFriendReqNotifyRsp)
  return false;
#undef DO_
}

void RcFriendReqNotifyRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.RcFriendReqNotifyRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required uint64 req_id = 2;
  if (has_req_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt64(2, this->req_id(), output);
  }

  // required .YOUMEServiceProtocol.RC_FRIEND_REQ_TYPE req_type = 3;
  if (has_req_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->req_type(), output);
  }

  // required bytes snder_id = 4;
  if (has_snder_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->snder_id(), output);
  }

  // required bytes recver_id = 5;
  if (has_recver_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->recver_id(), output);
  }

  // required bytes req_snder_id = 6;
  if (has_req_snder_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->req_snder_id(), output);
  }

  // required bytes req_recver_id = 7;
  if (has_req_recver_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->req_recver_id(), output);
  }

  // required .YOUMEServiceProtocol.RC_FRIEND_REQ_STATE cur_state = 8;
  if (has_cur_state()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->cur_state(), output);
  }

  // optional bytes notify_msg = 9;
  if (has_notify_msg()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->notify_msg(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.RcFriendReqNotifyRsp)
}

int RcFriendReqNotifyRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_req_id()) {
    // required uint64 req_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->req_id());
  }

  if (has_req_type()) {
    // required .YOUMEServiceProtocol.RC_FRIEND_REQ_TYPE req_type = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->req_type());
  }

  if (has_snder_id()) {
    // required bytes snder_id = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->snder_id());
  }

  if (has_recver_id()) {
    // required bytes recver_id = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->recver_id());
  }

  if (has_req_snder_id()) {
    // required bytes req_snder_id = 6;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->req_snder_id());
  }

  if (has_req_recver_id()) {
    // required bytes req_recver_id = 7;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->req_recver_id());
  }

  if (has_cur_state()) {
    // required .YOUMEServiceProtocol.RC_FRIEND_REQ_STATE cur_state = 8;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->cur_state());
  }

  return total_size;
}
int RcFriendReqNotifyRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required uint64 req_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->req_id());

    // required .YOUMEServiceProtocol.RC_FRIEND_REQ_TYPE req_type = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->req_type());

    // required bytes snder_id = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->snder_id());

    // required bytes recver_id = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->recver_id());

    // required bytes req_snder_id = 6;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->req_snder_id());

    // required bytes req_recver_id = 7;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->req_recver_id());

    // required .YOUMEServiceProtocol.RC_FRIEND_REQ_STATE cur_state = 8;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->cur_state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes notify_msg = 9;
  if (has_notify_msg()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->notify_msg());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RcFriendReqNotifyRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const RcFriendReqNotifyRsp*>(&from));
}

void RcFriendReqNotifyRsp::MergeFrom(const RcFriendReqNotifyRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_req_id()) {
      set_req_id(from.req_id());
    }
    if (from.has_req_type()) {
      set_req_type(from.req_type());
    }
    if (from.has_snder_id()) {
      set_has_snder_id();
      snder_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.snder_id_);
    }
    if (from.has_recver_id()) {
      set_has_recver_id();
      recver_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.recver_id_);
    }
    if (from.has_req_snder_id()) {
      set_has_req_snder_id();
      req_snder_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.req_snder_id_);
    }
    if (from.has_req_recver_id()) {
      set_has_req_recver_id();
      req_recver_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.req_recver_id_);
    }
    if (from.has_cur_state()) {
      set_cur_state(from.cur_state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_notify_msg()) {
      set_has_notify_msg();
      notify_msg_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.notify_msg_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RcFriendReqNotifyRsp::CopyFrom(const RcFriendReqNotifyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RcFriendReqNotifyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void RcFriendReqNotifyRsp::Swap(RcFriendReqNotifyRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RcFriendReqNotifyRsp::InternalSwap(RcFriendReqNotifyRsp* other) {
  std::swap(version_, other->version_);
  std::swap(req_id_, other->req_id_);
  std::swap(req_type_, other->req_type_);
  snder_id_.Swap(&other->snder_id_);
  recver_id_.Swap(&other->recver_id_);
  req_snder_id_.Swap(&other->req_snder_id_);
  req_recver_id_.Swap(&other->req_recver_id_);
  std::swap(cur_state_, other->cur_state_);
  notify_msg_.Swap(&other->notify_msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RcFriendReqNotifyRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.RcFriendReqNotifyRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RcFriendReqNotifyRsp

// required int32 version = 1;
bool RcFriendReqNotifyRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RcFriendReqNotifyRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void RcFriendReqNotifyRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void RcFriendReqNotifyRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 RcFriendReqNotifyRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqNotifyRsp.version)
  return version_;
}
 void RcFriendReqNotifyRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqNotifyRsp.version)
}

// required uint64 req_id = 2;
bool RcFriendReqNotifyRsp::has_req_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RcFriendReqNotifyRsp::set_has_req_id() {
  _has_bits_[0] |= 0x00000002u;
}
void RcFriendReqNotifyRsp::clear_has_req_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void RcFriendReqNotifyRsp::clear_req_id() {
  req_id_ = GOOGLE_ULONGLONG(0);
  clear_has_req_id();
}
 ::youmecommon::protobuf::uint64 RcFriendReqNotifyRsp::req_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqNotifyRsp.req_id)
  return req_id_;
}
 void RcFriendReqNotifyRsp::set_req_id(::youmecommon::protobuf::uint64 value) {
  set_has_req_id();
  req_id_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqNotifyRsp.req_id)
}

// required .YOUMEServiceProtocol.RC_FRIEND_REQ_TYPE req_type = 3;
bool RcFriendReqNotifyRsp::has_req_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RcFriendReqNotifyRsp::set_has_req_type() {
  _has_bits_[0] |= 0x00000004u;
}
void RcFriendReqNotifyRsp::clear_has_req_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void RcFriendReqNotifyRsp::clear_req_type() {
  req_type_ = 1;
  clear_has_req_type();
}
 ::YOUMEServiceProtocol::RC_FRIEND_REQ_TYPE RcFriendReqNotifyRsp::req_type() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqNotifyRsp.req_type)
  return static_cast< ::YOUMEServiceProtocol::RC_FRIEND_REQ_TYPE >(req_type_);
}
 void RcFriendReqNotifyRsp::set_req_type(::YOUMEServiceProtocol::RC_FRIEND_REQ_TYPE value) {
  assert(::YOUMEServiceProtocol::RC_FRIEND_REQ_TYPE_IsValid(value));
  set_has_req_type();
  req_type_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqNotifyRsp.req_type)
}

// required bytes snder_id = 4;
bool RcFriendReqNotifyRsp::has_snder_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RcFriendReqNotifyRsp::set_has_snder_id() {
  _has_bits_[0] |= 0x00000008u;
}
void RcFriendReqNotifyRsp::clear_has_snder_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void RcFriendReqNotifyRsp::clear_snder_id() {
  snder_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snder_id();
}
 const ::std::string& RcFriendReqNotifyRsp::snder_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqNotifyRsp.snder_id)
  return snder_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendReqNotifyRsp::set_snder_id(const ::std::string& value) {
  set_has_snder_id();
  snder_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqNotifyRsp.snder_id)
}
 void RcFriendReqNotifyRsp::set_snder_id(const char* value) {
  set_has_snder_id();
  snder_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcFriendReqNotifyRsp.snder_id)
}
 void RcFriendReqNotifyRsp::set_snder_id(const void* value, size_t size) {
  set_has_snder_id();
  snder_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcFriendReqNotifyRsp.snder_id)
}
 ::std::string* RcFriendReqNotifyRsp::mutable_snder_id() {
  set_has_snder_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcFriendReqNotifyRsp.snder_id)
  return snder_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcFriendReqNotifyRsp::release_snder_id() {
  clear_has_snder_id();
  return snder_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendReqNotifyRsp::set_allocated_snder_id(::std::string* snder_id) {
  if (snder_id != NULL) {
    set_has_snder_id();
  } else {
    clear_has_snder_id();
  }
  snder_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), snder_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcFriendReqNotifyRsp.snder_id)
}

// required bytes recver_id = 5;
bool RcFriendReqNotifyRsp::has_recver_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RcFriendReqNotifyRsp::set_has_recver_id() {
  _has_bits_[0] |= 0x00000010u;
}
void RcFriendReqNotifyRsp::clear_has_recver_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void RcFriendReqNotifyRsp::clear_recver_id() {
  recver_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_recver_id();
}
 const ::std::string& RcFriendReqNotifyRsp::recver_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqNotifyRsp.recver_id)
  return recver_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendReqNotifyRsp::set_recver_id(const ::std::string& value) {
  set_has_recver_id();
  recver_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqNotifyRsp.recver_id)
}
 void RcFriendReqNotifyRsp::set_recver_id(const char* value) {
  set_has_recver_id();
  recver_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcFriendReqNotifyRsp.recver_id)
}
 void RcFriendReqNotifyRsp::set_recver_id(const void* value, size_t size) {
  set_has_recver_id();
  recver_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcFriendReqNotifyRsp.recver_id)
}
 ::std::string* RcFriendReqNotifyRsp::mutable_recver_id() {
  set_has_recver_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcFriendReqNotifyRsp.recver_id)
  return recver_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcFriendReqNotifyRsp::release_recver_id() {
  clear_has_recver_id();
  return recver_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendReqNotifyRsp::set_allocated_recver_id(::std::string* recver_id) {
  if (recver_id != NULL) {
    set_has_recver_id();
  } else {
    clear_has_recver_id();
  }
  recver_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), recver_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcFriendReqNotifyRsp.recver_id)
}

// required bytes req_snder_id = 6;
bool RcFriendReqNotifyRsp::has_req_snder_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RcFriendReqNotifyRsp::set_has_req_snder_id() {
  _has_bits_[0] |= 0x00000020u;
}
void RcFriendReqNotifyRsp::clear_has_req_snder_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void RcFriendReqNotifyRsp::clear_req_snder_id() {
  req_snder_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_req_snder_id();
}
 const ::std::string& RcFriendReqNotifyRsp::req_snder_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqNotifyRsp.req_snder_id)
  return req_snder_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendReqNotifyRsp::set_req_snder_id(const ::std::string& value) {
  set_has_req_snder_id();
  req_snder_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqNotifyRsp.req_snder_id)
}
 void RcFriendReqNotifyRsp::set_req_snder_id(const char* value) {
  set_has_req_snder_id();
  req_snder_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcFriendReqNotifyRsp.req_snder_id)
}
 void RcFriendReqNotifyRsp::set_req_snder_id(const void* value, size_t size) {
  set_has_req_snder_id();
  req_snder_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcFriendReqNotifyRsp.req_snder_id)
}
 ::std::string* RcFriendReqNotifyRsp::mutable_req_snder_id() {
  set_has_req_snder_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcFriendReqNotifyRsp.req_snder_id)
  return req_snder_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcFriendReqNotifyRsp::release_req_snder_id() {
  clear_has_req_snder_id();
  return req_snder_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendReqNotifyRsp::set_allocated_req_snder_id(::std::string* req_snder_id) {
  if (req_snder_id != NULL) {
    set_has_req_snder_id();
  } else {
    clear_has_req_snder_id();
  }
  req_snder_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), req_snder_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcFriendReqNotifyRsp.req_snder_id)
}

// required bytes req_recver_id = 7;
bool RcFriendReqNotifyRsp::has_req_recver_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RcFriendReqNotifyRsp::set_has_req_recver_id() {
  _has_bits_[0] |= 0x00000040u;
}
void RcFriendReqNotifyRsp::clear_has_req_recver_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void RcFriendReqNotifyRsp::clear_req_recver_id() {
  req_recver_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_req_recver_id();
}
 const ::std::string& RcFriendReqNotifyRsp::req_recver_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqNotifyRsp.req_recver_id)
  return req_recver_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendReqNotifyRsp::set_req_recver_id(const ::std::string& value) {
  set_has_req_recver_id();
  req_recver_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqNotifyRsp.req_recver_id)
}
 void RcFriendReqNotifyRsp::set_req_recver_id(const char* value) {
  set_has_req_recver_id();
  req_recver_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcFriendReqNotifyRsp.req_recver_id)
}
 void RcFriendReqNotifyRsp::set_req_recver_id(const void* value, size_t size) {
  set_has_req_recver_id();
  req_recver_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcFriendReqNotifyRsp.req_recver_id)
}
 ::std::string* RcFriendReqNotifyRsp::mutable_req_recver_id() {
  set_has_req_recver_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcFriendReqNotifyRsp.req_recver_id)
  return req_recver_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcFriendReqNotifyRsp::release_req_recver_id() {
  clear_has_req_recver_id();
  return req_recver_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendReqNotifyRsp::set_allocated_req_recver_id(::std::string* req_recver_id) {
  if (req_recver_id != NULL) {
    set_has_req_recver_id();
  } else {
    clear_has_req_recver_id();
  }
  req_recver_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), req_recver_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcFriendReqNotifyRsp.req_recver_id)
}

// required .YOUMEServiceProtocol.RC_FRIEND_REQ_STATE cur_state = 8;
bool RcFriendReqNotifyRsp::has_cur_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RcFriendReqNotifyRsp::set_has_cur_state() {
  _has_bits_[0] |= 0x00000080u;
}
void RcFriendReqNotifyRsp::clear_has_cur_state() {
  _has_bits_[0] &= ~0x00000080u;
}
void RcFriendReqNotifyRsp::clear_cur_state() {
  cur_state_ = 1;
  clear_has_cur_state();
}
 ::YOUMEServiceProtocol::RC_FRIEND_REQ_STATE RcFriendReqNotifyRsp::cur_state() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqNotifyRsp.cur_state)
  return static_cast< ::YOUMEServiceProtocol::RC_FRIEND_REQ_STATE >(cur_state_);
}
 void RcFriendReqNotifyRsp::set_cur_state(::YOUMEServiceProtocol::RC_FRIEND_REQ_STATE value) {
  assert(::YOUMEServiceProtocol::RC_FRIEND_REQ_STATE_IsValid(value));
  set_has_cur_state();
  cur_state_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqNotifyRsp.cur_state)
}

// optional bytes notify_msg = 9;
bool RcFriendReqNotifyRsp::has_notify_msg() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RcFriendReqNotifyRsp::set_has_notify_msg() {
  _has_bits_[0] |= 0x00000100u;
}
void RcFriendReqNotifyRsp::clear_has_notify_msg() {
  _has_bits_[0] &= ~0x00000100u;
}
void RcFriendReqNotifyRsp::clear_notify_msg() {
  notify_msg_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_notify_msg();
}
 const ::std::string& RcFriendReqNotifyRsp::notify_msg() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqNotifyRsp.notify_msg)
  return notify_msg_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendReqNotifyRsp::set_notify_msg(const ::std::string& value) {
  set_has_notify_msg();
  notify_msg_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqNotifyRsp.notify_msg)
}
 void RcFriendReqNotifyRsp::set_notify_msg(const char* value) {
  set_has_notify_msg();
  notify_msg_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcFriendReqNotifyRsp.notify_msg)
}
 void RcFriendReqNotifyRsp::set_notify_msg(const void* value, size_t size) {
  set_has_notify_msg();
  notify_msg_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcFriendReqNotifyRsp.notify_msg)
}
 ::std::string* RcFriendReqNotifyRsp::mutable_notify_msg() {
  set_has_notify_msg();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcFriendReqNotifyRsp.notify_msg)
  return notify_msg_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcFriendReqNotifyRsp::release_notify_msg() {
  clear_has_notify_msg();
  return notify_msg_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendReqNotifyRsp::set_allocated_notify_msg(::std::string* notify_msg) {
  if (notify_msg != NULL) {
    set_has_notify_msg();
  } else {
    clear_has_notify_msg();
  }
  notify_msg_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), notify_msg);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcFriendReqNotifyRsp.notify_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int VerifyRcFriendReq::kVersionFieldNumber;
const int VerifyRcFriendReq::kUserIdFieldNumber;
const int VerifyRcFriendReq::kAddReqIdFieldNumber;
const int VerifyRcFriendReq::kVerifyInfoFieldNumber;
const int VerifyRcFriendReq::kAgreeFieldNumber;
#endif  // !_MSC_VER

VerifyRcFriendReq::VerifyRcFriendReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.VerifyRcFriendReq)
}

void VerifyRcFriendReq::InitAsDefaultInstance() {
}

VerifyRcFriendReq::VerifyRcFriendReq(const VerifyRcFriendReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.VerifyRcFriendReq)
}

void VerifyRcFriendReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  add_req_id_ = GOOGLE_ULONGLONG(0);
  verify_info_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  agree_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyRcFriendReq::~VerifyRcFriendReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.VerifyRcFriendReq)
  SharedDtor();
}

void VerifyRcFriendReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  verify_info_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VerifyRcFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VerifyRcFriendReq& VerifyRcFriendReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fadd_5ffriend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fadd_5ffriend_2eproto();
#endif
  return *default_instance_;
}

VerifyRcFriendReq* VerifyRcFriendReq::default_instance_ = NULL;

VerifyRcFriendReq* VerifyRcFriendReq::New(::youmecommon::protobuf::Arena* arena) const {
  VerifyRcFriendReq* n = new VerifyRcFriendReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerifyRcFriendReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VerifyRcFriendReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(add_req_id_, agree_);
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_verify_info()) {
      verify_info_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool VerifyRcFriendReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.VerifyRcFriendReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // required bytes user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_add_req_id;
        break;
      }

      // required uint64 add_req_id = 3;
      case 3: {
        if (tag == 24) {
         parse_add_req_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &add_req_id_)));
          set_has_add_req_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_verify_info;
        break;
      }

      // required bytes verify_info = 4;
      case 4: {
        if (tag == 34) {
         parse_verify_info:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verify_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_agree;
        break;
      }

      // required int32 agree = 5;
      case 5: {
        if (tag == 40) {
         parse_agree:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.VerifyRcFriendReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.VerifyRcFriendReq)
  return false;
#undef DO_
}

void VerifyRcFriendReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.VerifyRcFriendReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required bytes user_id = 2;
  if (has_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_id(), output);
  }

  // required uint64 add_req_id = 3;
  if (has_add_req_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt64(3, this->add_req_id(), output);
  }

  // required bytes verify_info = 4;
  if (has_verify_info()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->verify_info(), output);
  }

  // required int32 agree = 5;
  if (has_agree()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->agree(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.VerifyRcFriendReq)
}

int VerifyRcFriendReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_user_id()) {
    // required bytes user_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());
  }

  if (has_add_req_id()) {
    // required uint64 add_req_id = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->add_req_id());
  }

  if (has_verify_info()) {
    // required bytes verify_info = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->verify_info());
  }

  if (has_agree()) {
    // required int32 agree = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->agree());
  }

  return total_size;
}
int VerifyRcFriendReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required bytes user_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());

    // required uint64 add_req_id = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->add_req_id());

    // required bytes verify_info = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->verify_info());

    // required int32 agree = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->agree());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyRcFriendReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const VerifyRcFriendReq*>(&from));
}

void VerifyRcFriendReq::MergeFrom(const VerifyRcFriendReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_add_req_id()) {
      set_add_req_id(from.add_req_id());
    }
    if (from.has_verify_info()) {
      set_has_verify_info();
      verify_info_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.verify_info_);
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void VerifyRcFriendReq::CopyFrom(const VerifyRcFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyRcFriendReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void VerifyRcFriendReq::Swap(VerifyRcFriendReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyRcFriendReq::InternalSwap(VerifyRcFriendReq* other) {
  std::swap(version_, other->version_);
  user_id_.Swap(&other->user_id_);
  std::swap(add_req_id_, other->add_req_id_);
  verify_info_.Swap(&other->verify_info_);
  std::swap(agree_, other->agree_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VerifyRcFriendReq::GetTypeName() const {
  return "YOUMEServiceProtocol.VerifyRcFriendReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerifyRcFriendReq

// required int32 version = 1;
bool VerifyRcFriendReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VerifyRcFriendReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void VerifyRcFriendReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void VerifyRcFriendReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 VerifyRcFriendReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.VerifyRcFriendReq.version)
  return version_;
}
 void VerifyRcFriendReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.VerifyRcFriendReq.version)
}

// required bytes user_id = 2;
bool VerifyRcFriendReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VerifyRcFriendReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void VerifyRcFriendReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void VerifyRcFriendReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& VerifyRcFriendReq::user_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.VerifyRcFriendReq.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VerifyRcFriendReq::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.VerifyRcFriendReq.user_id)
}
 void VerifyRcFriendReq::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.VerifyRcFriendReq.user_id)
}
 void VerifyRcFriendReq::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.VerifyRcFriendReq.user_id)
}
 ::std::string* VerifyRcFriendReq::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.VerifyRcFriendReq.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VerifyRcFriendReq::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VerifyRcFriendReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.VerifyRcFriendReq.user_id)
}

// required uint64 add_req_id = 3;
bool VerifyRcFriendReq::has_add_req_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VerifyRcFriendReq::set_has_add_req_id() {
  _has_bits_[0] |= 0x00000004u;
}
void VerifyRcFriendReq::clear_has_add_req_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void VerifyRcFriendReq::clear_add_req_id() {
  add_req_id_ = GOOGLE_ULONGLONG(0);
  clear_has_add_req_id();
}
 ::youmecommon::protobuf::uint64 VerifyRcFriendReq::add_req_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.VerifyRcFriendReq.add_req_id)
  return add_req_id_;
}
 void VerifyRcFriendReq::set_add_req_id(::youmecommon::protobuf::uint64 value) {
  set_has_add_req_id();
  add_req_id_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.VerifyRcFriendReq.add_req_id)
}

// required bytes verify_info = 4;
bool VerifyRcFriendReq::has_verify_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VerifyRcFriendReq::set_has_verify_info() {
  _has_bits_[0] |= 0x00000008u;
}
void VerifyRcFriendReq::clear_has_verify_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void VerifyRcFriendReq::clear_verify_info() {
  verify_info_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verify_info();
}
 const ::std::string& VerifyRcFriendReq::verify_info() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.VerifyRcFriendReq.verify_info)
  return verify_info_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VerifyRcFriendReq::set_verify_info(const ::std::string& value) {
  set_has_verify_info();
  verify_info_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.VerifyRcFriendReq.verify_info)
}
 void VerifyRcFriendReq::set_verify_info(const char* value) {
  set_has_verify_info();
  verify_info_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.VerifyRcFriendReq.verify_info)
}
 void VerifyRcFriendReq::set_verify_info(const void* value, size_t size) {
  set_has_verify_info();
  verify_info_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.VerifyRcFriendReq.verify_info)
}
 ::std::string* VerifyRcFriendReq::mutable_verify_info() {
  set_has_verify_info();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.VerifyRcFriendReq.verify_info)
  return verify_info_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VerifyRcFriendReq::release_verify_info() {
  clear_has_verify_info();
  return verify_info_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VerifyRcFriendReq::set_allocated_verify_info(::std::string* verify_info) {
  if (verify_info != NULL) {
    set_has_verify_info();
  } else {
    clear_has_verify_info();
  }
  verify_info_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), verify_info);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.VerifyRcFriendReq.verify_info)
}

// required int32 agree = 5;
bool VerifyRcFriendReq::has_agree() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VerifyRcFriendReq::set_has_agree() {
  _has_bits_[0] |= 0x00000010u;
}
void VerifyRcFriendReq::clear_has_agree() {
  _has_bits_[0] &= ~0x00000010u;
}
void VerifyRcFriendReq::clear_agree() {
  agree_ = 0;
  clear_has_agree();
}
 ::youmecommon::protobuf::int32 VerifyRcFriendReq::agree() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.VerifyRcFriendReq.agree)
  return agree_;
}
 void VerifyRcFriendReq::set_agree(::youmecommon::protobuf::int32 value) {
  set_has_agree();
  agree_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.VerifyRcFriendReq.agree)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int VerifyRcFriendRsp::kVersionFieldNumber;
const int VerifyRcFriendRsp::kRetFieldNumber;
const int VerifyRcFriendRsp::kAddRsltFieldNumber;
#endif  // !_MSC_VER

VerifyRcFriendRsp::VerifyRcFriendRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.VerifyRcFriendRsp)
}

void VerifyRcFriendRsp::InitAsDefaultInstance() {
}

VerifyRcFriendRsp::VerifyRcFriendRsp(const VerifyRcFriendRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.VerifyRcFriendRsp)
}

void VerifyRcFriendRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  add_rslt_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyRcFriendRsp::~VerifyRcFriendRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.VerifyRcFriendRsp)
  SharedDtor();
}

void VerifyRcFriendRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VerifyRcFriendRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VerifyRcFriendRsp& VerifyRcFriendRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fadd_5ffriend_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fadd_5ffriend_2eproto();
#endif
  return *default_instance_;
}

VerifyRcFriendRsp* VerifyRcFriendRsp::default_instance_ = NULL;

VerifyRcFriendRsp* VerifyRcFriendRsp::New(::youmecommon::protobuf::Arena* arena) const {
  VerifyRcFriendRsp* n = new VerifyRcFriendRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerifyRcFriendRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VerifyRcFriendRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(version_, ret_);
    add_rslt_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool VerifyRcFriendRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.VerifyRcFriendRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_add_rslt;
        break;
      }

      // required .YOUMEServiceProtocol.RC_ADD_RESULT add_rslt = 3;
      case 3: {
        if (tag == 24) {
         parse_add_rslt:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YOUMEServiceProtocol::RC_ADD_RESULT_IsValid(value)) {
            set_add_rslt(static_cast< ::YOUMEServiceProtocol::RC_ADD_RESULT >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.VerifyRcFriendRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.VerifyRcFriendRsp)
  return false;
#undef DO_
}

void VerifyRcFriendRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.VerifyRcFriendRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // required .YOUMEServiceProtocol.RC_ADD_RESULT add_rslt = 3;
  if (has_add_rslt()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->add_rslt(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.VerifyRcFriendRsp)
}

int VerifyRcFriendRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_add_rslt()) {
    // required .YOUMEServiceProtocol.RC_ADD_RESULT add_rslt = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->add_rslt());
  }

  return total_size;
}
int VerifyRcFriendRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required .YOUMEServiceProtocol.RC_ADD_RESULT add_rslt = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->add_rslt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyRcFriendRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const VerifyRcFriendRsp*>(&from));
}

void VerifyRcFriendRsp::MergeFrom(const VerifyRcFriendRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_add_rslt()) {
      set_add_rslt(from.add_rslt());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void VerifyRcFriendRsp::CopyFrom(const VerifyRcFriendRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyRcFriendRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void VerifyRcFriendRsp::Swap(VerifyRcFriendRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyRcFriendRsp::InternalSwap(VerifyRcFriendRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(add_rslt_, other->add_rslt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VerifyRcFriendRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.VerifyRcFriendRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerifyRcFriendRsp

// required int32 version = 1;
bool VerifyRcFriendRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VerifyRcFriendRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void VerifyRcFriendRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void VerifyRcFriendRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 VerifyRcFriendRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.VerifyRcFriendRsp.version)
  return version_;
}
 void VerifyRcFriendRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.VerifyRcFriendRsp.version)
}

// required int32 ret = 2;
bool VerifyRcFriendRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VerifyRcFriendRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void VerifyRcFriendRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void VerifyRcFriendRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 VerifyRcFriendRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.VerifyRcFriendRsp.ret)
  return ret_;
}
 void VerifyRcFriendRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.VerifyRcFriendRsp.ret)
}

// required .YOUMEServiceProtocol.RC_ADD_RESULT add_rslt = 3;
bool VerifyRcFriendRsp::has_add_rslt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VerifyRcFriendRsp::set_has_add_rslt() {
  _has_bits_[0] |= 0x00000004u;
}
void VerifyRcFriendRsp::clear_has_add_rslt() {
  _has_bits_[0] &= ~0x00000004u;
}
void VerifyRcFriendRsp::clear_add_rslt() {
  add_rslt_ = 1;
  clear_has_add_rslt();
}
 ::YOUMEServiceProtocol::RC_ADD_RESULT VerifyRcFriendRsp::add_rslt() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.VerifyRcFriendRsp.add_rslt)
  return static_cast< ::YOUMEServiceProtocol::RC_ADD_RESULT >(add_rslt_);
}
 void VerifyRcFriendRsp::set_add_rslt(::YOUMEServiceProtocol::RC_ADD_RESULT value) {
  assert(::YOUMEServiceProtocol::RC_ADD_RESULT_IsValid(value));
  set_has_add_rslt();
  add_rslt_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.VerifyRcFriendRsp.add_rslt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YOUMEServiceProtocol

// @@protoc_insertion_point(global_scope)
