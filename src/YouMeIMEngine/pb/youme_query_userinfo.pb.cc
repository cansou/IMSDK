// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youme_query_userinfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "youme_query_userinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YOUMEServiceProtocol {

void protobuf_ShutdownFile_youme_5fquery_5fuserinfo_2eproto() {
  delete GetRcUserInfoReq::default_instance_;
  delete GetRcUserInfoRsp::default_instance_;
  delete RcUserInfoUpdateNotifyRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_youme_5fquery_5fuserinfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_youme_5fquery_5fuserinfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::YOUMEServiceProtocol::protobuf_AddDesc_youme_5frcuserinfo_2eproto();
  GetRcUserInfoReq::default_instance_ = new GetRcUserInfoReq();
  GetRcUserInfoRsp::default_instance_ = new GetRcUserInfoRsp();
  RcUserInfoUpdateNotifyRsp::default_instance_ = new RcUserInfoUpdateNotifyRsp();
  GetRcUserInfoReq::default_instance_->InitAsDefaultInstance();
  GetRcUserInfoRsp::default_instance_->InitAsDefaultInstance();
  RcUserInfoUpdateNotifyRsp::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_youme_5fquery_5fuserinfo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_youme_5fquery_5fuserinfo_2eproto_once_);
void protobuf_AddDesc_youme_5fquery_5fuserinfo_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_youme_5fquery_5fuserinfo_2eproto_once_,
                 &protobuf_AddDesc_youme_5fquery_5fuserinfo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_youme_5fquery_5fuserinfo_2eproto {
  StaticDescriptorInitializer_youme_5fquery_5fuserinfo_2eproto() {
    protobuf_AddDesc_youme_5fquery_5fuserinfo_2eproto();
  }
} static_descriptor_initializer_youme_5fquery_5fuserinfo_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int GetRcUserInfoReq::kVersionFieldNumber;
const int GetRcUserInfoReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetRcUserInfoReq::GetRcUserInfoReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.GetRcUserInfoReq)
}

void GetRcUserInfoReq::InitAsDefaultInstance() {
}

GetRcUserInfoReq::GetRcUserInfoReq(const GetRcUserInfoReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.GetRcUserInfoReq)
}

void GetRcUserInfoReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRcUserInfoReq::~GetRcUserInfoReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.GetRcUserInfoReq)
  SharedDtor();
}

void GetRcUserInfoReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetRcUserInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetRcUserInfoReq& GetRcUserInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fquery_5fuserinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fquery_5fuserinfo_2eproto();
#endif
  return *default_instance_;
}

GetRcUserInfoReq* GetRcUserInfoReq::default_instance_ = NULL;

GetRcUserInfoReq* GetRcUserInfoReq::New(::youmecommon::protobuf::Arena* arena) const {
  GetRcUserInfoReq* n = new GetRcUserInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRcUserInfoReq::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    version_ = 0;
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetRcUserInfoReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.GetRcUserInfoReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // required bytes user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.GetRcUserInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.GetRcUserInfoReq)
  return false;
#undef DO_
}

void GetRcUserInfoReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.GetRcUserInfoReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required bytes user_id = 2;
  if (has_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.GetRcUserInfoReq)
}

int GetRcUserInfoReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_user_id()) {
    // required bytes user_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());
  }

  return total_size;
}
int GetRcUserInfoReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required bytes user_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRcUserInfoReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetRcUserInfoReq*>(&from));
}

void GetRcUserInfoReq::MergeFrom(const GetRcUserInfoReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetRcUserInfoReq::CopyFrom(const GetRcUserInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRcUserInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetRcUserInfoReq::Swap(GetRcUserInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRcUserInfoReq::InternalSwap(GetRcUserInfoReq* other) {
  std::swap(version_, other->version_);
  user_id_.Swap(&other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetRcUserInfoReq::GetTypeName() const {
  return "YOUMEServiceProtocol.GetRcUserInfoReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRcUserInfoReq

// required int32 version = 1;
bool GetRcUserInfoReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetRcUserInfoReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GetRcUserInfoReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetRcUserInfoReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 GetRcUserInfoReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcUserInfoReq.version)
  return version_;
}
 void GetRcUserInfoReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRcUserInfoReq.version)
}

// required bytes user_id = 2;
bool GetRcUserInfoReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetRcUserInfoReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void GetRcUserInfoReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetRcUserInfoReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& GetRcUserInfoReq::user_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcUserInfoReq.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetRcUserInfoReq::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRcUserInfoReq.user_id)
}
 void GetRcUserInfoReq::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.GetRcUserInfoReq.user_id)
}
 void GetRcUserInfoReq::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.GetRcUserInfoReq.user_id)
}
 ::std::string* GetRcUserInfoReq::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.GetRcUserInfoReq.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetRcUserInfoReq::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetRcUserInfoReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.GetRcUserInfoReq.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetRcUserInfoRsp::kVersionFieldNumber;
const int GetRcUserInfoRsp::kRetFieldNumber;
const int GetRcUserInfoRsp::kUserInfoFieldNumber;
#endif  // !_MSC_VER

GetRcUserInfoRsp::GetRcUserInfoRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.GetRcUserInfoRsp)
}

void GetRcUserInfoRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_info_ = const_cast< ::YOUMEServiceProtocol::RcUserInfo*>(
      ::YOUMEServiceProtocol::RcUserInfo::internal_default_instance());
#else
  user_info_ = const_cast< ::YOUMEServiceProtocol::RcUserInfo*>(&::YOUMEServiceProtocol::RcUserInfo::default_instance());
#endif
}

GetRcUserInfoRsp::GetRcUserInfoRsp(const GetRcUserInfoRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.GetRcUserInfoRsp)
}

void GetRcUserInfoRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  user_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRcUserInfoRsp::~GetRcUserInfoRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.GetRcUserInfoRsp)
  SharedDtor();
}

void GetRcUserInfoRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_info_;
  }
}

void GetRcUserInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetRcUserInfoRsp& GetRcUserInfoRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fquery_5fuserinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fquery_5fuserinfo_2eproto();
#endif
  return *default_instance_;
}

GetRcUserInfoRsp* GetRcUserInfoRsp::default_instance_ = NULL;

GetRcUserInfoRsp* GetRcUserInfoRsp::New(::youmecommon::protobuf::Arena* arena) const {
  GetRcUserInfoRsp* n = new GetRcUserInfoRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRcUserInfoRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetRcUserInfoRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(version_, ret_);
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::YOUMEServiceProtocol::RcUserInfo::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetRcUserInfoRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.GetRcUserInfoRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_info;
        break;
      }

      // required .YOUMEServiceProtocol.RcUserInfo user_info = 3;
      case 3: {
        if (tag == 26) {
         parse_user_info:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.GetRcUserInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.GetRcUserInfoRsp)
  return false;
#undef DO_
}

void GetRcUserInfoRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.GetRcUserInfoRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // required .YOUMEServiceProtocol.RcUserInfo user_info = 3;
  if (has_user_info()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->user_info_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.GetRcUserInfoRsp)
}

int GetRcUserInfoRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_user_info()) {
    // required .YOUMEServiceProtocol.RcUserInfo user_info = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_info_);
  }

  return total_size;
}
int GetRcUserInfoRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required .YOUMEServiceProtocol.RcUserInfo user_info = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_info_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRcUserInfoRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetRcUserInfoRsp*>(&from));
}

void GetRcUserInfoRsp::MergeFrom(const GetRcUserInfoRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_user_info()) {
      mutable_user_info()->::YOUMEServiceProtocol::RcUserInfo::MergeFrom(from.user_info());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetRcUserInfoRsp::CopyFrom(const GetRcUserInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRcUserInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_user_info()) {
    if (!this->user_info_->IsInitialized()) return false;
  }
  return true;
}

void GetRcUserInfoRsp::Swap(GetRcUserInfoRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRcUserInfoRsp::InternalSwap(GetRcUserInfoRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(user_info_, other->user_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetRcUserInfoRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.GetRcUserInfoRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRcUserInfoRsp

// required int32 version = 1;
bool GetRcUserInfoRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetRcUserInfoRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GetRcUserInfoRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetRcUserInfoRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 GetRcUserInfoRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcUserInfoRsp.version)
  return version_;
}
 void GetRcUserInfoRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRcUserInfoRsp.version)
}

// required int32 ret = 2;
bool GetRcUserInfoRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetRcUserInfoRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void GetRcUserInfoRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetRcUserInfoRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 GetRcUserInfoRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcUserInfoRsp.ret)
  return ret_;
}
 void GetRcUserInfoRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRcUserInfoRsp.ret)
}

// required .YOUMEServiceProtocol.RcUserInfo user_info = 3;
bool GetRcUserInfoRsp::has_user_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetRcUserInfoRsp::set_has_user_info() {
  _has_bits_[0] |= 0x00000004u;
}
void GetRcUserInfoRsp::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetRcUserInfoRsp::clear_user_info() {
  if (user_info_ != NULL) user_info_->::YOUMEServiceProtocol::RcUserInfo::Clear();
  clear_has_user_info();
}
const ::YOUMEServiceProtocol::RcUserInfo& GetRcUserInfoRsp::user_info() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcUserInfoRsp.user_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return user_info_ != NULL ? *user_info_ : *default_instance().user_info_;
#else
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
#endif
}
::YOUMEServiceProtocol::RcUserInfo* GetRcUserInfoRsp::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) {
    user_info_ = new ::YOUMEServiceProtocol::RcUserInfo;
  }
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.GetRcUserInfoRsp.user_info)
  return user_info_;
}
::YOUMEServiceProtocol::RcUserInfo* GetRcUserInfoRsp::release_user_info() {
  clear_has_user_info();
  ::YOUMEServiceProtocol::RcUserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
void GetRcUserInfoRsp::set_allocated_user_info(::YOUMEServiceProtocol::RcUserInfo* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.GetRcUserInfoRsp.user_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RcUserInfoUpdateNotifyRsp::kVersionFieldNumber;
const int RcUserInfoUpdateNotifyRsp::kSnderIdFieldNumber;
const int RcUserInfoUpdateNotifyRsp::kRecverIdFieldNumber;
const int RcUserInfoUpdateNotifyRsp::kNotifyMsgFieldNumber;
#endif  // !_MSC_VER

RcUserInfoUpdateNotifyRsp::RcUserInfoUpdateNotifyRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp)
}

void RcUserInfoUpdateNotifyRsp::InitAsDefaultInstance() {
}

RcUserInfoUpdateNotifyRsp::RcUserInfoUpdateNotifyRsp(const RcUserInfoUpdateNotifyRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp)
}

void RcUserInfoUpdateNotifyRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  snder_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  recver_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  notify_msg_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RcUserInfoUpdateNotifyRsp::~RcUserInfoUpdateNotifyRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp)
  SharedDtor();
}

void RcUserInfoUpdateNotifyRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  snder_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  recver_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  notify_msg_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RcUserInfoUpdateNotifyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RcUserInfoUpdateNotifyRsp& RcUserInfoUpdateNotifyRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fquery_5fuserinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fquery_5fuserinfo_2eproto();
#endif
  return *default_instance_;
}

RcUserInfoUpdateNotifyRsp* RcUserInfoUpdateNotifyRsp::default_instance_ = NULL;

RcUserInfoUpdateNotifyRsp* RcUserInfoUpdateNotifyRsp::New(::youmecommon::protobuf::Arena* arena) const {
  RcUserInfoUpdateNotifyRsp* n = new RcUserInfoUpdateNotifyRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RcUserInfoUpdateNotifyRsp::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    version_ = 0;
    if (has_snder_id()) {
      snder_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_recver_id()) {
      recver_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_notify_msg()) {
      notify_msg_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RcUserInfoUpdateNotifyRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_snder_id;
        break;
      }

      // required bytes snder_id = 2;
      case 2: {
        if (tag == 18) {
         parse_snder_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_snder_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_recver_id;
        break;
      }

      // required bytes recver_id = 3;
      case 3: {
        if (tag == 26) {
         parse_recver_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_recver_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_notify_msg;
        break;
      }

      // optional bytes notify_msg = 4;
      case 4: {
        if (tag == 34) {
         parse_notify_msg:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_notify_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp)
  return false;
#undef DO_
}

void RcUserInfoUpdateNotifyRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required bytes snder_id = 2;
  if (has_snder_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->snder_id(), output);
  }

  // required bytes recver_id = 3;
  if (has_recver_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->recver_id(), output);
  }

  // optional bytes notify_msg = 4;
  if (has_notify_msg()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->notify_msg(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp)
}

int RcUserInfoUpdateNotifyRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_snder_id()) {
    // required bytes snder_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->snder_id());
  }

  if (has_recver_id()) {
    // required bytes recver_id = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->recver_id());
  }

  return total_size;
}
int RcUserInfoUpdateNotifyRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required bytes snder_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->snder_id());

    // required bytes recver_id = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->recver_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes notify_msg = 4;
  if (has_notify_msg()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->notify_msg());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RcUserInfoUpdateNotifyRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const RcUserInfoUpdateNotifyRsp*>(&from));
}

void RcUserInfoUpdateNotifyRsp::MergeFrom(const RcUserInfoUpdateNotifyRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_snder_id()) {
      set_has_snder_id();
      snder_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.snder_id_);
    }
    if (from.has_recver_id()) {
      set_has_recver_id();
      recver_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.recver_id_);
    }
    if (from.has_notify_msg()) {
      set_has_notify_msg();
      notify_msg_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.notify_msg_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RcUserInfoUpdateNotifyRsp::CopyFrom(const RcUserInfoUpdateNotifyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RcUserInfoUpdateNotifyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RcUserInfoUpdateNotifyRsp::Swap(RcUserInfoUpdateNotifyRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RcUserInfoUpdateNotifyRsp::InternalSwap(RcUserInfoUpdateNotifyRsp* other) {
  std::swap(version_, other->version_);
  snder_id_.Swap(&other->snder_id_);
  recver_id_.Swap(&other->recver_id_);
  notify_msg_.Swap(&other->notify_msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RcUserInfoUpdateNotifyRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RcUserInfoUpdateNotifyRsp

// required int32 version = 1;
bool RcUserInfoUpdateNotifyRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RcUserInfoUpdateNotifyRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void RcUserInfoUpdateNotifyRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void RcUserInfoUpdateNotifyRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 RcUserInfoUpdateNotifyRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp.version)
  return version_;
}
 void RcUserInfoUpdateNotifyRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp.version)
}

// required bytes snder_id = 2;
bool RcUserInfoUpdateNotifyRsp::has_snder_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RcUserInfoUpdateNotifyRsp::set_has_snder_id() {
  _has_bits_[0] |= 0x00000002u;
}
void RcUserInfoUpdateNotifyRsp::clear_has_snder_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void RcUserInfoUpdateNotifyRsp::clear_snder_id() {
  snder_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snder_id();
}
 const ::std::string& RcUserInfoUpdateNotifyRsp::snder_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp.snder_id)
  return snder_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserInfoUpdateNotifyRsp::set_snder_id(const ::std::string& value) {
  set_has_snder_id();
  snder_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp.snder_id)
}
 void RcUserInfoUpdateNotifyRsp::set_snder_id(const char* value) {
  set_has_snder_id();
  snder_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp.snder_id)
}
 void RcUserInfoUpdateNotifyRsp::set_snder_id(const void* value, size_t size) {
  set_has_snder_id();
  snder_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp.snder_id)
}
 ::std::string* RcUserInfoUpdateNotifyRsp::mutable_snder_id() {
  set_has_snder_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp.snder_id)
  return snder_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcUserInfoUpdateNotifyRsp::release_snder_id() {
  clear_has_snder_id();
  return snder_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserInfoUpdateNotifyRsp::set_allocated_snder_id(::std::string* snder_id) {
  if (snder_id != NULL) {
    set_has_snder_id();
  } else {
    clear_has_snder_id();
  }
  snder_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), snder_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp.snder_id)
}

// required bytes recver_id = 3;
bool RcUserInfoUpdateNotifyRsp::has_recver_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RcUserInfoUpdateNotifyRsp::set_has_recver_id() {
  _has_bits_[0] |= 0x00000004u;
}
void RcUserInfoUpdateNotifyRsp::clear_has_recver_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void RcUserInfoUpdateNotifyRsp::clear_recver_id() {
  recver_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_recver_id();
}
 const ::std::string& RcUserInfoUpdateNotifyRsp::recver_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp.recver_id)
  return recver_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserInfoUpdateNotifyRsp::set_recver_id(const ::std::string& value) {
  set_has_recver_id();
  recver_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp.recver_id)
}
 void RcUserInfoUpdateNotifyRsp::set_recver_id(const char* value) {
  set_has_recver_id();
  recver_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp.recver_id)
}
 void RcUserInfoUpdateNotifyRsp::set_recver_id(const void* value, size_t size) {
  set_has_recver_id();
  recver_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp.recver_id)
}
 ::std::string* RcUserInfoUpdateNotifyRsp::mutable_recver_id() {
  set_has_recver_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp.recver_id)
  return recver_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcUserInfoUpdateNotifyRsp::release_recver_id() {
  clear_has_recver_id();
  return recver_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserInfoUpdateNotifyRsp::set_allocated_recver_id(::std::string* recver_id) {
  if (recver_id != NULL) {
    set_has_recver_id();
  } else {
    clear_has_recver_id();
  }
  recver_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), recver_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp.recver_id)
}

// optional bytes notify_msg = 4;
bool RcUserInfoUpdateNotifyRsp::has_notify_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RcUserInfoUpdateNotifyRsp::set_has_notify_msg() {
  _has_bits_[0] |= 0x00000008u;
}
void RcUserInfoUpdateNotifyRsp::clear_has_notify_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
void RcUserInfoUpdateNotifyRsp::clear_notify_msg() {
  notify_msg_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_notify_msg();
}
 const ::std::string& RcUserInfoUpdateNotifyRsp::notify_msg() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp.notify_msg)
  return notify_msg_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserInfoUpdateNotifyRsp::set_notify_msg(const ::std::string& value) {
  set_has_notify_msg();
  notify_msg_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp.notify_msg)
}
 void RcUserInfoUpdateNotifyRsp::set_notify_msg(const char* value) {
  set_has_notify_msg();
  notify_msg_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp.notify_msg)
}
 void RcUserInfoUpdateNotifyRsp::set_notify_msg(const void* value, size_t size) {
  set_has_notify_msg();
  notify_msg_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp.notify_msg)
}
 ::std::string* RcUserInfoUpdateNotifyRsp::mutable_notify_msg() {
  set_has_notify_msg();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp.notify_msg)
  return notify_msg_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcUserInfoUpdateNotifyRsp::release_notify_msg() {
  clear_has_notify_msg();
  return notify_msg_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcUserInfoUpdateNotifyRsp::set_allocated_notify_msg(::std::string* notify_msg) {
  if (notify_msg != NULL) {
    set_has_notify_msg();
  } else {
    clear_has_notify_msg();
  }
  notify_msg_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), notify_msg);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcUserInfoUpdateNotifyRsp.notify_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YOUMEServiceProtocol

// @@protoc_insertion_point(global_scope)
