// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youme_getmsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "youme_getmsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YOUMEServiceProtocol {

void protobuf_ShutdownFile_youme_5fgetmsg_2eproto() {
  delete RoomList::default_instance_;
  delete GetMsgReq::default_instance_;
  delete GetRoomHistoryMsgReq::default_instance_;
  delete YoumeMsg::default_instance_;
  delete GetMsgRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_youme_5fgetmsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_youme_5fgetmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::YOUMECommonProtocol::protobuf_AddDesc_youme_5fcomm_2eproto();
  RoomList::default_instance_ = new RoomList();
  GetMsgReq::default_instance_ = new GetMsgReq();
  GetRoomHistoryMsgReq::default_instance_ = new GetRoomHistoryMsgReq();
  YoumeMsg::default_instance_ = new YoumeMsg();
  GetMsgRsp::default_instance_ = new GetMsgRsp();
  RoomList::default_instance_->InitAsDefaultInstance();
  GetMsgReq::default_instance_->InitAsDefaultInstance();
  GetRoomHistoryMsgReq::default_instance_->InitAsDefaultInstance();
  YoumeMsg::default_instance_->InitAsDefaultInstance();
  GetMsgRsp::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_youme_5fgetmsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_youme_5fgetmsg_2eproto_once_);
void protobuf_AddDesc_youme_5fgetmsg_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_youme_5fgetmsg_2eproto_once_,
                 &protobuf_AddDesc_youme_5fgetmsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_youme_5fgetmsg_2eproto {
  StaticDescriptorInitializer_youme_5fgetmsg_2eproto() {
    protobuf_AddDesc_youme_5fgetmsg_2eproto();
  }
} static_descriptor_initializer_youme_5fgetmsg_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int RoomList::kRoomNameFieldNumber;
#endif  // !_MSC_VER

RoomList::RoomList()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.RoomList)
}

void RoomList::InitAsDefaultInstance() {
}

RoomList::RoomList(const RoomList& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.RoomList)
}

void RoomList::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomList::~RoomList() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.RoomList)
  SharedDtor();
}

void RoomList::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RoomList& RoomList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fgetmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fgetmsg_2eproto();
#endif
  return *default_instance_;
}

RoomList* RoomList::default_instance_ = NULL;

RoomList* RoomList::New(::youmecommon::protobuf::Arena* arena) const {
  RoomList* n = new RoomList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomList::Clear() {
  room_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RoomList::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.RoomList)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes room_name = 1;
      case 1: {
        if (tag == 10) {
         parse_room_name:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_room_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_room_name;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.RoomList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.RoomList)
  return false;
#undef DO_
}

void RoomList::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.RoomList)
  // repeated bytes room_name = 1;
  for (int i = 0; i < this->room_name_size(); i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->room_name(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.RoomList)
}

int RoomList::ByteSize() const {
  int total_size = 0;

  // repeated bytes room_name = 1;
  total_size += 1 * this->room_name_size();
  for (int i = 0; i < this->room_name_size(); i++) {
    total_size += ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
      this->room_name(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomList::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const RoomList*>(&from));
}

void RoomList::MergeFrom(const RoomList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  room_name_.MergeFrom(from.room_name_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RoomList::CopyFrom(const RoomList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomList::IsInitialized() const {

  return true;
}

void RoomList::Swap(RoomList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomList::InternalSwap(RoomList* other) {
  room_name_.UnsafeArenaSwap(&other->room_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RoomList::GetTypeName() const {
  return "YOUMEServiceProtocol.RoomList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomList

// repeated bytes room_name = 1;
int RoomList::room_name_size() const {
  return room_name_.size();
}
void RoomList::clear_room_name() {
  room_name_.Clear();
}
 const ::std::string& RoomList::room_name(int index) const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RoomList.room_name)
  return room_name_.Get(index);
}
 ::std::string* RoomList::mutable_room_name(int index) {
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RoomList.room_name)
  return room_name_.Mutable(index);
}
 void RoomList::set_room_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RoomList.room_name)
  room_name_.Mutable(index)->assign(value);
}
 void RoomList::set_room_name(int index, const char* value) {
  room_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RoomList.room_name)
}
 void RoomList::set_room_name(int index, const void* value, size_t size) {
  room_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RoomList.room_name)
}
 ::std::string* RoomList::add_room_name() {
  return room_name_.Add();
}
 void RoomList::add_room_name(const ::std::string& value) {
  room_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:YOUMEServiceProtocol.RoomList.room_name)
}
 void RoomList::add_room_name(const char* value) {
  room_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:YOUMEServiceProtocol.RoomList.room_name)
}
 void RoomList::add_room_name(const void* value, size_t size) {
  room_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:YOUMEServiceProtocol.RoomList.room_name)
}
 const ::youmecommon::protobuf::RepeatedPtrField< ::std::string>&
RoomList::room_name() const {
  // @@protoc_insertion_point(field_list:YOUMEServiceProtocol.RoomList.room_name)
  return room_name_;
}
 ::youmecommon::protobuf::RepeatedPtrField< ::std::string>*
RoomList::mutable_room_name() {
  // @@protoc_insertion_point(field_mutable_list:YOUMEServiceProtocol.RoomList.room_name)
  return &room_name_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetMsgReq::kVersionFieldNumber;
const int GetMsgReq::kMsgidFieldNumber;
const int GetMsgReq::kRoomMaskFieldNumber;
#endif  // !_MSC_VER

GetMsgReq::GetMsgReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.GetMsgReq)
}

void GetMsgReq::InitAsDefaultInstance() {
}

GetMsgReq::GetMsgReq(const GetMsgReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.GetMsgReq)
}

void GetMsgReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  msgid_ = GOOGLE_ULONGLONG(0);
  room_mask_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMsgReq::~GetMsgReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.GetMsgReq)
  SharedDtor();
}

void GetMsgReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  room_mask_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetMsgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetMsgReq& GetMsgReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fgetmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fgetmsg_2eproto();
#endif
  return *default_instance_;
}

GetMsgReq* GetMsgReq::default_instance_ = NULL;

GetMsgReq* GetMsgReq::New(::youmecommon::protobuf::Arena* arena) const {
  GetMsgReq* n = new GetMsgReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMsgReq::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    version_ = 0;
    msgid_ = GOOGLE_ULONGLONG(0);
    if (has_room_mask()) {
      room_mask_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetMsgReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.GetMsgReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgid;
        break;
      }

      // required uint64 msgid = 2;
      case 2: {
        if (tag == 16) {
         parse_msgid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_room_mask;
        break;
      }

      // optional bytes room_mask = 3;
      case 3: {
        if (tag == 26) {
         parse_room_mask:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_room_mask()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.GetMsgReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.GetMsgReq)
  return false;
#undef DO_
}

void GetMsgReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.GetMsgReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required uint64 msgid = 2;
  if (has_msgid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt64(2, this->msgid(), output);
  }

  // optional bytes room_mask = 3;
  if (has_room_mask()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->room_mask(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.GetMsgReq)
}

int GetMsgReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_msgid()) {
    // required uint64 msgid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->msgid());
  }

  return total_size;
}
int GetMsgReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required uint64 msgid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->msgid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes room_mask = 3;
  if (has_room_mask()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->room_mask());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMsgReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetMsgReq*>(&from));
}

void GetMsgReq::MergeFrom(const GetMsgReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_room_mask()) {
      set_has_room_mask();
      room_mask_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_mask_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetMsgReq::CopyFrom(const GetMsgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMsgReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetMsgReq::Swap(GetMsgReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMsgReq::InternalSwap(GetMsgReq* other) {
  std::swap(version_, other->version_);
  std::swap(msgid_, other->msgid_);
  room_mask_.Swap(&other->room_mask_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetMsgReq::GetTypeName() const {
  return "YOUMEServiceProtocol.GetMsgReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMsgReq

// required int32 version = 1;
bool GetMsgReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetMsgReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GetMsgReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetMsgReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 GetMsgReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetMsgReq.version)
  return version_;
}
 void GetMsgReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetMsgReq.version)
}

// required uint64 msgid = 2;
bool GetMsgReq::has_msgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetMsgReq::set_has_msgid() {
  _has_bits_[0] |= 0x00000002u;
}
void GetMsgReq::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetMsgReq::clear_msgid() {
  msgid_ = GOOGLE_ULONGLONG(0);
  clear_has_msgid();
}
 ::youmecommon::protobuf::uint64 GetMsgReq::msgid() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetMsgReq.msgid)
  return msgid_;
}
 void GetMsgReq::set_msgid(::youmecommon::protobuf::uint64 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetMsgReq.msgid)
}

// optional bytes room_mask = 3;
bool GetMsgReq::has_room_mask() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetMsgReq::set_has_room_mask() {
  _has_bits_[0] |= 0x00000004u;
}
void GetMsgReq::clear_has_room_mask() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetMsgReq::clear_room_mask() {
  room_mask_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_mask();
}
 const ::std::string& GetMsgReq::room_mask() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetMsgReq.room_mask)
  return room_mask_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetMsgReq::set_room_mask(const ::std::string& value) {
  set_has_room_mask();
  room_mask_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetMsgReq.room_mask)
}
 void GetMsgReq::set_room_mask(const char* value) {
  set_has_room_mask();
  room_mask_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.GetMsgReq.room_mask)
}
 void GetMsgReq::set_room_mask(const void* value, size_t size) {
  set_has_room_mask();
  room_mask_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.GetMsgReq.room_mask)
}
 ::std::string* GetMsgReq::mutable_room_mask() {
  set_has_room_mask();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.GetMsgReq.room_mask)
  return room_mask_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetMsgReq::release_room_mask() {
  clear_has_room_mask();
  return room_mask_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetMsgReq::set_allocated_room_mask(::std::string* room_mask) {
  if (room_mask != NULL) {
    set_has_room_mask();
  } else {
    clear_has_room_mask();
  }
  room_mask_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_mask);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.GetMsgReq.room_mask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetRoomHistoryMsgReq::kVersionFieldNumber;
const int GetRoomHistoryMsgReq::kRoomNameFieldNumber;
#endif  // !_MSC_VER

GetRoomHistoryMsgReq::GetRoomHistoryMsgReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.GetRoomHistoryMsgReq)
}

void GetRoomHistoryMsgReq::InitAsDefaultInstance() {
}

GetRoomHistoryMsgReq::GetRoomHistoryMsgReq(const GetRoomHistoryMsgReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.GetRoomHistoryMsgReq)
}

void GetRoomHistoryMsgReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  room_name_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRoomHistoryMsgReq::~GetRoomHistoryMsgReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.GetRoomHistoryMsgReq)
  SharedDtor();
}

void GetRoomHistoryMsgReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  room_name_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetRoomHistoryMsgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetRoomHistoryMsgReq& GetRoomHistoryMsgReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fgetmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fgetmsg_2eproto();
#endif
  return *default_instance_;
}

GetRoomHistoryMsgReq* GetRoomHistoryMsgReq::default_instance_ = NULL;

GetRoomHistoryMsgReq* GetRoomHistoryMsgReq::New(::youmecommon::protobuf::Arena* arena) const {
  GetRoomHistoryMsgReq* n = new GetRoomHistoryMsgReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRoomHistoryMsgReq::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    version_ = 0;
    if (has_room_name()) {
      room_name_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetRoomHistoryMsgReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.GetRoomHistoryMsgReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_room_name;
        break;
      }

      // required bytes room_name = 2;
      case 2: {
        if (tag == 18) {
         parse_room_name:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_room_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.GetRoomHistoryMsgReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.GetRoomHistoryMsgReq)
  return false;
#undef DO_
}

void GetRoomHistoryMsgReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.GetRoomHistoryMsgReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required bytes room_name = 2;
  if (has_room_name()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->room_name(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.GetRoomHistoryMsgReq)
}

int GetRoomHistoryMsgReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_room_name()) {
    // required bytes room_name = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->room_name());
  }

  return total_size;
}
int GetRoomHistoryMsgReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required bytes room_name = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->room_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoomHistoryMsgReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetRoomHistoryMsgReq*>(&from));
}

void GetRoomHistoryMsgReq::MergeFrom(const GetRoomHistoryMsgReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_room_name()) {
      set_has_room_name();
      room_name_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetRoomHistoryMsgReq::CopyFrom(const GetRoomHistoryMsgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoomHistoryMsgReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetRoomHistoryMsgReq::Swap(GetRoomHistoryMsgReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRoomHistoryMsgReq::InternalSwap(GetRoomHistoryMsgReq* other) {
  std::swap(version_, other->version_);
  room_name_.Swap(&other->room_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetRoomHistoryMsgReq::GetTypeName() const {
  return "YOUMEServiceProtocol.GetRoomHistoryMsgReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRoomHistoryMsgReq

// required int32 version = 1;
bool GetRoomHistoryMsgReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetRoomHistoryMsgReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GetRoomHistoryMsgReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetRoomHistoryMsgReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 GetRoomHistoryMsgReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRoomHistoryMsgReq.version)
  return version_;
}
 void GetRoomHistoryMsgReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRoomHistoryMsgReq.version)
}

// required bytes room_name = 2;
bool GetRoomHistoryMsgReq::has_room_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetRoomHistoryMsgReq::set_has_room_name() {
  _has_bits_[0] |= 0x00000002u;
}
void GetRoomHistoryMsgReq::clear_has_room_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetRoomHistoryMsgReq::clear_room_name() {
  room_name_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_name();
}
 const ::std::string& GetRoomHistoryMsgReq::room_name() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRoomHistoryMsgReq.room_name)
  return room_name_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetRoomHistoryMsgReq::set_room_name(const ::std::string& value) {
  set_has_room_name();
  room_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRoomHistoryMsgReq.room_name)
}
 void GetRoomHistoryMsgReq::set_room_name(const char* value) {
  set_has_room_name();
  room_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.GetRoomHistoryMsgReq.room_name)
}
 void GetRoomHistoryMsgReq::set_room_name(const void* value, size_t size) {
  set_has_room_name();
  room_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.GetRoomHistoryMsgReq.room_name)
}
 ::std::string* GetRoomHistoryMsgReq::mutable_room_name() {
  set_has_room_name();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.GetRoomHistoryMsgReq.room_name)
  return room_name_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetRoomHistoryMsgReq::release_room_name() {
  clear_has_room_name();
  return room_name_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetRoomHistoryMsgReq::set_allocated_room_name(::std::string* room_name) {
  if (room_name != NULL) {
    set_has_room_name();
  } else {
    clear_has_room_name();
  }
  room_name_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_name);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.GetRoomHistoryMsgReq.room_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YoumeMsg::kMsgidFieldNumber;
const int YoumeMsg::kSenderIdFieldNumber;
const int YoumeMsg::kRecverIdFieldNumber;
const int YoumeMsg::kMsgTypeFieldNumber;
const int YoumeMsg::kChatTypeFieldNumber;
const int YoumeMsg::kMsgContentFieldNumber;
const int YoumeMsg::kSenderSerialFieldNumber;
const int YoumeMsg::kSvrMsgidFieldNumber;
const int YoumeMsg::kCreateTimeFieldNumber;
const int YoumeMsg::kCommentFieldNumber;
#endif  // !_MSC_VER

YoumeMsg::YoumeMsg()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.YoumeMsg)
}

void YoumeMsg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  comment_ = const_cast< ::YOUMECommonProtocol::MsgComment*>(
      ::YOUMECommonProtocol::MsgComment::internal_default_instance());
#else
  comment_ = const_cast< ::YOUMECommonProtocol::MsgComment*>(&::YOUMECommonProtocol::MsgComment::default_instance());
#endif
}

YoumeMsg::YoumeMsg(const YoumeMsg& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.YoumeMsg)
}

void YoumeMsg::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msgid_ = GOOGLE_ULONGLONG(0);
  sender_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  recver_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_type_ = 0;
  chat_type_ = 0;
  msg_content_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_serial_ = GOOGLE_ULONGLONG(0);
  svr_msgid_ = GOOGLE_ULONGLONG(0);
  create_time_ = 0u;
  comment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YoumeMsg::~YoumeMsg() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.YoumeMsg)
  SharedDtor();
}

void YoumeMsg::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  recver_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_content_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete comment_;
  }
}

void YoumeMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YoumeMsg& YoumeMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fgetmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fgetmsg_2eproto();
#endif
  return *default_instance_;
}

YoumeMsg* YoumeMsg::default_instance_ = NULL;

YoumeMsg* YoumeMsg::New(::youmecommon::protobuf::Arena* arena) const {
  YoumeMsg* n = new YoumeMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YoumeMsg::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YoumeMsg*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(msg_type_, chat_type_);
    ZR_(sender_serial_, svr_msgid_);
    msgid_ = GOOGLE_ULONGLONG(0);
    if (has_sender_id()) {
      sender_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_recver_id()) {
      recver_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_msg_content()) {
      msg_content_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    create_time_ = 0u;
    if (has_comment()) {
      if (comment_ != NULL) comment_->::YOUMECommonProtocol::MsgComment::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YoumeMsg::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.YoumeMsg)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 msgid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sender_id;
        break;
      }

      // required bytes sender_id = 2;
      case 2: {
        if (tag == 18) {
         parse_sender_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sender_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_recver_id;
        break;
      }

      // required bytes recver_id = 3;
      case 3: {
        if (tag == 26) {
         parse_recver_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_recver_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_type;
        break;
      }

      // required int32 msg_type = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_type:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_type_)));
          set_has_msg_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_chat_type;
        break;
      }

      // required int32 chat_type = 5;
      case 5: {
        if (tag == 40) {
         parse_chat_type:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_type_)));
          set_has_chat_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_msg_content;
        break;
      }

      // required bytes msg_content = 6;
      case 6: {
        if (tag == 50) {
         parse_msg_content:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sender_serial;
        break;
      }

      // required uint64 sender_serial = 7;
      case 7: {
        if (tag == 56) {
         parse_sender_serial:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sender_serial_)));
          set_has_sender_serial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_svr_msgid;
        break;
      }

      // required uint64 svr_msgid = 8;
      case 8: {
        if (tag == 64) {
         parse_svr_msgid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &svr_msgid_)));
          set_has_svr_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 9;
      case 9: {
        if (tag == 72) {
         parse_create_time:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_comment;
        break;
      }

      // optional .YOUMECommonProtocol.MsgComment comment = 10;
      case 10: {
        if (tag == 82) {
         parse_comment:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.YoumeMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.YoumeMsg)
  return false;
#undef DO_
}

void YoumeMsg::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.YoumeMsg)
  // required uint64 msgid = 1;
  if (has_msgid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt64(1, this->msgid(), output);
  }

  // required bytes sender_id = 2;
  if (has_sender_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sender_id(), output);
  }

  // required bytes recver_id = 3;
  if (has_recver_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->recver_id(), output);
  }

  // required int32 msg_type = 4;
  if (has_msg_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->msg_type(), output);
  }

  // required int32 chat_type = 5;
  if (has_chat_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->chat_type(), output);
  }

  // required bytes msg_content = 6;
  if (has_msg_content()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->msg_content(), output);
  }

  // required uint64 sender_serial = 7;
  if (has_sender_serial()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt64(7, this->sender_serial(), output);
  }

  // required uint64 svr_msgid = 8;
  if (has_svr_msgid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt64(8, this->svr_msgid(), output);
  }

  // required uint32 create_time = 9;
  if (has_create_time()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(9, this->create_time(), output);
  }

  // optional .YOUMECommonProtocol.MsgComment comment = 10;
  if (has_comment()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->comment_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.YoumeMsg)
}

int YoumeMsg::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msgid()) {
    // required uint64 msgid = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->msgid());
  }

  if (has_sender_id()) {
    // required bytes sender_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->sender_id());
  }

  if (has_recver_id()) {
    // required bytes recver_id = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->recver_id());
  }

  if (has_msg_type()) {
    // required int32 msg_type = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_type());
  }

  if (has_chat_type()) {
    // required int32 chat_type = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->chat_type());
  }

  if (has_msg_content()) {
    // required bytes msg_content = 6;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->msg_content());
  }

  if (has_sender_serial()) {
    // required uint64 sender_serial = 7;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->sender_serial());
  }

  if (has_svr_msgid()) {
    // required uint64 svr_msgid = 8;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->svr_msgid());
  }

  if (has_create_time()) {
    // required uint32 create_time = 9;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->create_time());
  }

  return total_size;
}
int YoumeMsg::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required uint64 msgid = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->msgid());

    // required bytes sender_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->sender_id());

    // required bytes recver_id = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->recver_id());

    // required int32 msg_type = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_type());

    // required int32 chat_type = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->chat_type());

    // required bytes msg_content = 6;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->msg_content());

    // required uint64 sender_serial = 7;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->sender_serial());

    // required uint64 svr_msgid = 8;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->svr_msgid());

    // required uint32 create_time = 9;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->create_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .YOUMECommonProtocol.MsgComment comment = 10;
  if (has_comment()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->comment_);
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YoumeMsg::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YoumeMsg*>(&from));
}

void YoumeMsg::MergeFrom(const YoumeMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_sender_id()) {
      set_has_sender_id();
      sender_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_id_);
    }
    if (from.has_recver_id()) {
      set_has_recver_id();
      recver_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.recver_id_);
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_chat_type()) {
      set_chat_type(from.chat_type());
    }
    if (from.has_msg_content()) {
      set_has_msg_content();
      msg_content_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_content_);
    }
    if (from.has_sender_serial()) {
      set_sender_serial(from.sender_serial());
    }
    if (from.has_svr_msgid()) {
      set_svr_msgid(from.svr_msgid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_comment()) {
      mutable_comment()->::YOUMECommonProtocol::MsgComment::MergeFrom(from.comment());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YoumeMsg::CopyFrom(const YoumeMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YoumeMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  if (has_comment()) {
    if (!this->comment_->IsInitialized()) return false;
  }
  return true;
}

void YoumeMsg::Swap(YoumeMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YoumeMsg::InternalSwap(YoumeMsg* other) {
  std::swap(msgid_, other->msgid_);
  sender_id_.Swap(&other->sender_id_);
  recver_id_.Swap(&other->recver_id_);
  std::swap(msg_type_, other->msg_type_);
  std::swap(chat_type_, other->chat_type_);
  msg_content_.Swap(&other->msg_content_);
  std::swap(sender_serial_, other->sender_serial_);
  std::swap(svr_msgid_, other->svr_msgid_);
  std::swap(create_time_, other->create_time_);
  std::swap(comment_, other->comment_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YoumeMsg::GetTypeName() const {
  return "YOUMEServiceProtocol.YoumeMsg";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YoumeMsg

// required uint64 msgid = 1;
bool YoumeMsg::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YoumeMsg::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
void YoumeMsg::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
void YoumeMsg::clear_msgid() {
  msgid_ = GOOGLE_ULONGLONG(0);
  clear_has_msgid();
}
 ::youmecommon::protobuf::uint64 YoumeMsg::msgid() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeMsg.msgid)
  return msgid_;
}
 void YoumeMsg::set_msgid(::youmecommon::protobuf::uint64 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeMsg.msgid)
}

// required bytes sender_id = 2;
bool YoumeMsg::has_sender_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YoumeMsg::set_has_sender_id() {
  _has_bits_[0] |= 0x00000002u;
}
void YoumeMsg::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void YoumeMsg::clear_sender_id() {
  sender_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender_id();
}
 const ::std::string& YoumeMsg::sender_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeMsg.sender_id)
  return sender_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YoumeMsg::set_sender_id(const ::std::string& value) {
  set_has_sender_id();
  sender_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeMsg.sender_id)
}
 void YoumeMsg::set_sender_id(const char* value) {
  set_has_sender_id();
  sender_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.YoumeMsg.sender_id)
}
 void YoumeMsg::set_sender_id(const void* value, size_t size) {
  set_has_sender_id();
  sender_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.YoumeMsg.sender_id)
}
 ::std::string* YoumeMsg::mutable_sender_id() {
  set_has_sender_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.YoumeMsg.sender_id)
  return sender_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YoumeMsg::release_sender_id() {
  clear_has_sender_id();
  return sender_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YoumeMsg::set_allocated_sender_id(::std::string* sender_id) {
  if (sender_id != NULL) {
    set_has_sender_id();
  } else {
    clear_has_sender_id();
  }
  sender_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), sender_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.YoumeMsg.sender_id)
}

// required bytes recver_id = 3;
bool YoumeMsg::has_recver_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YoumeMsg::set_has_recver_id() {
  _has_bits_[0] |= 0x00000004u;
}
void YoumeMsg::clear_has_recver_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void YoumeMsg::clear_recver_id() {
  recver_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_recver_id();
}
 const ::std::string& YoumeMsg::recver_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeMsg.recver_id)
  return recver_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YoumeMsg::set_recver_id(const ::std::string& value) {
  set_has_recver_id();
  recver_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeMsg.recver_id)
}
 void YoumeMsg::set_recver_id(const char* value) {
  set_has_recver_id();
  recver_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.YoumeMsg.recver_id)
}
 void YoumeMsg::set_recver_id(const void* value, size_t size) {
  set_has_recver_id();
  recver_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.YoumeMsg.recver_id)
}
 ::std::string* YoumeMsg::mutable_recver_id() {
  set_has_recver_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.YoumeMsg.recver_id)
  return recver_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YoumeMsg::release_recver_id() {
  clear_has_recver_id();
  return recver_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YoumeMsg::set_allocated_recver_id(::std::string* recver_id) {
  if (recver_id != NULL) {
    set_has_recver_id();
  } else {
    clear_has_recver_id();
  }
  recver_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), recver_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.YoumeMsg.recver_id)
}

// required int32 msg_type = 4;
bool YoumeMsg::has_msg_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YoumeMsg::set_has_msg_type() {
  _has_bits_[0] |= 0x00000008u;
}
void YoumeMsg::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void YoumeMsg::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
 ::youmecommon::protobuf::int32 YoumeMsg::msg_type() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeMsg.msg_type)
  return msg_type_;
}
 void YoumeMsg::set_msg_type(::youmecommon::protobuf::int32 value) {
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeMsg.msg_type)
}

// required int32 chat_type = 5;
bool YoumeMsg::has_chat_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YoumeMsg::set_has_chat_type() {
  _has_bits_[0] |= 0x00000010u;
}
void YoumeMsg::clear_has_chat_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void YoumeMsg::clear_chat_type() {
  chat_type_ = 0;
  clear_has_chat_type();
}
 ::youmecommon::protobuf::int32 YoumeMsg::chat_type() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeMsg.chat_type)
  return chat_type_;
}
 void YoumeMsg::set_chat_type(::youmecommon::protobuf::int32 value) {
  set_has_chat_type();
  chat_type_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeMsg.chat_type)
}

// required bytes msg_content = 6;
bool YoumeMsg::has_msg_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YoumeMsg::set_has_msg_content() {
  _has_bits_[0] |= 0x00000020u;
}
void YoumeMsg::clear_has_msg_content() {
  _has_bits_[0] &= ~0x00000020u;
}
void YoumeMsg::clear_msg_content() {
  msg_content_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_content();
}
 const ::std::string& YoumeMsg::msg_content() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeMsg.msg_content)
  return msg_content_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YoumeMsg::set_msg_content(const ::std::string& value) {
  set_has_msg_content();
  msg_content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeMsg.msg_content)
}
 void YoumeMsg::set_msg_content(const char* value) {
  set_has_msg_content();
  msg_content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.YoumeMsg.msg_content)
}
 void YoumeMsg::set_msg_content(const void* value, size_t size) {
  set_has_msg_content();
  msg_content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.YoumeMsg.msg_content)
}
 ::std::string* YoumeMsg::mutable_msg_content() {
  set_has_msg_content();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.YoumeMsg.msg_content)
  return msg_content_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YoumeMsg::release_msg_content() {
  clear_has_msg_content();
  return msg_content_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YoumeMsg::set_allocated_msg_content(::std::string* msg_content) {
  if (msg_content != NULL) {
    set_has_msg_content();
  } else {
    clear_has_msg_content();
  }
  msg_content_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), msg_content);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.YoumeMsg.msg_content)
}

// required uint64 sender_serial = 7;
bool YoumeMsg::has_sender_serial() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void YoumeMsg::set_has_sender_serial() {
  _has_bits_[0] |= 0x00000040u;
}
void YoumeMsg::clear_has_sender_serial() {
  _has_bits_[0] &= ~0x00000040u;
}
void YoumeMsg::clear_sender_serial() {
  sender_serial_ = GOOGLE_ULONGLONG(0);
  clear_has_sender_serial();
}
 ::youmecommon::protobuf::uint64 YoumeMsg::sender_serial() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeMsg.sender_serial)
  return sender_serial_;
}
 void YoumeMsg::set_sender_serial(::youmecommon::protobuf::uint64 value) {
  set_has_sender_serial();
  sender_serial_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeMsg.sender_serial)
}

// required uint64 svr_msgid = 8;
bool YoumeMsg::has_svr_msgid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void YoumeMsg::set_has_svr_msgid() {
  _has_bits_[0] |= 0x00000080u;
}
void YoumeMsg::clear_has_svr_msgid() {
  _has_bits_[0] &= ~0x00000080u;
}
void YoumeMsg::clear_svr_msgid() {
  svr_msgid_ = GOOGLE_ULONGLONG(0);
  clear_has_svr_msgid();
}
 ::youmecommon::protobuf::uint64 YoumeMsg::svr_msgid() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeMsg.svr_msgid)
  return svr_msgid_;
}
 void YoumeMsg::set_svr_msgid(::youmecommon::protobuf::uint64 value) {
  set_has_svr_msgid();
  svr_msgid_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeMsg.svr_msgid)
}

// required uint32 create_time = 9;
bool YoumeMsg::has_create_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void YoumeMsg::set_has_create_time() {
  _has_bits_[0] |= 0x00000100u;
}
void YoumeMsg::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000100u;
}
void YoumeMsg::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
 ::youmecommon::protobuf::uint32 YoumeMsg::create_time() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeMsg.create_time)
  return create_time_;
}
 void YoumeMsg::set_create_time(::youmecommon::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeMsg.create_time)
}

// optional .YOUMECommonProtocol.MsgComment comment = 10;
bool YoumeMsg::has_comment() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void YoumeMsg::set_has_comment() {
  _has_bits_[0] |= 0x00000200u;
}
void YoumeMsg::clear_has_comment() {
  _has_bits_[0] &= ~0x00000200u;
}
void YoumeMsg::clear_comment() {
  if (comment_ != NULL) comment_->::YOUMECommonProtocol::MsgComment::Clear();
  clear_has_comment();
}
const ::YOUMECommonProtocol::MsgComment& YoumeMsg::comment() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeMsg.comment)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return comment_ != NULL ? *comment_ : *default_instance().comment_;
#else
  return comment_ != NULL ? *comment_ : *default_instance_->comment_;
#endif
}
::YOUMECommonProtocol::MsgComment* YoumeMsg::mutable_comment() {
  set_has_comment();
  if (comment_ == NULL) {
    comment_ = new ::YOUMECommonProtocol::MsgComment;
  }
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.YoumeMsg.comment)
  return comment_;
}
::YOUMECommonProtocol::MsgComment* YoumeMsg::release_comment() {
  clear_has_comment();
  ::YOUMECommonProtocol::MsgComment* temp = comment_;
  comment_ = NULL;
  return temp;
}
void YoumeMsg::set_allocated_comment(::YOUMECommonProtocol::MsgComment* comment) {
  delete comment_;
  comment_ = comment;
  if (comment) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.YoumeMsg.comment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetMsgRsp::kVersionFieldNumber;
const int GetMsgRsp::kRetFieldNumber;
const int GetMsgRsp::kMsgCntFieldNumber;
const int GetMsgRsp::kMsgListFieldNumber;
#endif  // !_MSC_VER

GetMsgRsp::GetMsgRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.GetMsgRsp)
}

void GetMsgRsp::InitAsDefaultInstance() {
}

GetMsgRsp::GetMsgRsp(const GetMsgRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.GetMsgRsp)
}

void GetMsgRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  msg_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMsgRsp::~GetMsgRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.GetMsgRsp)
  SharedDtor();
}

void GetMsgRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetMsgRsp& GetMsgRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fgetmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fgetmsg_2eproto();
#endif
  return *default_instance_;
}

GetMsgRsp* GetMsgRsp::default_instance_ = NULL;

GetMsgRsp* GetMsgRsp::New(::youmecommon::protobuf::Arena* arena) const {
  GetMsgRsp* n = new GetMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMsgRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetMsgRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(version_, ret_);
    msg_cnt_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  msg_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetMsgRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.GetMsgRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_cnt;
        break;
      }

      // required int32 msg_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_cnt:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_cnt_)));
          set_has_msg_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg_list;
        break;
      }

      // repeated .YOUMEServiceProtocol.YoumeMsg msg_list = 4;
      case 4: {
        if (tag == 34) {
         parse_msg_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_msg_list:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_msg_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_msg_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.GetMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.GetMsgRsp)
  return false;
#undef DO_
}

void GetMsgRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.GetMsgRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // required int32 msg_cnt = 3;
  if (has_msg_cnt()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->msg_cnt(), output);
  }

  // repeated .YOUMEServiceProtocol.YoumeMsg msg_list = 4;
  for (unsigned int i = 0, n = this->msg_list_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->msg_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.GetMsgRsp)
}

int GetMsgRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_msg_cnt()) {
    // required int32 msg_cnt = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_cnt());
  }

  return total_size;
}
int GetMsgRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required int32 msg_cnt = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_cnt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .YOUMEServiceProtocol.YoumeMsg msg_list = 4;
  total_size += 1 * this->msg_list_size();
  for (int i = 0; i < this->msg_list_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMsgRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetMsgRsp*>(&from));
}

void GetMsgRsp::MergeFrom(const GetMsgRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  msg_list_.MergeFrom(from.msg_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_msg_cnt()) {
      set_msg_cnt(from.msg_cnt());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetMsgRsp::CopyFrom(const GetMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMsgRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->msg_list())) return false;
  return true;
}

void GetMsgRsp::Swap(GetMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMsgRsp::InternalSwap(GetMsgRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(msg_cnt_, other->msg_cnt_);
  msg_list_.UnsafeArenaSwap(&other->msg_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetMsgRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.GetMsgRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMsgRsp

// required int32 version = 1;
bool GetMsgRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetMsgRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GetMsgRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetMsgRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 GetMsgRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetMsgRsp.version)
  return version_;
}
 void GetMsgRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetMsgRsp.version)
}

// required int32 ret = 2;
bool GetMsgRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetMsgRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void GetMsgRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetMsgRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 GetMsgRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetMsgRsp.ret)
  return ret_;
}
 void GetMsgRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetMsgRsp.ret)
}

// required int32 msg_cnt = 3;
bool GetMsgRsp::has_msg_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetMsgRsp::set_has_msg_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
void GetMsgRsp::clear_has_msg_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetMsgRsp::clear_msg_cnt() {
  msg_cnt_ = 0;
  clear_has_msg_cnt();
}
 ::youmecommon::protobuf::int32 GetMsgRsp::msg_cnt() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetMsgRsp.msg_cnt)
  return msg_cnt_;
}
 void GetMsgRsp::set_msg_cnt(::youmecommon::protobuf::int32 value) {
  set_has_msg_cnt();
  msg_cnt_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetMsgRsp.msg_cnt)
}

// repeated .YOUMEServiceProtocol.YoumeMsg msg_list = 4;
int GetMsgRsp::msg_list_size() const {
  return msg_list_.size();
}
void GetMsgRsp::clear_msg_list() {
  msg_list_.Clear();
}
const ::YOUMEServiceProtocol::YoumeMsg& GetMsgRsp::msg_list(int index) const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetMsgRsp.msg_list)
  return msg_list_.Get(index);
}
::YOUMEServiceProtocol::YoumeMsg* GetMsgRsp::mutable_msg_list(int index) {
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.GetMsgRsp.msg_list)
  return msg_list_.Mutable(index);
}
::YOUMEServiceProtocol::YoumeMsg* GetMsgRsp::add_msg_list() {
  // @@protoc_insertion_point(field_add:YOUMEServiceProtocol.GetMsgRsp.msg_list)
  return msg_list_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::YoumeMsg >*
GetMsgRsp::mutable_msg_list() {
  // @@protoc_insertion_point(field_mutable_list:YOUMEServiceProtocol.GetMsgRsp.msg_list)
  return &msg_list_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::YoumeMsg >&
GetMsgRsp::msg_list() const {
  // @@protoc_insertion_point(field_list:YOUMEServiceProtocol.GetMsgRsp.msg_list)
  return msg_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YOUMEServiceProtocol

// @@protoc_insertion_point(global_scope)
