// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youme_sndmsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "youme_sndmsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YOUMEServiceProtocol {

void protobuf_ShutdownFile_youme_5fsndmsg_2eproto() {
  delete RecverList::default_instance_;
  delete SendMsgReq::default_instance_;
  delete SendMsgRsp::default_instance_;
  delete RoomMsgNotice::default_instance_;
  delete SynMsgStatusReq::default_instance_;
  delete RecvType::default_instance_;
  delete SynMsgStatusRsp::default_instance_;
  delete RecvTypeRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_youme_5fsndmsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_youme_5fsndmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::YOUMECommonProtocol::protobuf_AddDesc_youme_5fcomm_2eproto();
  RecverList::default_instance_ = new RecverList();
  SendMsgReq::default_instance_ = new SendMsgReq();
  SendMsgRsp::default_instance_ = new SendMsgRsp();
  RoomMsgNotice::default_instance_ = new RoomMsgNotice();
  SynMsgStatusReq::default_instance_ = new SynMsgStatusReq();
  RecvType::default_instance_ = new RecvType();
  SynMsgStatusRsp::default_instance_ = new SynMsgStatusRsp();
  RecvTypeRsp::default_instance_ = new RecvTypeRsp();
  RecverList::default_instance_->InitAsDefaultInstance();
  SendMsgReq::default_instance_->InitAsDefaultInstance();
  SendMsgRsp::default_instance_->InitAsDefaultInstance();
  RoomMsgNotice::default_instance_->InitAsDefaultInstance();
  SynMsgStatusReq::default_instance_->InitAsDefaultInstance();
  RecvType::default_instance_->InitAsDefaultInstance();
  SynMsgStatusRsp::default_instance_->InitAsDefaultInstance();
  RecvTypeRsp::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_youme_5fsndmsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_youme_5fsndmsg_2eproto_once_);
void protobuf_AddDesc_youme_5fsndmsg_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_youme_5fsndmsg_2eproto_once_,
                 &protobuf_AddDesc_youme_5fsndmsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_youme_5fsndmsg_2eproto {
  StaticDescriptorInitializer_youme_5fsndmsg_2eproto() {
    protobuf_AddDesc_youme_5fsndmsg_2eproto();
  }
} static_descriptor_initializer_youme_5fsndmsg_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int RecverList::kRecverIdFieldNumber;
#endif  // !_MSC_VER

RecverList::RecverList()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.RecverList)
}

void RecverList::InitAsDefaultInstance() {
}

RecverList::RecverList(const RecverList& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.RecverList)
}

void RecverList::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecverList::~RecverList() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.RecverList)
  SharedDtor();
}

void RecverList::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RecverList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RecverList& RecverList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fsndmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fsndmsg_2eproto();
#endif
  return *default_instance_;
}

RecverList* RecverList::default_instance_ = NULL;

RecverList* RecverList::New(::youmecommon::protobuf::Arena* arena) const {
  RecverList* n = new RecverList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecverList::Clear() {
  recver_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RecverList::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.RecverList)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes recver_id = 1;
      case 1: {
        if (tag == 10) {
         parse_recver_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_recver_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_recver_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.RecverList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.RecverList)
  return false;
#undef DO_
}

void RecverList::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.RecverList)
  // repeated bytes recver_id = 1;
  for (int i = 0; i < this->recver_id_size(); i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->recver_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.RecverList)
}

int RecverList::ByteSize() const {
  int total_size = 0;

  // repeated bytes recver_id = 1;
  total_size += 1 * this->recver_id_size();
  for (int i = 0; i < this->recver_id_size(); i++) {
    total_size += ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
      this->recver_id(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecverList::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const RecverList*>(&from));
}

void RecverList::MergeFrom(const RecverList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  recver_id_.MergeFrom(from.recver_id_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RecverList::CopyFrom(const RecverList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecverList::IsInitialized() const {

  return true;
}

void RecverList::Swap(RecverList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecverList::InternalSwap(RecverList* other) {
  recver_id_.UnsafeArenaSwap(&other->recver_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RecverList::GetTypeName() const {
  return "YOUMEServiceProtocol.RecverList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecverList

// repeated bytes recver_id = 1;
int RecverList::recver_id_size() const {
  return recver_id_.size();
}
void RecverList::clear_recver_id() {
  recver_id_.Clear();
}
 const ::std::string& RecverList::recver_id(int index) const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RecverList.recver_id)
  return recver_id_.Get(index);
}
 ::std::string* RecverList::mutable_recver_id(int index) {
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RecverList.recver_id)
  return recver_id_.Mutable(index);
}
 void RecverList::set_recver_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RecverList.recver_id)
  recver_id_.Mutable(index)->assign(value);
}
 void RecverList::set_recver_id(int index, const char* value) {
  recver_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RecverList.recver_id)
}
 void RecverList::set_recver_id(int index, const void* value, size_t size) {
  recver_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RecverList.recver_id)
}
 ::std::string* RecverList::add_recver_id() {
  return recver_id_.Add();
}
 void RecverList::add_recver_id(const ::std::string& value) {
  recver_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:YOUMEServiceProtocol.RecverList.recver_id)
}
 void RecverList::add_recver_id(const char* value) {
  recver_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:YOUMEServiceProtocol.RecverList.recver_id)
}
 void RecverList::add_recver_id(const void* value, size_t size) {
  recver_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:YOUMEServiceProtocol.RecverList.recver_id)
}
 const ::youmecommon::protobuf::RepeatedPtrField< ::std::string>&
RecverList::recver_id() const {
  // @@protoc_insertion_point(field_list:YOUMEServiceProtocol.RecverList.recver_id)
  return recver_id_;
}
 ::youmecommon::protobuf::RepeatedPtrField< ::std::string>*
RecverList::mutable_recver_id() {
  // @@protoc_insertion_point(field_mutable_list:YOUMEServiceProtocol.RecverList.recver_id)
  return &recver_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SendMsgReq::kVersionFieldNumber;
const int SendMsgReq::kChatTypeFieldNumber;
const int SendMsgReq::kRecvIdFieldNumber;
const int SendMsgReq::kMsgContentFieldNumber;
const int SendMsgReq::kCommentFieldNumber;
const int SendMsgReq::kTranTypeFieldNumber;
#endif  // !_MSC_VER

SendMsgReq::SendMsgReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.SendMsgReq)
}

void SendMsgReq::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  comment_ = const_cast< ::YOUMECommonProtocol::MsgComment*>(
      ::YOUMECommonProtocol::MsgComment::internal_default_instance());
#else
  comment_ = const_cast< ::YOUMECommonProtocol::MsgComment*>(&::YOUMECommonProtocol::MsgComment::default_instance());
#endif
}

SendMsgReq::SendMsgReq(const SendMsgReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.SendMsgReq)
}

void SendMsgReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  chat_type_ = 0;
  recv_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_content_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_ = NULL;
  tran_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMsgReq::~SendMsgReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.SendMsgReq)
  SharedDtor();
}

void SendMsgReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_content_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete comment_;
  }
}

void SendMsgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SendMsgReq& SendMsgReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fsndmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fsndmsg_2eproto();
#endif
  return *default_instance_;
}

SendMsgReq* SendMsgReq::default_instance_ = NULL;

SendMsgReq* SendMsgReq::New(::youmecommon::protobuf::Arena* arena) const {
  SendMsgReq* n = new SendMsgReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendMsgReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SendMsgReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(version_, chat_type_);
    if (has_recv_id()) {
      recv_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_msg_content()) {
      msg_content_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_comment()) {
      if (comment_ != NULL) comment_->::YOUMECommonProtocol::MsgComment::Clear();
    }
    tran_type_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SendMsgReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.SendMsgReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_chat_type;
        break;
      }

      // required int32 chat_type = 2;
      case 2: {
        if (tag == 16) {
         parse_chat_type:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_type_)));
          set_has_chat_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_recv_id;
        break;
      }

      // required bytes recv_id = 3;
      case 3: {
        if (tag == 26) {
         parse_recv_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_recv_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg_content;
        break;
      }

      // required bytes msg_content = 4;
      case 4: {
        if (tag == 34) {
         parse_msg_content:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_comment;
        break;
      }

      // optional .YOUMECommonProtocol.MsgComment comment = 5;
      case 5: {
        if (tag == 42) {
         parse_comment:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tran_type;
        break;
      }

      // optional uint32 tran_type = 6;
      case 6: {
        if (tag == 48) {
         parse_tran_type:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tran_type_)));
          set_has_tran_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.SendMsgReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.SendMsgReq)
  return false;
#undef DO_
}

void SendMsgReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.SendMsgReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 chat_type = 2;
  if (has_chat_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->chat_type(), output);
  }

  // required bytes recv_id = 3;
  if (has_recv_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->recv_id(), output);
  }

  // required bytes msg_content = 4;
  if (has_msg_content()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->msg_content(), output);
  }

  // optional .YOUMECommonProtocol.MsgComment comment = 5;
  if (has_comment()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->comment_, output);
  }

  // optional uint32 tran_type = 6;
  if (has_tran_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tran_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.SendMsgReq)
}

int SendMsgReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_chat_type()) {
    // required int32 chat_type = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->chat_type());
  }

  if (has_recv_id()) {
    // required bytes recv_id = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->recv_id());
  }

  if (has_msg_content()) {
    // required bytes msg_content = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->msg_content());
  }

  return total_size;
}
int SendMsgReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 chat_type = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->chat_type());

    // required bytes recv_id = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->recv_id());

    // required bytes msg_content = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->msg_content());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 48u) {
    // optional .YOUMECommonProtocol.MsgComment comment = 5;
    if (has_comment()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->comment_);
    }

    // optional uint32 tran_type = 6;
    if (has_tran_type()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
          this->tran_type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMsgReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const SendMsgReq*>(&from));
}

void SendMsgReq::MergeFrom(const SendMsgReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_chat_type()) {
      set_chat_type(from.chat_type());
    }
    if (from.has_recv_id()) {
      set_has_recv_id();
      recv_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.recv_id_);
    }
    if (from.has_msg_content()) {
      set_has_msg_content();
      msg_content_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_content_);
    }
    if (from.has_comment()) {
      mutable_comment()->::YOUMECommonProtocol::MsgComment::MergeFrom(from.comment());
    }
    if (from.has_tran_type()) {
      set_tran_type(from.tran_type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SendMsgReq::CopyFrom(const SendMsgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMsgReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_comment()) {
    if (!this->comment_->IsInitialized()) return false;
  }
  return true;
}

void SendMsgReq::Swap(SendMsgReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendMsgReq::InternalSwap(SendMsgReq* other) {
  std::swap(version_, other->version_);
  std::swap(chat_type_, other->chat_type_);
  recv_id_.Swap(&other->recv_id_);
  msg_content_.Swap(&other->msg_content_);
  std::swap(comment_, other->comment_);
  std::swap(tran_type_, other->tran_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SendMsgReq::GetTypeName() const {
  return "YOUMEServiceProtocol.SendMsgReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendMsgReq

// required int32 version = 1;
bool SendMsgReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SendMsgReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void SendMsgReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void SendMsgReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 SendMsgReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SendMsgReq.version)
  return version_;
}
 void SendMsgReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.SendMsgReq.version)
}

// required int32 chat_type = 2;
bool SendMsgReq::has_chat_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SendMsgReq::set_has_chat_type() {
  _has_bits_[0] |= 0x00000002u;
}
void SendMsgReq::clear_has_chat_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void SendMsgReq::clear_chat_type() {
  chat_type_ = 0;
  clear_has_chat_type();
}
 ::youmecommon::protobuf::int32 SendMsgReq::chat_type() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SendMsgReq.chat_type)
  return chat_type_;
}
 void SendMsgReq::set_chat_type(::youmecommon::protobuf::int32 value) {
  set_has_chat_type();
  chat_type_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.SendMsgReq.chat_type)
}

// required bytes recv_id = 3;
bool SendMsgReq::has_recv_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SendMsgReq::set_has_recv_id() {
  _has_bits_[0] |= 0x00000004u;
}
void SendMsgReq::clear_has_recv_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void SendMsgReq::clear_recv_id() {
  recv_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_recv_id();
}
 const ::std::string& SendMsgReq::recv_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SendMsgReq.recv_id)
  return recv_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendMsgReq::set_recv_id(const ::std::string& value) {
  set_has_recv_id();
  recv_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.SendMsgReq.recv_id)
}
 void SendMsgReq::set_recv_id(const char* value) {
  set_has_recv_id();
  recv_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.SendMsgReq.recv_id)
}
 void SendMsgReq::set_recv_id(const void* value, size_t size) {
  set_has_recv_id();
  recv_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.SendMsgReq.recv_id)
}
 ::std::string* SendMsgReq::mutable_recv_id() {
  set_has_recv_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.SendMsgReq.recv_id)
  return recv_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SendMsgReq::release_recv_id() {
  clear_has_recv_id();
  return recv_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendMsgReq::set_allocated_recv_id(::std::string* recv_id) {
  if (recv_id != NULL) {
    set_has_recv_id();
  } else {
    clear_has_recv_id();
  }
  recv_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), recv_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.SendMsgReq.recv_id)
}

// required bytes msg_content = 4;
bool SendMsgReq::has_msg_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SendMsgReq::set_has_msg_content() {
  _has_bits_[0] |= 0x00000008u;
}
void SendMsgReq::clear_has_msg_content() {
  _has_bits_[0] &= ~0x00000008u;
}
void SendMsgReq::clear_msg_content() {
  msg_content_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_content();
}
 const ::std::string& SendMsgReq::msg_content() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SendMsgReq.msg_content)
  return msg_content_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendMsgReq::set_msg_content(const ::std::string& value) {
  set_has_msg_content();
  msg_content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.SendMsgReq.msg_content)
}
 void SendMsgReq::set_msg_content(const char* value) {
  set_has_msg_content();
  msg_content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.SendMsgReq.msg_content)
}
 void SendMsgReq::set_msg_content(const void* value, size_t size) {
  set_has_msg_content();
  msg_content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.SendMsgReq.msg_content)
}
 ::std::string* SendMsgReq::mutable_msg_content() {
  set_has_msg_content();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.SendMsgReq.msg_content)
  return msg_content_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SendMsgReq::release_msg_content() {
  clear_has_msg_content();
  return msg_content_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendMsgReq::set_allocated_msg_content(::std::string* msg_content) {
  if (msg_content != NULL) {
    set_has_msg_content();
  } else {
    clear_has_msg_content();
  }
  msg_content_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), msg_content);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.SendMsgReq.msg_content)
}

// optional .YOUMECommonProtocol.MsgComment comment = 5;
bool SendMsgReq::has_comment() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SendMsgReq::set_has_comment() {
  _has_bits_[0] |= 0x00000010u;
}
void SendMsgReq::clear_has_comment() {
  _has_bits_[0] &= ~0x00000010u;
}
void SendMsgReq::clear_comment() {
  if (comment_ != NULL) comment_->::YOUMECommonProtocol::MsgComment::Clear();
  clear_has_comment();
}
const ::YOUMECommonProtocol::MsgComment& SendMsgReq::comment() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SendMsgReq.comment)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return comment_ != NULL ? *comment_ : *default_instance().comment_;
#else
  return comment_ != NULL ? *comment_ : *default_instance_->comment_;
#endif
}
::YOUMECommonProtocol::MsgComment* SendMsgReq::mutable_comment() {
  set_has_comment();
  if (comment_ == NULL) {
    comment_ = new ::YOUMECommonProtocol::MsgComment;
  }
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.SendMsgReq.comment)
  return comment_;
}
::YOUMECommonProtocol::MsgComment* SendMsgReq::release_comment() {
  clear_has_comment();
  ::YOUMECommonProtocol::MsgComment* temp = comment_;
  comment_ = NULL;
  return temp;
}
void SendMsgReq::set_allocated_comment(::YOUMECommonProtocol::MsgComment* comment) {
  delete comment_;
  comment_ = comment;
  if (comment) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.SendMsgReq.comment)
}

// optional uint32 tran_type = 6;
bool SendMsgReq::has_tran_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SendMsgReq::set_has_tran_type() {
  _has_bits_[0] |= 0x00000020u;
}
void SendMsgReq::clear_has_tran_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void SendMsgReq::clear_tran_type() {
  tran_type_ = 0u;
  clear_has_tran_type();
}
 ::youmecommon::protobuf::uint32 SendMsgReq::tran_type() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SendMsgReq.tran_type)
  return tran_type_;
}
 void SendMsgReq::set_tran_type(::youmecommon::protobuf::uint32 value) {
  set_has_tran_type();
  tran_type_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.SendMsgReq.tran_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SendMsgRsp::kVersionFieldNumber;
const int SendMsgRsp::kRetFieldNumber;
const int SendMsgRsp::kSvrMsgidFieldNumber;
const int SendMsgRsp::kRetInfoFieldNumber;
const int SendMsgRsp::kExpireTimeFieldNumber;
const int SendMsgRsp::kForbidRoomFieldNumber;
const int SendMsgRsp::kReasonTypeFieldNumber;
const int SendMsgRsp::kReasonFieldNumber;
#endif  // !_MSC_VER

SendMsgRsp::SendMsgRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.SendMsgRsp)
}

void SendMsgRsp::InitAsDefaultInstance() {
}

SendMsgRsp::SendMsgRsp(const SendMsgRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.SendMsgRsp)
}

void SendMsgRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  svr_msgid_ = GOOGLE_ULONGLONG(0);
  ret_info_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  expire_time_ = GOOGLE_ULONGLONG(0);
  forbid_room_ = false;
  reason_type_ = 0;
  reason_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMsgRsp::~SendMsgRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.SendMsgRsp)
  SharedDtor();
}

void SendMsgRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_info_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SendMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SendMsgRsp& SendMsgRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fsndmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fsndmsg_2eproto();
#endif
  return *default_instance_;
}

SendMsgRsp* SendMsgRsp::default_instance_ = NULL;

SendMsgRsp* SendMsgRsp::New(::youmecommon::protobuf::Arena* arena) const {
  SendMsgRsp* n = new SendMsgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendMsgRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SendMsgRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(version_, svr_msgid_);
    ZR_(expire_time_, reason_type_);
    if (has_ret_info()) {
      ret_info_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_reason()) {
      reason_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SendMsgRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.SendMsgRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_svr_msgid;
        break;
      }

      // required uint64 svr_msgid = 3;
      case 3: {
        if (tag == 24) {
         parse_svr_msgid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &svr_msgid_)));
          set_has_svr_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ret_info;
        break;
      }

      // optional bytes ret_info = 4;
      case 4: {
        if (tag == 34) {
         parse_ret_info:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_expire_time;
        break;
      }

      // optional uint64 expire_time = 5;
      case 5: {
        if (tag == 40) {
         parse_expire_time:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_forbid_room;
        break;
      }

      // optional bool forbid_room = 6;
      case 6: {
        if (tag == 48) {
         parse_forbid_room:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forbid_room_)));
          set_has_forbid_room();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_reason_type;
        break;
      }

      // optional int32 reason_type = 7;
      case 7: {
        if (tag == 56) {
         parse_reason_type:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_type_)));
          set_has_reason_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_reason;
        break;
      }

      // optional string reason = 8;
      case 8: {
        if (tag == 66) {
         parse_reason:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.SendMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.SendMsgRsp)
  return false;
#undef DO_
}

void SendMsgRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.SendMsgRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // required uint64 svr_msgid = 3;
  if (has_svr_msgid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt64(3, this->svr_msgid(), output);
  }

  // optional bytes ret_info = 4;
  if (has_ret_info()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->ret_info(), output);
  }

  // optional uint64 expire_time = 5;
  if (has_expire_time()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt64(5, this->expire_time(), output);
  }

  // optional bool forbid_room = 6;
  if (has_forbid_room()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBool(6, this->forbid_room(), output);
  }

  // optional int32 reason_type = 7;
  if (has_reason_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(7, this->reason_type(), output);
  }

  // optional string reason = 8;
  if (has_reason()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->reason(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.SendMsgRsp)
}

int SendMsgRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_svr_msgid()) {
    // required uint64 svr_msgid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->svr_msgid());
  }

  return total_size;
}
int SendMsgRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required uint64 svr_msgid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->svr_msgid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 248u) {
    // optional bytes ret_info = 4;
    if (has_ret_info()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_info());
    }

    // optional uint64 expire_time = 5;
    if (has_expire_time()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
          this->expire_time());
    }

    // optional bool forbid_room = 6;
    if (has_forbid_room()) {
      total_size += 1 + 1;
    }

    // optional int32 reason_type = 7;
    if (has_reason_type()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->reason_type());
    }

    // optional string reason = 8;
    if (has_reason()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMsgRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const SendMsgRsp*>(&from));
}

void SendMsgRsp::MergeFrom(const SendMsgRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_svr_msgid()) {
      set_svr_msgid(from.svr_msgid());
    }
    if (from.has_ret_info()) {
      set_has_ret_info();
      ret_info_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_info_);
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_forbid_room()) {
      set_forbid_room(from.forbid_room());
    }
    if (from.has_reason_type()) {
      set_reason_type(from.reason_type());
    }
    if (from.has_reason()) {
      set_has_reason();
      reason_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SendMsgRsp::CopyFrom(const SendMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMsgRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SendMsgRsp::Swap(SendMsgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendMsgRsp::InternalSwap(SendMsgRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(svr_msgid_, other->svr_msgid_);
  ret_info_.Swap(&other->ret_info_);
  std::swap(expire_time_, other->expire_time_);
  std::swap(forbid_room_, other->forbid_room_);
  std::swap(reason_type_, other->reason_type_);
  reason_.Swap(&other->reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SendMsgRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.SendMsgRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendMsgRsp

// required int32 version = 1;
bool SendMsgRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SendMsgRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void SendMsgRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void SendMsgRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 SendMsgRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SendMsgRsp.version)
  return version_;
}
 void SendMsgRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.SendMsgRsp.version)
}

// required int32 ret = 2;
bool SendMsgRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SendMsgRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void SendMsgRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void SendMsgRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 SendMsgRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SendMsgRsp.ret)
  return ret_;
}
 void SendMsgRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.SendMsgRsp.ret)
}

// required uint64 svr_msgid = 3;
bool SendMsgRsp::has_svr_msgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SendMsgRsp::set_has_svr_msgid() {
  _has_bits_[0] |= 0x00000004u;
}
void SendMsgRsp::clear_has_svr_msgid() {
  _has_bits_[0] &= ~0x00000004u;
}
void SendMsgRsp::clear_svr_msgid() {
  svr_msgid_ = GOOGLE_ULONGLONG(0);
  clear_has_svr_msgid();
}
 ::youmecommon::protobuf::uint64 SendMsgRsp::svr_msgid() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SendMsgRsp.svr_msgid)
  return svr_msgid_;
}
 void SendMsgRsp::set_svr_msgid(::youmecommon::protobuf::uint64 value) {
  set_has_svr_msgid();
  svr_msgid_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.SendMsgRsp.svr_msgid)
}

// optional bytes ret_info = 4;
bool SendMsgRsp::has_ret_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SendMsgRsp::set_has_ret_info() {
  _has_bits_[0] |= 0x00000008u;
}
void SendMsgRsp::clear_has_ret_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void SendMsgRsp::clear_ret_info() {
  ret_info_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_info();
}
 const ::std::string& SendMsgRsp::ret_info() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SendMsgRsp.ret_info)
  return ret_info_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendMsgRsp::set_ret_info(const ::std::string& value) {
  set_has_ret_info();
  ret_info_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.SendMsgRsp.ret_info)
}
 void SendMsgRsp::set_ret_info(const char* value) {
  set_has_ret_info();
  ret_info_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.SendMsgRsp.ret_info)
}
 void SendMsgRsp::set_ret_info(const void* value, size_t size) {
  set_has_ret_info();
  ret_info_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.SendMsgRsp.ret_info)
}
 ::std::string* SendMsgRsp::mutable_ret_info() {
  set_has_ret_info();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.SendMsgRsp.ret_info)
  return ret_info_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SendMsgRsp::release_ret_info() {
  clear_has_ret_info();
  return ret_info_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendMsgRsp::set_allocated_ret_info(::std::string* ret_info) {
  if (ret_info != NULL) {
    set_has_ret_info();
  } else {
    clear_has_ret_info();
  }
  ret_info_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ret_info);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.SendMsgRsp.ret_info)
}

// optional uint64 expire_time = 5;
bool SendMsgRsp::has_expire_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SendMsgRsp::set_has_expire_time() {
  _has_bits_[0] |= 0x00000010u;
}
void SendMsgRsp::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void SendMsgRsp::clear_expire_time() {
  expire_time_ = GOOGLE_ULONGLONG(0);
  clear_has_expire_time();
}
 ::youmecommon::protobuf::uint64 SendMsgRsp::expire_time() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SendMsgRsp.expire_time)
  return expire_time_;
}
 void SendMsgRsp::set_expire_time(::youmecommon::protobuf::uint64 value) {
  set_has_expire_time();
  expire_time_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.SendMsgRsp.expire_time)
}

// optional bool forbid_room = 6;
bool SendMsgRsp::has_forbid_room() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SendMsgRsp::set_has_forbid_room() {
  _has_bits_[0] |= 0x00000020u;
}
void SendMsgRsp::clear_has_forbid_room() {
  _has_bits_[0] &= ~0x00000020u;
}
void SendMsgRsp::clear_forbid_room() {
  forbid_room_ = false;
  clear_has_forbid_room();
}
 bool SendMsgRsp::forbid_room() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SendMsgRsp.forbid_room)
  return forbid_room_;
}
 void SendMsgRsp::set_forbid_room(bool value) {
  set_has_forbid_room();
  forbid_room_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.SendMsgRsp.forbid_room)
}

// optional int32 reason_type = 7;
bool SendMsgRsp::has_reason_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SendMsgRsp::set_has_reason_type() {
  _has_bits_[0] |= 0x00000040u;
}
void SendMsgRsp::clear_has_reason_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void SendMsgRsp::clear_reason_type() {
  reason_type_ = 0;
  clear_has_reason_type();
}
 ::youmecommon::protobuf::int32 SendMsgRsp::reason_type() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SendMsgRsp.reason_type)
  return reason_type_;
}
 void SendMsgRsp::set_reason_type(::youmecommon::protobuf::int32 value) {
  set_has_reason_type();
  reason_type_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.SendMsgRsp.reason_type)
}

// optional string reason = 8;
bool SendMsgRsp::has_reason() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SendMsgRsp::set_has_reason() {
  _has_bits_[0] |= 0x00000080u;
}
void SendMsgRsp::clear_has_reason() {
  _has_bits_[0] &= ~0x00000080u;
}
void SendMsgRsp::clear_reason() {
  reason_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
 const ::std::string& SendMsgRsp::reason() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SendMsgRsp.reason)
  return reason_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendMsgRsp::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.SendMsgRsp.reason)
}
 void SendMsgRsp::set_reason(const char* value) {
  set_has_reason();
  reason_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.SendMsgRsp.reason)
}
 void SendMsgRsp::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.SendMsgRsp.reason)
}
 ::std::string* SendMsgRsp::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.SendMsgRsp.reason)
  return reason_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SendMsgRsp::release_reason() {
  clear_has_reason();
  return reason_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendMsgRsp::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.SendMsgRsp.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RoomMsgNotice::kVersionFieldNumber;
const int RoomMsgNotice::kSenderIdFieldNumber;
const int RoomMsgNotice::kRoomNameFieldNumber;
const int RoomMsgNotice::kNoticePropertyFieldNumber;
const int RoomMsgNotice::kMsgContentFieldNumber;
const int RoomMsgNotice::kCheckMaskFieldNumber;
#endif  // !_MSC_VER

RoomMsgNotice::RoomMsgNotice()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.RoomMsgNotice)
}

void RoomMsgNotice::InitAsDefaultInstance() {
}

RoomMsgNotice::RoomMsgNotice(const RoomMsgNotice& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.RoomMsgNotice)
}

void RoomMsgNotice::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  sender_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  room_name_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  notice_property_ = 0;
  msg_content_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  check_mask_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomMsgNotice::~RoomMsgNotice() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.RoomMsgNotice)
  SharedDtor();
}

void RoomMsgNotice::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  room_name_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_content_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RoomMsgNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RoomMsgNotice& RoomMsgNotice::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fsndmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fsndmsg_2eproto();
#endif
  return *default_instance_;
}

RoomMsgNotice* RoomMsgNotice::default_instance_ = NULL;

RoomMsgNotice* RoomMsgNotice::New(::youmecommon::protobuf::Arena* arena) const {
  RoomMsgNotice* n = new RoomMsgNotice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomMsgNotice::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RoomMsgNotice*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(version_, notice_property_);
    if (has_sender_id()) {
      sender_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_room_name()) {
      room_name_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_msg_content()) {
      msg_content_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    check_mask_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RoomMsgNotice::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.RoomMsgNotice)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sender_id;
        break;
      }

      // required bytes sender_id = 2;
      case 2: {
        if (tag == 18) {
         parse_sender_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sender_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_room_name;
        break;
      }

      // required bytes room_name = 3;
      case 3: {
        if (tag == 26) {
         parse_room_name:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_room_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_notice_property;
        break;
      }

      // required int32 notice_property = 4;
      case 4: {
        if (tag == 32) {
         parse_notice_property:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notice_property_)));
          set_has_notice_property();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msg_content;
        break;
      }

      // optional bytes msg_content = 5;
      case 5: {
        if (tag == 42) {
         parse_msg_content:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_check_mask;
        break;
      }

      // optional bool check_mask = 6;
      case 6: {
        if (tag == 48) {
         parse_check_mask:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &check_mask_)));
          set_has_check_mask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.RoomMsgNotice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.RoomMsgNotice)
  return false;
#undef DO_
}

void RoomMsgNotice::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.RoomMsgNotice)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required bytes sender_id = 2;
  if (has_sender_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sender_id(), output);
  }

  // required bytes room_name = 3;
  if (has_room_name()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->room_name(), output);
  }

  // required int32 notice_property = 4;
  if (has_notice_property()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->notice_property(), output);
  }

  // optional bytes msg_content = 5;
  if (has_msg_content()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->msg_content(), output);
  }

  // optional bool check_mask = 6;
  if (has_check_mask()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBool(6, this->check_mask(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.RoomMsgNotice)
}

int RoomMsgNotice::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_sender_id()) {
    // required bytes sender_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->sender_id());
  }

  if (has_room_name()) {
    // required bytes room_name = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->room_name());
  }

  if (has_notice_property()) {
    // required int32 notice_property = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->notice_property());
  }

  return total_size;
}
int RoomMsgNotice::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required bytes sender_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->sender_id());

    // required bytes room_name = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->room_name());

    // required int32 notice_property = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->notice_property());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 48u) {
    // optional bytes msg_content = 5;
    if (has_msg_content()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_content());
    }

    // optional bool check_mask = 6;
    if (has_check_mask()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomMsgNotice::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const RoomMsgNotice*>(&from));
}

void RoomMsgNotice::MergeFrom(const RoomMsgNotice& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_sender_id()) {
      set_has_sender_id();
      sender_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_id_);
    }
    if (from.has_room_name()) {
      set_has_room_name();
      room_name_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
    }
    if (from.has_notice_property()) {
      set_notice_property(from.notice_property());
    }
    if (from.has_msg_content()) {
      set_has_msg_content();
      msg_content_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_content_);
    }
    if (from.has_check_mask()) {
      set_check_mask(from.check_mask());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RoomMsgNotice::CopyFrom(const RoomMsgNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomMsgNotice::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RoomMsgNotice::Swap(RoomMsgNotice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomMsgNotice::InternalSwap(RoomMsgNotice* other) {
  std::swap(version_, other->version_);
  sender_id_.Swap(&other->sender_id_);
  room_name_.Swap(&other->room_name_);
  std::swap(notice_property_, other->notice_property_);
  msg_content_.Swap(&other->msg_content_);
  std::swap(check_mask_, other->check_mask_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RoomMsgNotice::GetTypeName() const {
  return "YOUMEServiceProtocol.RoomMsgNotice";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomMsgNotice

// required int32 version = 1;
bool RoomMsgNotice::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomMsgNotice::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomMsgNotice::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomMsgNotice::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 RoomMsgNotice::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RoomMsgNotice.version)
  return version_;
}
 void RoomMsgNotice::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RoomMsgNotice.version)
}

// required bytes sender_id = 2;
bool RoomMsgNotice::has_sender_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoomMsgNotice::set_has_sender_id() {
  _has_bits_[0] |= 0x00000002u;
}
void RoomMsgNotice::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoomMsgNotice::clear_sender_id() {
  sender_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender_id();
}
 const ::std::string& RoomMsgNotice::sender_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RoomMsgNotice.sender_id)
  return sender_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomMsgNotice::set_sender_id(const ::std::string& value) {
  set_has_sender_id();
  sender_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RoomMsgNotice.sender_id)
}
 void RoomMsgNotice::set_sender_id(const char* value) {
  set_has_sender_id();
  sender_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RoomMsgNotice.sender_id)
}
 void RoomMsgNotice::set_sender_id(const void* value, size_t size) {
  set_has_sender_id();
  sender_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RoomMsgNotice.sender_id)
}
 ::std::string* RoomMsgNotice::mutable_sender_id() {
  set_has_sender_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RoomMsgNotice.sender_id)
  return sender_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomMsgNotice::release_sender_id() {
  clear_has_sender_id();
  return sender_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomMsgNotice::set_allocated_sender_id(::std::string* sender_id) {
  if (sender_id != NULL) {
    set_has_sender_id();
  } else {
    clear_has_sender_id();
  }
  sender_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), sender_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RoomMsgNotice.sender_id)
}

// required bytes room_name = 3;
bool RoomMsgNotice::has_room_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoomMsgNotice::set_has_room_name() {
  _has_bits_[0] |= 0x00000004u;
}
void RoomMsgNotice::clear_has_room_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoomMsgNotice::clear_room_name() {
  room_name_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_name();
}
 const ::std::string& RoomMsgNotice::room_name() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RoomMsgNotice.room_name)
  return room_name_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomMsgNotice::set_room_name(const ::std::string& value) {
  set_has_room_name();
  room_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RoomMsgNotice.room_name)
}
 void RoomMsgNotice::set_room_name(const char* value) {
  set_has_room_name();
  room_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RoomMsgNotice.room_name)
}
 void RoomMsgNotice::set_room_name(const void* value, size_t size) {
  set_has_room_name();
  room_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RoomMsgNotice.room_name)
}
 ::std::string* RoomMsgNotice::mutable_room_name() {
  set_has_room_name();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RoomMsgNotice.room_name)
  return room_name_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomMsgNotice::release_room_name() {
  clear_has_room_name();
  return room_name_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomMsgNotice::set_allocated_room_name(::std::string* room_name) {
  if (room_name != NULL) {
    set_has_room_name();
  } else {
    clear_has_room_name();
  }
  room_name_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_name);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RoomMsgNotice.room_name)
}

// required int32 notice_property = 4;
bool RoomMsgNotice::has_notice_property() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RoomMsgNotice::set_has_notice_property() {
  _has_bits_[0] |= 0x00000008u;
}
void RoomMsgNotice::clear_has_notice_property() {
  _has_bits_[0] &= ~0x00000008u;
}
void RoomMsgNotice::clear_notice_property() {
  notice_property_ = 0;
  clear_has_notice_property();
}
 ::youmecommon::protobuf::int32 RoomMsgNotice::notice_property() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RoomMsgNotice.notice_property)
  return notice_property_;
}
 void RoomMsgNotice::set_notice_property(::youmecommon::protobuf::int32 value) {
  set_has_notice_property();
  notice_property_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RoomMsgNotice.notice_property)
}

// optional bytes msg_content = 5;
bool RoomMsgNotice::has_msg_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RoomMsgNotice::set_has_msg_content() {
  _has_bits_[0] |= 0x00000010u;
}
void RoomMsgNotice::clear_has_msg_content() {
  _has_bits_[0] &= ~0x00000010u;
}
void RoomMsgNotice::clear_msg_content() {
  msg_content_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_content();
}
 const ::std::string& RoomMsgNotice::msg_content() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RoomMsgNotice.msg_content)
  return msg_content_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomMsgNotice::set_msg_content(const ::std::string& value) {
  set_has_msg_content();
  msg_content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RoomMsgNotice.msg_content)
}
 void RoomMsgNotice::set_msg_content(const char* value) {
  set_has_msg_content();
  msg_content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RoomMsgNotice.msg_content)
}
 void RoomMsgNotice::set_msg_content(const void* value, size_t size) {
  set_has_msg_content();
  msg_content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RoomMsgNotice.msg_content)
}
 ::std::string* RoomMsgNotice::mutable_msg_content() {
  set_has_msg_content();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RoomMsgNotice.msg_content)
  return msg_content_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomMsgNotice::release_msg_content() {
  clear_has_msg_content();
  return msg_content_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomMsgNotice::set_allocated_msg_content(::std::string* msg_content) {
  if (msg_content != NULL) {
    set_has_msg_content();
  } else {
    clear_has_msg_content();
  }
  msg_content_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), msg_content);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RoomMsgNotice.msg_content)
}

// optional bool check_mask = 6;
bool RoomMsgNotice::has_check_mask() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RoomMsgNotice::set_has_check_mask() {
  _has_bits_[0] |= 0x00000020u;
}
void RoomMsgNotice::clear_has_check_mask() {
  _has_bits_[0] &= ~0x00000020u;
}
void RoomMsgNotice::clear_check_mask() {
  check_mask_ = false;
  clear_has_check_mask();
}
 bool RoomMsgNotice::check_mask() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RoomMsgNotice.check_mask)
  return check_mask_;
}
 void RoomMsgNotice::set_check_mask(bool value) {
  set_has_check_mask();
  check_mask_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RoomMsgNotice.check_mask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SynMsgStatusReq::kVersionFieldNumber;
const int SynMsgStatusReq::kRecvListFieldNumber;
#endif  // !_MSC_VER

SynMsgStatusReq::SynMsgStatusReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.SynMsgStatusReq)
}

void SynMsgStatusReq::InitAsDefaultInstance() {
}

SynMsgStatusReq::SynMsgStatusReq(const SynMsgStatusReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.SynMsgStatusReq)
}

void SynMsgStatusReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynMsgStatusReq::~SynMsgStatusReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.SynMsgStatusReq)
  SharedDtor();
}

void SynMsgStatusReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SynMsgStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SynMsgStatusReq& SynMsgStatusReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fsndmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fsndmsg_2eproto();
#endif
  return *default_instance_;
}

SynMsgStatusReq* SynMsgStatusReq::default_instance_ = NULL;

SynMsgStatusReq* SynMsgStatusReq::New(::youmecommon::protobuf::Arena* arena) const {
  SynMsgStatusReq* n = new SynMsgStatusReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SynMsgStatusReq::Clear() {
  version_ = 0;
  recv_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SynMsgStatusReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.SynMsgStatusReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_recv_list;
        break;
      }

      // repeated .YOUMEServiceProtocol.RecvType recv_list = 2;
      case 2: {
        if (tag == 18) {
         parse_recv_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_recv_list:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_recv_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_recv_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.SynMsgStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.SynMsgStatusReq)
  return false;
#undef DO_
}

void SynMsgStatusReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.SynMsgStatusReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // repeated .YOUMEServiceProtocol.RecvType recv_list = 2;
  for (unsigned int i = 0, n = this->recv_list_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->recv_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.SynMsgStatusReq)
}

int SynMsgStatusReq::ByteSize() const {
  int total_size = 0;

  // required int32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }
  // repeated .YOUMEServiceProtocol.RecvType recv_list = 2;
  total_size += 1 * this->recv_list_size();
  for (int i = 0; i < this->recv_list_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recv_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynMsgStatusReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const SynMsgStatusReq*>(&from));
}

void SynMsgStatusReq::MergeFrom(const SynMsgStatusReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  recv_list_.MergeFrom(from.recv_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SynMsgStatusReq::CopyFrom(const SynMsgStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynMsgStatusReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->recv_list())) return false;
  return true;
}

void SynMsgStatusReq::Swap(SynMsgStatusReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SynMsgStatusReq::InternalSwap(SynMsgStatusReq* other) {
  std::swap(version_, other->version_);
  recv_list_.UnsafeArenaSwap(&other->recv_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SynMsgStatusReq::GetTypeName() const {
  return "YOUMEServiceProtocol.SynMsgStatusReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SynMsgStatusReq

// required int32 version = 1;
bool SynMsgStatusReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SynMsgStatusReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void SynMsgStatusReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void SynMsgStatusReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 SynMsgStatusReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SynMsgStatusReq.version)
  return version_;
}
 void SynMsgStatusReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.SynMsgStatusReq.version)
}

// repeated .YOUMEServiceProtocol.RecvType recv_list = 2;
int SynMsgStatusReq::recv_list_size() const {
  return recv_list_.size();
}
void SynMsgStatusReq::clear_recv_list() {
  recv_list_.Clear();
}
const ::YOUMEServiceProtocol::RecvType& SynMsgStatusReq::recv_list(int index) const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SynMsgStatusReq.recv_list)
  return recv_list_.Get(index);
}
::YOUMEServiceProtocol::RecvType* SynMsgStatusReq::mutable_recv_list(int index) {
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.SynMsgStatusReq.recv_list)
  return recv_list_.Mutable(index);
}
::YOUMEServiceProtocol::RecvType* SynMsgStatusReq::add_recv_list() {
  // @@protoc_insertion_point(field_add:YOUMEServiceProtocol.SynMsgStatusReq.recv_list)
  return recv_list_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::RecvType >*
SynMsgStatusReq::mutable_recv_list() {
  // @@protoc_insertion_point(field_mutable_list:YOUMEServiceProtocol.SynMsgStatusReq.recv_list)
  return &recv_list_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::RecvType >&
SynMsgStatusReq::recv_list() const {
  // @@protoc_insertion_point(field_list:YOUMEServiceProtocol.SynMsgStatusReq.recv_list)
  return recv_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RecvType::kRecvIdFieldNumber;
const int RecvType::kChatTypeFieldNumber;
const int RecvType::kMsgIdFieldNumber;
#endif  // !_MSC_VER

RecvType::RecvType()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.RecvType)
}

void RecvType::InitAsDefaultInstance() {
}

RecvType::RecvType(const RecvType& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.RecvType)
}

void RecvType::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_type_ = 0;
  msg_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecvType::~RecvType() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.RecvType)
  SharedDtor();
}

void RecvType::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RecvType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RecvType& RecvType::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fsndmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fsndmsg_2eproto();
#endif
  return *default_instance_;
}

RecvType* RecvType::default_instance_ = NULL;

RecvType* RecvType::New(::youmecommon::protobuf::Arena* arena) const {
  RecvType* n = new RecvType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecvType::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RecvType*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(msg_id_, chat_type_);
    if (has_recv_id()) {
      recv_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RecvType::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.RecvType)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes recv_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_recv_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_chat_type;
        break;
      }

      // required int32 chat_type = 2;
      case 2: {
        if (tag == 16) {
         parse_chat_type:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_type_)));
          set_has_chat_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // optional uint64 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.RecvType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.RecvType)
  return false;
#undef DO_
}

void RecvType::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.RecvType)
  // required bytes recv_id = 1;
  if (has_recv_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->recv_id(), output);
  }

  // required int32 chat_type = 2;
  if (has_chat_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->chat_type(), output);
  }

  // optional uint64 msg_id = 3;
  if (has_msg_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt64(3, this->msg_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.RecvType)
}

int RecvType::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_recv_id()) {
    // required bytes recv_id = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->recv_id());
  }

  if (has_chat_type()) {
    // required int32 chat_type = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->chat_type());
  }

  return total_size;
}
int RecvType::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes recv_id = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->recv_id());

    // required int32 chat_type = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->chat_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint64 msg_id = 3;
  if (has_msg_id()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->msg_id());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecvType::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const RecvType*>(&from));
}

void RecvType::MergeFrom(const RecvType& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recv_id()) {
      set_has_recv_id();
      recv_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.recv_id_);
    }
    if (from.has_chat_type()) {
      set_chat_type(from.chat_type());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RecvType::CopyFrom(const RecvType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RecvType::Swap(RecvType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecvType::InternalSwap(RecvType* other) {
  recv_id_.Swap(&other->recv_id_);
  std::swap(chat_type_, other->chat_type_);
  std::swap(msg_id_, other->msg_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RecvType::GetTypeName() const {
  return "YOUMEServiceProtocol.RecvType";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecvType

// required bytes recv_id = 1;
bool RecvType::has_recv_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RecvType::set_has_recv_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RecvType::clear_has_recv_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RecvType::clear_recv_id() {
  recv_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_recv_id();
}
 const ::std::string& RecvType::recv_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RecvType.recv_id)
  return recv_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecvType::set_recv_id(const ::std::string& value) {
  set_has_recv_id();
  recv_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RecvType.recv_id)
}
 void RecvType::set_recv_id(const char* value) {
  set_has_recv_id();
  recv_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RecvType.recv_id)
}
 void RecvType::set_recv_id(const void* value, size_t size) {
  set_has_recv_id();
  recv_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RecvType.recv_id)
}
 ::std::string* RecvType::mutable_recv_id() {
  set_has_recv_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RecvType.recv_id)
  return recv_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecvType::release_recv_id() {
  clear_has_recv_id();
  return recv_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecvType::set_allocated_recv_id(::std::string* recv_id) {
  if (recv_id != NULL) {
    set_has_recv_id();
  } else {
    clear_has_recv_id();
  }
  recv_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), recv_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RecvType.recv_id)
}

// required int32 chat_type = 2;
bool RecvType::has_chat_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RecvType::set_has_chat_type() {
  _has_bits_[0] |= 0x00000002u;
}
void RecvType::clear_has_chat_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void RecvType::clear_chat_type() {
  chat_type_ = 0;
  clear_has_chat_type();
}
 ::youmecommon::protobuf::int32 RecvType::chat_type() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RecvType.chat_type)
  return chat_type_;
}
 void RecvType::set_chat_type(::youmecommon::protobuf::int32 value) {
  set_has_chat_type();
  chat_type_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RecvType.chat_type)
}

// optional uint64 msg_id = 3;
bool RecvType::has_msg_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RecvType::set_has_msg_id() {
  _has_bits_[0] |= 0x00000004u;
}
void RecvType::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void RecvType::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
  clear_has_msg_id();
}
 ::youmecommon::protobuf::uint64 RecvType::msg_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RecvType.msg_id)
  return msg_id_;
}
 void RecvType::set_msg_id(::youmecommon::protobuf::uint64 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RecvType.msg_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SynMsgStatusRsp::kVersionFieldNumber;
const int SynMsgStatusRsp::kRetFieldNumber;
const int SynMsgStatusRsp::kRecvRspListFieldNumber;
#endif  // !_MSC_VER

SynMsgStatusRsp::SynMsgStatusRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.SynMsgStatusRsp)
}

void SynMsgStatusRsp::InitAsDefaultInstance() {
}

SynMsgStatusRsp::SynMsgStatusRsp(const SynMsgStatusRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.SynMsgStatusRsp)
}

void SynMsgStatusRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynMsgStatusRsp::~SynMsgStatusRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.SynMsgStatusRsp)
  SharedDtor();
}

void SynMsgStatusRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SynMsgStatusRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SynMsgStatusRsp& SynMsgStatusRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fsndmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fsndmsg_2eproto();
#endif
  return *default_instance_;
}

SynMsgStatusRsp* SynMsgStatusRsp::default_instance_ = NULL;

SynMsgStatusRsp* SynMsgStatusRsp::New(::youmecommon::protobuf::Arena* arena) const {
  SynMsgStatusRsp* n = new SynMsgStatusRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SynMsgStatusRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SynMsgStatusRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, ret_);

#undef ZR_HELPER_
#undef ZR_

  recv_rsp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SynMsgStatusRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.SynMsgStatusRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_recv_rsp_list;
        break;
      }

      // repeated .YOUMEServiceProtocol.RecvTypeRsp recv_rsp_list = 3;
      case 3: {
        if (tag == 26) {
         parse_recv_rsp_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_recv_rsp_list:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_recv_rsp_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_recv_rsp_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.SynMsgStatusRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.SynMsgStatusRsp)
  return false;
#undef DO_
}

void SynMsgStatusRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.SynMsgStatusRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // repeated .YOUMEServiceProtocol.RecvTypeRsp recv_rsp_list = 3;
  for (unsigned int i = 0, n = this->recv_rsp_list_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->recv_rsp_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.SynMsgStatusRsp)
}

int SynMsgStatusRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  return total_size;
}
int SynMsgStatusRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .YOUMEServiceProtocol.RecvTypeRsp recv_rsp_list = 3;
  total_size += 1 * this->recv_rsp_list_size();
  for (int i = 0; i < this->recv_rsp_list_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recv_rsp_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynMsgStatusRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const SynMsgStatusRsp*>(&from));
}

void SynMsgStatusRsp::MergeFrom(const SynMsgStatusRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  recv_rsp_list_.MergeFrom(from.recv_rsp_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void SynMsgStatusRsp::CopyFrom(const SynMsgStatusRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynMsgStatusRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->recv_rsp_list())) return false;
  return true;
}

void SynMsgStatusRsp::Swap(SynMsgStatusRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SynMsgStatusRsp::InternalSwap(SynMsgStatusRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  recv_rsp_list_.UnsafeArenaSwap(&other->recv_rsp_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SynMsgStatusRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.SynMsgStatusRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SynMsgStatusRsp

// required int32 version = 1;
bool SynMsgStatusRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SynMsgStatusRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void SynMsgStatusRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void SynMsgStatusRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 SynMsgStatusRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SynMsgStatusRsp.version)
  return version_;
}
 void SynMsgStatusRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.SynMsgStatusRsp.version)
}

// required int32 ret = 2;
bool SynMsgStatusRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SynMsgStatusRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void SynMsgStatusRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void SynMsgStatusRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 SynMsgStatusRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SynMsgStatusRsp.ret)
  return ret_;
}
 void SynMsgStatusRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.SynMsgStatusRsp.ret)
}

// repeated .YOUMEServiceProtocol.RecvTypeRsp recv_rsp_list = 3;
int SynMsgStatusRsp::recv_rsp_list_size() const {
  return recv_rsp_list_.size();
}
void SynMsgStatusRsp::clear_recv_rsp_list() {
  recv_rsp_list_.Clear();
}
const ::YOUMEServiceProtocol::RecvTypeRsp& SynMsgStatusRsp::recv_rsp_list(int index) const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.SynMsgStatusRsp.recv_rsp_list)
  return recv_rsp_list_.Get(index);
}
::YOUMEServiceProtocol::RecvTypeRsp* SynMsgStatusRsp::mutable_recv_rsp_list(int index) {
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.SynMsgStatusRsp.recv_rsp_list)
  return recv_rsp_list_.Mutable(index);
}
::YOUMEServiceProtocol::RecvTypeRsp* SynMsgStatusRsp::add_recv_rsp_list() {
  // @@protoc_insertion_point(field_add:YOUMEServiceProtocol.SynMsgStatusRsp.recv_rsp_list)
  return recv_rsp_list_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::RecvTypeRsp >*
SynMsgStatusRsp::mutable_recv_rsp_list() {
  // @@protoc_insertion_point(field_mutable_list:YOUMEServiceProtocol.SynMsgStatusRsp.recv_rsp_list)
  return &recv_rsp_list_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::RecvTypeRsp >&
SynMsgStatusRsp::recv_rsp_list() const {
  // @@protoc_insertion_point(field_list:YOUMEServiceProtocol.SynMsgStatusRsp.recv_rsp_list)
  return recv_rsp_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RecvTypeRsp::kRecvIdFieldNumber;
const int RecvTypeRsp::kChatTypeFieldNumber;
const int RecvTypeRsp::kMsgIdFieldNumber;
const int RecvTypeRsp::kUnReadNumFieldNumber;
#endif  // !_MSC_VER

RecvTypeRsp::RecvTypeRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.RecvTypeRsp)
}

void RecvTypeRsp::InitAsDefaultInstance() {
}

RecvTypeRsp::RecvTypeRsp(const RecvTypeRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.RecvTypeRsp)
}

void RecvTypeRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_type_ = 0;
  msg_id_ = GOOGLE_ULONGLONG(0);
  un_read_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecvTypeRsp::~RecvTypeRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.RecvTypeRsp)
  SharedDtor();
}

void RecvTypeRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RecvTypeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RecvTypeRsp& RecvTypeRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fsndmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fsndmsg_2eproto();
#endif
  return *default_instance_;
}

RecvTypeRsp* RecvTypeRsp::default_instance_ = NULL;

RecvTypeRsp* RecvTypeRsp::New(::youmecommon::protobuf::Arena* arena) const {
  RecvTypeRsp* n = new RecvTypeRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecvTypeRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RecvTypeRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(msg_id_, un_read_num_);
    if (has_recv_id()) {
      recv_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RecvTypeRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.RecvTypeRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes recv_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_recv_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_chat_type;
        break;
      }

      // required int32 chat_type = 2;
      case 2: {
        if (tag == 16) {
         parse_chat_type:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_type_)));
          set_has_chat_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // required uint64 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_un_read_num;
        break;
      }

      // optional int32 un_read_num = 4;
      case 4: {
        if (tag == 32) {
         parse_un_read_num:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &un_read_num_)));
          set_has_un_read_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.RecvTypeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.RecvTypeRsp)
  return false;
#undef DO_
}

void RecvTypeRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.RecvTypeRsp)
  // required bytes recv_id = 1;
  if (has_recv_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->recv_id(), output);
  }

  // required int32 chat_type = 2;
  if (has_chat_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->chat_type(), output);
  }

  // required uint64 msg_id = 3;
  if (has_msg_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt64(3, this->msg_id(), output);
  }

  // optional int32 un_read_num = 4;
  if (has_un_read_num()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->un_read_num(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.RecvTypeRsp)
}

int RecvTypeRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_recv_id()) {
    // required bytes recv_id = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->recv_id());
  }

  if (has_chat_type()) {
    // required int32 chat_type = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->chat_type());
  }

  if (has_msg_id()) {
    // required uint64 msg_id = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->msg_id());
  }

  return total_size;
}
int RecvTypeRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes recv_id = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->recv_id());

    // required int32 chat_type = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->chat_type());

    // required uint64 msg_id = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->msg_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 un_read_num = 4;
  if (has_un_read_num()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->un_read_num());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecvTypeRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const RecvTypeRsp*>(&from));
}

void RecvTypeRsp::MergeFrom(const RecvTypeRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recv_id()) {
      set_has_recv_id();
      recv_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.recv_id_);
    }
    if (from.has_chat_type()) {
      set_chat_type(from.chat_type());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_un_read_num()) {
      set_un_read_num(from.un_read_num());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RecvTypeRsp::CopyFrom(const RecvTypeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvTypeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RecvTypeRsp::Swap(RecvTypeRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecvTypeRsp::InternalSwap(RecvTypeRsp* other) {
  recv_id_.Swap(&other->recv_id_);
  std::swap(chat_type_, other->chat_type_);
  std::swap(msg_id_, other->msg_id_);
  std::swap(un_read_num_, other->un_read_num_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RecvTypeRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.RecvTypeRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecvTypeRsp

// required bytes recv_id = 1;
bool RecvTypeRsp::has_recv_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RecvTypeRsp::set_has_recv_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RecvTypeRsp::clear_has_recv_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RecvTypeRsp::clear_recv_id() {
  recv_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_recv_id();
}
 const ::std::string& RecvTypeRsp::recv_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RecvTypeRsp.recv_id)
  return recv_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecvTypeRsp::set_recv_id(const ::std::string& value) {
  set_has_recv_id();
  recv_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RecvTypeRsp.recv_id)
}
 void RecvTypeRsp::set_recv_id(const char* value) {
  set_has_recv_id();
  recv_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RecvTypeRsp.recv_id)
}
 void RecvTypeRsp::set_recv_id(const void* value, size_t size) {
  set_has_recv_id();
  recv_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RecvTypeRsp.recv_id)
}
 ::std::string* RecvTypeRsp::mutable_recv_id() {
  set_has_recv_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RecvTypeRsp.recv_id)
  return recv_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecvTypeRsp::release_recv_id() {
  clear_has_recv_id();
  return recv_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecvTypeRsp::set_allocated_recv_id(::std::string* recv_id) {
  if (recv_id != NULL) {
    set_has_recv_id();
  } else {
    clear_has_recv_id();
  }
  recv_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), recv_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RecvTypeRsp.recv_id)
}

// required int32 chat_type = 2;
bool RecvTypeRsp::has_chat_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RecvTypeRsp::set_has_chat_type() {
  _has_bits_[0] |= 0x00000002u;
}
void RecvTypeRsp::clear_has_chat_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void RecvTypeRsp::clear_chat_type() {
  chat_type_ = 0;
  clear_has_chat_type();
}
 ::youmecommon::protobuf::int32 RecvTypeRsp::chat_type() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RecvTypeRsp.chat_type)
  return chat_type_;
}
 void RecvTypeRsp::set_chat_type(::youmecommon::protobuf::int32 value) {
  set_has_chat_type();
  chat_type_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RecvTypeRsp.chat_type)
}

// required uint64 msg_id = 3;
bool RecvTypeRsp::has_msg_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RecvTypeRsp::set_has_msg_id() {
  _has_bits_[0] |= 0x00000004u;
}
void RecvTypeRsp::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void RecvTypeRsp::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
  clear_has_msg_id();
}
 ::youmecommon::protobuf::uint64 RecvTypeRsp::msg_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RecvTypeRsp.msg_id)
  return msg_id_;
}
 void RecvTypeRsp::set_msg_id(::youmecommon::protobuf::uint64 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RecvTypeRsp.msg_id)
}

// optional int32 un_read_num = 4;
bool RecvTypeRsp::has_un_read_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RecvTypeRsp::set_has_un_read_num() {
  _has_bits_[0] |= 0x00000008u;
}
void RecvTypeRsp::clear_has_un_read_num() {
  _has_bits_[0] &= ~0x00000008u;
}
void RecvTypeRsp::clear_un_read_num() {
  un_read_num_ = 0;
  clear_has_un_read_num();
}
 ::youmecommon::protobuf::int32 RecvTypeRsp::un_read_num() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RecvTypeRsp.un_read_num)
  return un_read_num_;
}
 void RecvTypeRsp::set_un_read_num(::youmecommon::protobuf::int32 value) {
  set_has_un_read_num();
  un_read_num_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RecvTypeRsp.un_read_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YOUMEServiceProtocol

// @@protoc_insertion_point(global_scope)
