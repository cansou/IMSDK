// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youme_rc_comm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "youme_rc_comm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YOUMEServiceProtocol {

void protobuf_ShutdownFile_youme_5frc_5fcomm_2eproto() {
  delete RcFriendBriefInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_youme_5frc_5fcomm_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_youme_5frc_5fcomm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::YOUMEServiceProtocol::protobuf_AddDesc_youme_5frcuserinfo_2eproto();
  RcFriendBriefInfo::default_instance_ = new RcFriendBriefInfo();
  RcFriendBriefInfo::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_youme_5frc_5fcomm_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_youme_5frc_5fcomm_2eproto_once_);
void protobuf_AddDesc_youme_5frc_5fcomm_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_youme_5frc_5fcomm_2eproto_once_,
                 &protobuf_AddDesc_youme_5frc_5fcomm_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_youme_5frc_5fcomm_2eproto {
  StaticDescriptorInitializer_youme_5frc_5fcomm_2eproto() {
    protobuf_AddDesc_youme_5frc_5fcomm_2eproto();
  }
} static_descriptor_initializer_youme_5frc_5fcomm_2eproto_;
#endif
bool RC_FRIEND_REQ_STATE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

bool RC_FRIEND_REQ_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

bool RC_STATE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int RcFriendBriefInfo::kUserIdFieldNumber;
const int RcFriendBriefInfo::kNicknameFieldNumber;
const int RcFriendBriefInfo::kOnlineStateFieldNumber;
#endif  // !_MSC_VER

RcFriendBriefInfo::RcFriendBriefInfo()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.RcFriendBriefInfo)
}

void RcFriendBriefInfo::InitAsDefaultInstance() {
}

RcFriendBriefInfo::RcFriendBriefInfo(const RcFriendBriefInfo& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.RcFriendBriefInfo)
}

void RcFriendBriefInfo::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  online_state_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RcFriendBriefInfo::~RcFriendBriefInfo() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.RcFriendBriefInfo)
  SharedDtor();
}

void RcFriendBriefInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RcFriendBriefInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RcFriendBriefInfo& RcFriendBriefInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fcomm_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fcomm_2eproto();
#endif
  return *default_instance_;
}

RcFriendBriefInfo* RcFriendBriefInfo::default_instance_ = NULL;

RcFriendBriefInfo* RcFriendBriefInfo::New(::youmecommon::protobuf::Arena* arena) const {
  RcFriendBriefInfo* n = new RcFriendBriefInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RcFriendBriefInfo::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_nickname()) {
      nickname_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    online_state_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RcFriendBriefInfo::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.RcFriendBriefInfo)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional bytes nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_online_state;
        break;
      }

      // optional .YOUMEServiceProtocol.RC_ONLINE_STATE online_state = 3;
      case 3: {
        if (tag == 24) {
         parse_online_state:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YOUMEServiceProtocol::RC_ONLINE_STATE_IsValid(value)) {
            set_online_state(static_cast< ::YOUMEServiceProtocol::RC_ONLINE_STATE >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.RcFriendBriefInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.RcFriendBriefInfo)
  return false;
#undef DO_
}

void RcFriendBriefInfo::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.RcFriendBriefInfo)
  // required bytes user_id = 1;
  if (has_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_id(), output);
  }

  // optional bytes nickname = 2;
  if (has_nickname()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->nickname(), output);
  }

  // optional .YOUMEServiceProtocol.RC_ONLINE_STATE online_state = 3;
  if (has_online_state()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->online_state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.RcFriendBriefInfo)
}

int RcFriendBriefInfo::ByteSize() const {
  int total_size = 0;

  // required bytes user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional bytes nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
          this->nickname());
    }

    // optional .YOUMEServiceProtocol.RC_ONLINE_STATE online_state = 3;
    if (has_online_state()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->online_state());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RcFriendBriefInfo::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const RcFriendBriefInfo*>(&from));
}

void RcFriendBriefInfo::MergeFrom(const RcFriendBriefInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_online_state()) {
      set_online_state(from.online_state());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RcFriendBriefInfo::CopyFrom(const RcFriendBriefInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RcFriendBriefInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RcFriendBriefInfo::Swap(RcFriendBriefInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RcFriendBriefInfo::InternalSwap(RcFriendBriefInfo* other) {
  user_id_.Swap(&other->user_id_);
  nickname_.Swap(&other->nickname_);
  std::swap(online_state_, other->online_state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RcFriendBriefInfo::GetTypeName() const {
  return "YOUMEServiceProtocol.RcFriendBriefInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RcFriendBriefInfo

// required bytes user_id = 1;
bool RcFriendBriefInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RcFriendBriefInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RcFriendBriefInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RcFriendBriefInfo::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& RcFriendBriefInfo::user_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendBriefInfo.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendBriefInfo::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendBriefInfo.user_id)
}
 void RcFriendBriefInfo::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcFriendBriefInfo.user_id)
}
 void RcFriendBriefInfo::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcFriendBriefInfo.user_id)
}
 ::std::string* RcFriendBriefInfo::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcFriendBriefInfo.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcFriendBriefInfo::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendBriefInfo::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcFriendBriefInfo.user_id)
}

// optional bytes nickname = 2;
bool RcFriendBriefInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RcFriendBriefInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void RcFriendBriefInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void RcFriendBriefInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
 const ::std::string& RcFriendBriefInfo::nickname() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendBriefInfo.nickname)
  return nickname_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendBriefInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendBriefInfo.nickname)
}
 void RcFriendBriefInfo::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcFriendBriefInfo.nickname)
}
 void RcFriendBriefInfo::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcFriendBriefInfo.nickname)
}
 ::std::string* RcFriendBriefInfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcFriendBriefInfo.nickname)
  return nickname_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcFriendBriefInfo::release_nickname() {
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendBriefInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcFriendBriefInfo.nickname)
}

// optional .YOUMEServiceProtocol.RC_ONLINE_STATE online_state = 3;
bool RcFriendBriefInfo::has_online_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RcFriendBriefInfo::set_has_online_state() {
  _has_bits_[0] |= 0x00000004u;
}
void RcFriendBriefInfo::clear_has_online_state() {
  _has_bits_[0] &= ~0x00000004u;
}
void RcFriendBriefInfo::clear_online_state() {
  online_state_ = 1;
  clear_has_online_state();
}
 ::YOUMEServiceProtocol::RC_ONLINE_STATE RcFriendBriefInfo::online_state() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendBriefInfo.online_state)
  return static_cast< ::YOUMEServiceProtocol::RC_ONLINE_STATE >(online_state_);
}
 void RcFriendBriefInfo::set_online_state(::YOUMEServiceProtocol::RC_ONLINE_STATE value) {
  assert(::YOUMEServiceProtocol::RC_ONLINE_STATE_IsValid(value));
  set_has_online_state();
  online_state_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendBriefInfo.online_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YOUMEServiceProtocol

// @@protoc_insertion_point(global_scope)
