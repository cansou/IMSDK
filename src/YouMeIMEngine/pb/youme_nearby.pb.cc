// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youme_nearby.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "youme_nearby.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YOUMEServiceProtocol {

void protobuf_ShutdownFile_youme_5fnearby_2eproto() {
  delete GetNearbyUserReq::default_instance_;
  delete YoumeUserLocation::default_instance_;
  delete GetNearbyUserRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_youme_5fnearby_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_youme_5fnearby_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::YOUMECommonProtocol::protobuf_AddDesc_youme_5fcomm_2eproto();
  GetNearbyUserReq::default_instance_ = new GetNearbyUserReq();
  YoumeUserLocation::default_instance_ = new YoumeUserLocation();
  GetNearbyUserRsp::default_instance_ = new GetNearbyUserRsp();
  GetNearbyUserReq::default_instance_->InitAsDefaultInstance();
  YoumeUserLocation::default_instance_->InitAsDefaultInstance();
  GetNearbyUserRsp::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_youme_5fnearby_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_youme_5fnearby_2eproto_once_);
void protobuf_AddDesc_youme_5fnearby_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_youme_5fnearby_2eproto_once_,
                 &protobuf_AddDesc_youme_5fnearby_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_youme_5fnearby_2eproto {
  StaticDescriptorInitializer_youme_5fnearby_2eproto() {
    protobuf_AddDesc_youme_5fnearby_2eproto();
  }
} static_descriptor_initializer_youme_5fnearby_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int GetNearbyUserReq::kVersionFieldNumber;
const int GetNearbyUserReq::kLongitudeFieldNumber;
const int GetNearbyUserReq::kLatitudeFieldNumber;
const int GetNearbyUserReq::kDistrictNameFieldNumber;
const int GetNearbyUserReq::kAdcodeFieldNumber;
const int GetNearbyUserReq::kNumberLimitFieldNumber;
const int GetNearbyUserReq::kMaxDistanceLimitFieldNumber;
const int GetNearbyUserReq::kMinDistanceLimitFieldNumber;
const int GetNearbyUserReq::kDistrictLevelFieldNumber;
const int GetNearbyUserReq::kWhereAdcodeFieldNumber;
const int GetNearbyUserReq::kServiceAreaIdFieldNumber;
#endif  // !_MSC_VER

GetNearbyUserReq::GetNearbyUserReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.GetNearbyUserReq)
}

void GetNearbyUserReq::InitAsDefaultInstance() {
}

GetNearbyUserReq::GetNearbyUserReq(const GetNearbyUserReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.GetNearbyUserReq)
}

void GetNearbyUserReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  longitude_ = 0;
  latitude_ = 0;
  district_name_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  adcode_ = 0u;
  number_limit_ = 0u;
  max_distance_limit_ = 0u;
  min_distance_limit_ = 0;
  district_level_ = 1;
  where_adcode_ = 0u;
  service_area_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNearbyUserReq::~GetNearbyUserReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.GetNearbyUserReq)
  SharedDtor();
}

void GetNearbyUserReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  district_name_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  service_area_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetNearbyUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetNearbyUserReq& GetNearbyUserReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fnearby_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fnearby_2eproto();
#endif
  return *default_instance_;
}

GetNearbyUserReq* GetNearbyUserReq::default_instance_ = NULL;

GetNearbyUserReq* GetNearbyUserReq::New(::youmecommon::protobuf::Arena* arena) const {
  GetNearbyUserReq* n = new GetNearbyUserReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNearbyUserReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetNearbyUserReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(longitude_, adcode_);
    ZR_(number_limit_, min_distance_limit_);
    if (has_district_name()) {
      district_name_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    district_level_ = 1;
    where_adcode_ = 0u;
    if (has_service_area_id()) {
      service_area_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetNearbyUserReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.GetNearbyUserReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_longitude;
        break;
      }

      // required double longitude = 2;
      case 2: {
        if (tag == 17) {
         parse_longitude:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_latitude;
        break;
      }

      // required double latitude = 3;
      case 3: {
        if (tag == 25) {
         parse_latitude:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_district_name;
        break;
      }

      // required string district_name = 4;
      case 4: {
        if (tag == 34) {
         parse_district_name:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_district_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_adcode;
        break;
      }

      // required uint32 adcode = 5;
      case 5: {
        if (tag == 40) {
         parse_adcode:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adcode_)));
          set_has_adcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_number_limit;
        break;
      }

      // required uint32 number_limit = 6;
      case 6: {
        if (tag == 48) {
         parse_number_limit:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_limit_)));
          set_has_number_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_max_distance_limit;
        break;
      }

      // optional uint32 max_distance_limit = 7;
      case 7: {
        if (tag == 56) {
         parse_max_distance_limit:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_distance_limit_)));
          set_has_max_distance_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_min_distance_limit;
        break;
      }

      // optional double min_distance_limit = 8;
      case 8: {
        if (tag == 65) {
         parse_min_distance_limit:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_distance_limit_)));
          set_has_min_distance_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_district_level;
        break;
      }

      // optional .YOUMECommonProtocol.DistrictLevel district_level = 9;
      case 9: {
        if (tag == 72) {
         parse_district_level:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YOUMECommonProtocol::DistrictLevel_IsValid(value)) {
            set_district_level(static_cast< ::YOUMECommonProtocol::DistrictLevel >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_where_adcode;
        break;
      }

      // optional uint32 where_adcode = 10;
      case 10: {
        if (tag == 80) {
         parse_where_adcode:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &where_adcode_)));
          set_has_where_adcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_service_area_id;
        break;
      }

      // optional string service_area_id = 11;
      case 11: {
        if (tag == 90) {
         parse_service_area_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_area_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.GetNearbyUserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.GetNearbyUserReq)
  return false;
#undef DO_
}

void GetNearbyUserReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.GetNearbyUserReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required double longitude = 2;
  if (has_longitude()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // required double latitude = 3;
  if (has_latitude()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  // required string district_name = 4;
  if (has_district_name()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->district_name(), output);
  }

  // required uint32 adcode = 5;
  if (has_adcode()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(5, this->adcode(), output);
  }

  // required uint32 number_limit = 6;
  if (has_number_limit()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(6, this->number_limit(), output);
  }

  // optional uint32 max_distance_limit = 7;
  if (has_max_distance_limit()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max_distance_limit(), output);
  }

  // optional double min_distance_limit = 8;
  if (has_min_distance_limit()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteDouble(8, this->min_distance_limit(), output);
  }

  // optional .YOUMECommonProtocol.DistrictLevel district_level = 9;
  if (has_district_level()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->district_level(), output);
  }

  // optional uint32 where_adcode = 10;
  if (has_where_adcode()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(10, this->where_adcode(), output);
  }

  // optional string service_area_id = 11;
  if (has_service_area_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->service_area_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.GetNearbyUserReq)
}

int GetNearbyUserReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_longitude()) {
    // required double longitude = 2;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 3;
    total_size += 1 + 8;
  }

  if (has_district_name()) {
    // required string district_name = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->district_name());
  }

  if (has_adcode()) {
    // required uint32 adcode = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->adcode());
  }

  if (has_number_limit()) {
    // required uint32 number_limit = 6;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_limit());
  }

  return total_size;
}
int GetNearbyUserReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required double longitude = 2;
    total_size += 1 + 8;

    // required double latitude = 3;
    total_size += 1 + 8;

    // required string district_name = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->district_name());

    // required uint32 adcode = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->adcode());

    // required uint32 number_limit = 6;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_limit());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[6 / 32] & 192u) {
    // optional uint32 max_distance_limit = 7;
    if (has_max_distance_limit()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_distance_limit());
    }

    // optional double min_distance_limit = 8;
    if (has_min_distance_limit()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional .YOUMECommonProtocol.DistrictLevel district_level = 9;
    if (has_district_level()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->district_level());
    }

    // optional uint32 where_adcode = 10;
    if (has_where_adcode()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
          this->where_adcode());
    }

    // optional string service_area_id = 11;
    if (has_service_area_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->service_area_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNearbyUserReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetNearbyUserReq*>(&from));
}

void GetNearbyUserReq::MergeFrom(const GetNearbyUserReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_district_name()) {
      set_has_district_name();
      district_name_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.district_name_);
    }
    if (from.has_adcode()) {
      set_adcode(from.adcode());
    }
    if (from.has_number_limit()) {
      set_number_limit(from.number_limit());
    }
    if (from.has_max_distance_limit()) {
      set_max_distance_limit(from.max_distance_limit());
    }
    if (from.has_min_distance_limit()) {
      set_min_distance_limit(from.min_distance_limit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_district_level()) {
      set_district_level(from.district_level());
    }
    if (from.has_where_adcode()) {
      set_where_adcode(from.where_adcode());
    }
    if (from.has_service_area_id()) {
      set_has_service_area_id();
      service_area_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_area_id_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetNearbyUserReq::CopyFrom(const GetNearbyUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNearbyUserReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GetNearbyUserReq::Swap(GetNearbyUserReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNearbyUserReq::InternalSwap(GetNearbyUserReq* other) {
  std::swap(version_, other->version_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  district_name_.Swap(&other->district_name_);
  std::swap(adcode_, other->adcode_);
  std::swap(number_limit_, other->number_limit_);
  std::swap(max_distance_limit_, other->max_distance_limit_);
  std::swap(min_distance_limit_, other->min_distance_limit_);
  std::swap(district_level_, other->district_level_);
  std::swap(where_adcode_, other->where_adcode_);
  service_area_id_.Swap(&other->service_area_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetNearbyUserReq::GetTypeName() const {
  return "YOUMEServiceProtocol.GetNearbyUserReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetNearbyUserReq

// required int32 version = 1;
bool GetNearbyUserReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetNearbyUserReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GetNearbyUserReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetNearbyUserReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 GetNearbyUserReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetNearbyUserReq.version)
  return version_;
}
 void GetNearbyUserReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetNearbyUserReq.version)
}

// required double longitude = 2;
bool GetNearbyUserReq::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetNearbyUserReq::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
void GetNearbyUserReq::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetNearbyUserReq::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
 double GetNearbyUserReq::longitude() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetNearbyUserReq.longitude)
  return longitude_;
}
 void GetNearbyUserReq::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetNearbyUserReq.longitude)
}

// required double latitude = 3;
bool GetNearbyUserReq::has_latitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetNearbyUserReq::set_has_latitude() {
  _has_bits_[0] |= 0x00000004u;
}
void GetNearbyUserReq::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetNearbyUserReq::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
 double GetNearbyUserReq::latitude() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetNearbyUserReq.latitude)
  return latitude_;
}
 void GetNearbyUserReq::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetNearbyUserReq.latitude)
}

// required string district_name = 4;
bool GetNearbyUserReq::has_district_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetNearbyUserReq::set_has_district_name() {
  _has_bits_[0] |= 0x00000008u;
}
void GetNearbyUserReq::clear_has_district_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetNearbyUserReq::clear_district_name() {
  district_name_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_district_name();
}
 const ::std::string& GetNearbyUserReq::district_name() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetNearbyUserReq.district_name)
  return district_name_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetNearbyUserReq::set_district_name(const ::std::string& value) {
  set_has_district_name();
  district_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetNearbyUserReq.district_name)
}
 void GetNearbyUserReq::set_district_name(const char* value) {
  set_has_district_name();
  district_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.GetNearbyUserReq.district_name)
}
 void GetNearbyUserReq::set_district_name(const char* value, size_t size) {
  set_has_district_name();
  district_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.GetNearbyUserReq.district_name)
}
 ::std::string* GetNearbyUserReq::mutable_district_name() {
  set_has_district_name();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.GetNearbyUserReq.district_name)
  return district_name_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetNearbyUserReq::release_district_name() {
  clear_has_district_name();
  return district_name_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetNearbyUserReq::set_allocated_district_name(::std::string* district_name) {
  if (district_name != NULL) {
    set_has_district_name();
  } else {
    clear_has_district_name();
  }
  district_name_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), district_name);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.GetNearbyUserReq.district_name)
}

// required uint32 adcode = 5;
bool GetNearbyUserReq::has_adcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetNearbyUserReq::set_has_adcode() {
  _has_bits_[0] |= 0x00000010u;
}
void GetNearbyUserReq::clear_has_adcode() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetNearbyUserReq::clear_adcode() {
  adcode_ = 0u;
  clear_has_adcode();
}
 ::youmecommon::protobuf::uint32 GetNearbyUserReq::adcode() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetNearbyUserReq.adcode)
  return adcode_;
}
 void GetNearbyUserReq::set_adcode(::youmecommon::protobuf::uint32 value) {
  set_has_adcode();
  adcode_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetNearbyUserReq.adcode)
}

// required uint32 number_limit = 6;
bool GetNearbyUserReq::has_number_limit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetNearbyUserReq::set_has_number_limit() {
  _has_bits_[0] |= 0x00000020u;
}
void GetNearbyUserReq::clear_has_number_limit() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetNearbyUserReq::clear_number_limit() {
  number_limit_ = 0u;
  clear_has_number_limit();
}
 ::youmecommon::protobuf::uint32 GetNearbyUserReq::number_limit() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetNearbyUserReq.number_limit)
  return number_limit_;
}
 void GetNearbyUserReq::set_number_limit(::youmecommon::protobuf::uint32 value) {
  set_has_number_limit();
  number_limit_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetNearbyUserReq.number_limit)
}

// optional uint32 max_distance_limit = 7;
bool GetNearbyUserReq::has_max_distance_limit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GetNearbyUserReq::set_has_max_distance_limit() {
  _has_bits_[0] |= 0x00000040u;
}
void GetNearbyUserReq::clear_has_max_distance_limit() {
  _has_bits_[0] &= ~0x00000040u;
}
void GetNearbyUserReq::clear_max_distance_limit() {
  max_distance_limit_ = 0u;
  clear_has_max_distance_limit();
}
 ::youmecommon::protobuf::uint32 GetNearbyUserReq::max_distance_limit() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetNearbyUserReq.max_distance_limit)
  return max_distance_limit_;
}
 void GetNearbyUserReq::set_max_distance_limit(::youmecommon::protobuf::uint32 value) {
  set_has_max_distance_limit();
  max_distance_limit_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetNearbyUserReq.max_distance_limit)
}

// optional double min_distance_limit = 8;
bool GetNearbyUserReq::has_min_distance_limit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GetNearbyUserReq::set_has_min_distance_limit() {
  _has_bits_[0] |= 0x00000080u;
}
void GetNearbyUserReq::clear_has_min_distance_limit() {
  _has_bits_[0] &= ~0x00000080u;
}
void GetNearbyUserReq::clear_min_distance_limit() {
  min_distance_limit_ = 0;
  clear_has_min_distance_limit();
}
 double GetNearbyUserReq::min_distance_limit() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetNearbyUserReq.min_distance_limit)
  return min_distance_limit_;
}
 void GetNearbyUserReq::set_min_distance_limit(double value) {
  set_has_min_distance_limit();
  min_distance_limit_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetNearbyUserReq.min_distance_limit)
}

// optional .YOUMECommonProtocol.DistrictLevel district_level = 9;
bool GetNearbyUserReq::has_district_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GetNearbyUserReq::set_has_district_level() {
  _has_bits_[0] |= 0x00000100u;
}
void GetNearbyUserReq::clear_has_district_level() {
  _has_bits_[0] &= ~0x00000100u;
}
void GetNearbyUserReq::clear_district_level() {
  district_level_ = 1;
  clear_has_district_level();
}
 ::YOUMECommonProtocol::DistrictLevel GetNearbyUserReq::district_level() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetNearbyUserReq.district_level)
  return static_cast< ::YOUMECommonProtocol::DistrictLevel >(district_level_);
}
 void GetNearbyUserReq::set_district_level(::YOUMECommonProtocol::DistrictLevel value) {
  assert(::YOUMECommonProtocol::DistrictLevel_IsValid(value));
  set_has_district_level();
  district_level_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetNearbyUserReq.district_level)
}

// optional uint32 where_adcode = 10;
bool GetNearbyUserReq::has_where_adcode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void GetNearbyUserReq::set_has_where_adcode() {
  _has_bits_[0] |= 0x00000200u;
}
void GetNearbyUserReq::clear_has_where_adcode() {
  _has_bits_[0] &= ~0x00000200u;
}
void GetNearbyUserReq::clear_where_adcode() {
  where_adcode_ = 0u;
  clear_has_where_adcode();
}
 ::youmecommon::protobuf::uint32 GetNearbyUserReq::where_adcode() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetNearbyUserReq.where_adcode)
  return where_adcode_;
}
 void GetNearbyUserReq::set_where_adcode(::youmecommon::protobuf::uint32 value) {
  set_has_where_adcode();
  where_adcode_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetNearbyUserReq.where_adcode)
}

// optional string service_area_id = 11;
bool GetNearbyUserReq::has_service_area_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void GetNearbyUserReq::set_has_service_area_id() {
  _has_bits_[0] |= 0x00000400u;
}
void GetNearbyUserReq::clear_has_service_area_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void GetNearbyUserReq::clear_service_area_id() {
  service_area_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service_area_id();
}
 const ::std::string& GetNearbyUserReq::service_area_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetNearbyUserReq.service_area_id)
  return service_area_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetNearbyUserReq::set_service_area_id(const ::std::string& value) {
  set_has_service_area_id();
  service_area_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetNearbyUserReq.service_area_id)
}
 void GetNearbyUserReq::set_service_area_id(const char* value) {
  set_has_service_area_id();
  service_area_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.GetNearbyUserReq.service_area_id)
}
 void GetNearbyUserReq::set_service_area_id(const char* value, size_t size) {
  set_has_service_area_id();
  service_area_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.GetNearbyUserReq.service_area_id)
}
 ::std::string* GetNearbyUserReq::mutable_service_area_id() {
  set_has_service_area_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.GetNearbyUserReq.service_area_id)
  return service_area_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetNearbyUserReq::release_service_area_id() {
  clear_has_service_area_id();
  return service_area_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetNearbyUserReq::set_allocated_service_area_id(::std::string* service_area_id) {
  if (service_area_id != NULL) {
    set_has_service_area_id();
  } else {
    clear_has_service_area_id();
  }
  service_area_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), service_area_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.GetNearbyUserReq.service_area_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YoumeUserLocation::kUserIdFieldNumber;
const int YoumeUserLocation::kLongitudeFieldNumber;
const int YoumeUserLocation::kLatitudeFieldNumber;
const int YoumeUserLocation::kDistrictNameFieldNumber;
const int YoumeUserLocation::kAdcodeFieldNumber;
const int YoumeUserLocation::kDistrictLevelFieldNumber;
const int YoumeUserLocation::kDistanceFieldNumber;
#endif  // !_MSC_VER

YoumeUserLocation::YoumeUserLocation()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.YoumeUserLocation)
}

void YoumeUserLocation::InitAsDefaultInstance() {
}

YoumeUserLocation::YoumeUserLocation(const YoumeUserLocation& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.YoumeUserLocation)
}

void YoumeUserLocation::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  longitude_ = 0;
  latitude_ = 0;
  district_name_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  adcode_ = 0u;
  district_level_ = 1;
  distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YoumeUserLocation::~YoumeUserLocation() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.YoumeUserLocation)
  SharedDtor();
}

void YoumeUserLocation::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  district_name_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void YoumeUserLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YoumeUserLocation& YoumeUserLocation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fnearby_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fnearby_2eproto();
#endif
  return *default_instance_;
}

YoumeUserLocation* YoumeUserLocation::default_instance_ = NULL;

YoumeUserLocation* YoumeUserLocation::New(::youmecommon::protobuf::Arena* arena) const {
  YoumeUserLocation* n = new YoumeUserLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YoumeUserLocation::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YoumeUserLocation*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(longitude_, latitude_);
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_district_name()) {
      district_name_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    adcode_ = 0u;
    district_level_ = 1;
    distance_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YoumeUserLocation::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.YoumeUserLocation)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_longitude;
        break;
      }

      // required double longitude = 2;
      case 2: {
        if (tag == 17) {
         parse_longitude:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_latitude;
        break;
      }

      // required double latitude = 3;
      case 3: {
        if (tag == 25) {
         parse_latitude:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_district_name;
        break;
      }

      // required string district_name = 4;
      case 4: {
        if (tag == 34) {
         parse_district_name:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_district_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_adcode;
        break;
      }

      // required uint32 adcode = 5;
      case 5: {
        if (tag == 40) {
         parse_adcode:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adcode_)));
          set_has_adcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_district_level;
        break;
      }

      // required .YOUMECommonProtocol.DistrictLevel district_level = 6;
      case 6: {
        if (tag == 48) {
         parse_district_level:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YOUMECommonProtocol::DistrictLevel_IsValid(value)) {
            set_district_level(static_cast< ::YOUMECommonProtocol::DistrictLevel >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_distance;
        break;
      }

      // required double distance = 7;
      case 7: {
        if (tag == 57) {
         parse_distance:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.YoumeUserLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.YoumeUserLocation)
  return false;
#undef DO_
}

void YoumeUserLocation::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.YoumeUserLocation)
  // required bytes user_id = 1;
  if (has_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_id(), output);
  }

  // required double longitude = 2;
  if (has_longitude()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // required double latitude = 3;
  if (has_latitude()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  // required string district_name = 4;
  if (has_district_name()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->district_name(), output);
  }

  // required uint32 adcode = 5;
  if (has_adcode()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(5, this->adcode(), output);
  }

  // required .YOUMECommonProtocol.DistrictLevel district_level = 6;
  if (has_district_level()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->district_level(), output);
  }

  // required double distance = 7;
  if (has_distance()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteDouble(7, this->distance(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.YoumeUserLocation)
}

int YoumeUserLocation::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_user_id()) {
    // required bytes user_id = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());
  }

  if (has_longitude()) {
    // required double longitude = 2;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 3;
    total_size += 1 + 8;
  }

  if (has_district_name()) {
    // required string district_name = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->district_name());
  }

  if (has_adcode()) {
    // required uint32 adcode = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->adcode());
  }

  if (has_district_level()) {
    // required .YOUMECommonProtocol.DistrictLevel district_level = 6;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->district_level());
  }

  if (has_distance()) {
    // required double distance = 7;
    total_size += 1 + 8;
  }

  return total_size;
}
int YoumeUserLocation::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required bytes user_id = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());

    // required double longitude = 2;
    total_size += 1 + 8;

    // required double latitude = 3;
    total_size += 1 + 8;

    // required string district_name = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->district_name());

    // required uint32 adcode = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->adcode());

    // required .YOUMECommonProtocol.DistrictLevel district_level = 6;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->district_level());

    // required double distance = 7;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YoumeUserLocation::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YoumeUserLocation*>(&from));
}

void YoumeUserLocation::MergeFrom(const YoumeUserLocation& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_district_name()) {
      set_has_district_name();
      district_name_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.district_name_);
    }
    if (from.has_adcode()) {
      set_adcode(from.adcode());
    }
    if (from.has_district_level()) {
      set_district_level(from.district_level());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YoumeUserLocation::CopyFrom(const YoumeUserLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YoumeUserLocation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void YoumeUserLocation::Swap(YoumeUserLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YoumeUserLocation::InternalSwap(YoumeUserLocation* other) {
  user_id_.Swap(&other->user_id_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  district_name_.Swap(&other->district_name_);
  std::swap(adcode_, other->adcode_);
  std::swap(district_level_, other->district_level_);
  std::swap(distance_, other->distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YoumeUserLocation::GetTypeName() const {
  return "YOUMEServiceProtocol.YoumeUserLocation";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YoumeUserLocation

// required bytes user_id = 1;
bool YoumeUserLocation::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YoumeUserLocation::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void YoumeUserLocation::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void YoumeUserLocation::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& YoumeUserLocation::user_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeUserLocation.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YoumeUserLocation::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeUserLocation.user_id)
}
 void YoumeUserLocation::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.YoumeUserLocation.user_id)
}
 void YoumeUserLocation::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.YoumeUserLocation.user_id)
}
 ::std::string* YoumeUserLocation::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.YoumeUserLocation.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YoumeUserLocation::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YoumeUserLocation::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.YoumeUserLocation.user_id)
}

// required double longitude = 2;
bool YoumeUserLocation::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YoumeUserLocation::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
void YoumeUserLocation::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
void YoumeUserLocation::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
 double YoumeUserLocation::longitude() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeUserLocation.longitude)
  return longitude_;
}
 void YoumeUserLocation::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeUserLocation.longitude)
}

// required double latitude = 3;
bool YoumeUserLocation::has_latitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YoumeUserLocation::set_has_latitude() {
  _has_bits_[0] |= 0x00000004u;
}
void YoumeUserLocation::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000004u;
}
void YoumeUserLocation::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
 double YoumeUserLocation::latitude() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeUserLocation.latitude)
  return latitude_;
}
 void YoumeUserLocation::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeUserLocation.latitude)
}

// required string district_name = 4;
bool YoumeUserLocation::has_district_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YoumeUserLocation::set_has_district_name() {
  _has_bits_[0] |= 0x00000008u;
}
void YoumeUserLocation::clear_has_district_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void YoumeUserLocation::clear_district_name() {
  district_name_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_district_name();
}
 const ::std::string& YoumeUserLocation::district_name() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeUserLocation.district_name)
  return district_name_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YoumeUserLocation::set_district_name(const ::std::string& value) {
  set_has_district_name();
  district_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeUserLocation.district_name)
}
 void YoumeUserLocation::set_district_name(const char* value) {
  set_has_district_name();
  district_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.YoumeUserLocation.district_name)
}
 void YoumeUserLocation::set_district_name(const char* value, size_t size) {
  set_has_district_name();
  district_name_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.YoumeUserLocation.district_name)
}
 ::std::string* YoumeUserLocation::mutable_district_name() {
  set_has_district_name();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.YoumeUserLocation.district_name)
  return district_name_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YoumeUserLocation::release_district_name() {
  clear_has_district_name();
  return district_name_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YoumeUserLocation::set_allocated_district_name(::std::string* district_name) {
  if (district_name != NULL) {
    set_has_district_name();
  } else {
    clear_has_district_name();
  }
  district_name_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), district_name);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.YoumeUserLocation.district_name)
}

// required uint32 adcode = 5;
bool YoumeUserLocation::has_adcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YoumeUserLocation::set_has_adcode() {
  _has_bits_[0] |= 0x00000010u;
}
void YoumeUserLocation::clear_has_adcode() {
  _has_bits_[0] &= ~0x00000010u;
}
void YoumeUserLocation::clear_adcode() {
  adcode_ = 0u;
  clear_has_adcode();
}
 ::youmecommon::protobuf::uint32 YoumeUserLocation::adcode() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeUserLocation.adcode)
  return adcode_;
}
 void YoumeUserLocation::set_adcode(::youmecommon::protobuf::uint32 value) {
  set_has_adcode();
  adcode_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeUserLocation.adcode)
}

// required .YOUMECommonProtocol.DistrictLevel district_level = 6;
bool YoumeUserLocation::has_district_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YoumeUserLocation::set_has_district_level() {
  _has_bits_[0] |= 0x00000020u;
}
void YoumeUserLocation::clear_has_district_level() {
  _has_bits_[0] &= ~0x00000020u;
}
void YoumeUserLocation::clear_district_level() {
  district_level_ = 1;
  clear_has_district_level();
}
 ::YOUMECommonProtocol::DistrictLevel YoumeUserLocation::district_level() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeUserLocation.district_level)
  return static_cast< ::YOUMECommonProtocol::DistrictLevel >(district_level_);
}
 void YoumeUserLocation::set_district_level(::YOUMECommonProtocol::DistrictLevel value) {
  assert(::YOUMECommonProtocol::DistrictLevel_IsValid(value));
  set_has_district_level();
  district_level_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeUserLocation.district_level)
}

// required double distance = 7;
bool YoumeUserLocation::has_distance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void YoumeUserLocation::set_has_distance() {
  _has_bits_[0] |= 0x00000040u;
}
void YoumeUserLocation::clear_has_distance() {
  _has_bits_[0] &= ~0x00000040u;
}
void YoumeUserLocation::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
 double YoumeUserLocation::distance() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.YoumeUserLocation.distance)
  return distance_;
}
 void YoumeUserLocation::set_distance(double value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.YoumeUserLocation.distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetNearbyUserRsp::kVersionFieldNumber;
const int GetNearbyUserRsp::kRetFieldNumber;
const int GetNearbyUserRsp::kPeopleCntFieldNumber;
const int GetNearbyUserRsp::kPeopleListFieldNumber;
#endif  // !_MSC_VER

GetNearbyUserRsp::GetNearbyUserRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.GetNearbyUserRsp)
}

void GetNearbyUserRsp::InitAsDefaultInstance() {
}

GetNearbyUserRsp::GetNearbyUserRsp(const GetNearbyUserRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.GetNearbyUserRsp)
}

void GetNearbyUserRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  people_cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNearbyUserRsp::~GetNearbyUserRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.GetNearbyUserRsp)
  SharedDtor();
}

void GetNearbyUserRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetNearbyUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetNearbyUserRsp& GetNearbyUserRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fnearby_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fnearby_2eproto();
#endif
  return *default_instance_;
}

GetNearbyUserRsp* GetNearbyUserRsp::default_instance_ = NULL;

GetNearbyUserRsp* GetNearbyUserRsp::New(::youmecommon::protobuf::Arena* arena) const {
  GetNearbyUserRsp* n = new GetNearbyUserRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNearbyUserRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetNearbyUserRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(version_, ret_);
    people_cnt_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  people_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetNearbyUserRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.GetNearbyUserRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_people_cnt;
        break;
      }

      // required uint32 people_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_people_cnt:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &people_cnt_)));
          set_has_people_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_people_list;
        break;
      }

      // repeated .YOUMEServiceProtocol.YoumeUserLocation people_list = 4;
      case 4: {
        if (tag == 34) {
         parse_people_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_people_list:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_people_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_people_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.GetNearbyUserRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.GetNearbyUserRsp)
  return false;
#undef DO_
}

void GetNearbyUserRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.GetNearbyUserRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // required uint32 people_cnt = 3;
  if (has_people_cnt()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(3, this->people_cnt(), output);
  }

  // repeated .YOUMEServiceProtocol.YoumeUserLocation people_list = 4;
  for (unsigned int i = 0, n = this->people_list_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->people_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.GetNearbyUserRsp)
}

int GetNearbyUserRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_people_cnt()) {
    // required uint32 people_cnt = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->people_cnt());
  }

  return total_size;
}
int GetNearbyUserRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required uint32 people_cnt = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->people_cnt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .YOUMEServiceProtocol.YoumeUserLocation people_list = 4;
  total_size += 1 * this->people_list_size();
  for (int i = 0; i < this->people_list_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->people_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNearbyUserRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetNearbyUserRsp*>(&from));
}

void GetNearbyUserRsp::MergeFrom(const GetNearbyUserRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  people_list_.MergeFrom(from.people_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_people_cnt()) {
      set_people_cnt(from.people_cnt());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetNearbyUserRsp::CopyFrom(const GetNearbyUserRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNearbyUserRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->people_list())) return false;
  return true;
}

void GetNearbyUserRsp::Swap(GetNearbyUserRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNearbyUserRsp::InternalSwap(GetNearbyUserRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(people_cnt_, other->people_cnt_);
  people_list_.UnsafeArenaSwap(&other->people_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetNearbyUserRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.GetNearbyUserRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetNearbyUserRsp

// required int32 version = 1;
bool GetNearbyUserRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetNearbyUserRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GetNearbyUserRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetNearbyUserRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 GetNearbyUserRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetNearbyUserRsp.version)
  return version_;
}
 void GetNearbyUserRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetNearbyUserRsp.version)
}

// required int32 ret = 2;
bool GetNearbyUserRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetNearbyUserRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void GetNearbyUserRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetNearbyUserRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 GetNearbyUserRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetNearbyUserRsp.ret)
  return ret_;
}
 void GetNearbyUserRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetNearbyUserRsp.ret)
}

// required uint32 people_cnt = 3;
bool GetNearbyUserRsp::has_people_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetNearbyUserRsp::set_has_people_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
void GetNearbyUserRsp::clear_has_people_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetNearbyUserRsp::clear_people_cnt() {
  people_cnt_ = 0u;
  clear_has_people_cnt();
}
 ::youmecommon::protobuf::uint32 GetNearbyUserRsp::people_cnt() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetNearbyUserRsp.people_cnt)
  return people_cnt_;
}
 void GetNearbyUserRsp::set_people_cnt(::youmecommon::protobuf::uint32 value) {
  set_has_people_cnt();
  people_cnt_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetNearbyUserRsp.people_cnt)
}

// repeated .YOUMEServiceProtocol.YoumeUserLocation people_list = 4;
int GetNearbyUserRsp::people_list_size() const {
  return people_list_.size();
}
void GetNearbyUserRsp::clear_people_list() {
  people_list_.Clear();
}
const ::YOUMEServiceProtocol::YoumeUserLocation& GetNearbyUserRsp::people_list(int index) const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetNearbyUserRsp.people_list)
  return people_list_.Get(index);
}
::YOUMEServiceProtocol::YoumeUserLocation* GetNearbyUserRsp::mutable_people_list(int index) {
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.GetNearbyUserRsp.people_list)
  return people_list_.Mutable(index);
}
::YOUMEServiceProtocol::YoumeUserLocation* GetNearbyUserRsp::add_people_list() {
  // @@protoc_insertion_point(field_add:YOUMEServiceProtocol.GetNearbyUserRsp.people_list)
  return people_list_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::YoumeUserLocation >*
GetNearbyUserRsp::mutable_people_list() {
  // @@protoc_insertion_point(field_mutable_list:YOUMEServiceProtocol.GetNearbyUserRsp.people_list)
  return &people_list_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::YoumeUserLocation >&
GetNearbyUserRsp::people_list() const {
  // @@protoc_insertion_point(field_list:YOUMEServiceProtocol.GetNearbyUserRsp.people_list)
  return people_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YOUMEServiceProtocol

// @@protoc_insertion_point(global_scope)
