// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youme_rc_comm.proto

#ifndef PROTOBUF_youme_5frc_5fcomm_2eproto__INCLUDED
#define PROTOBUF_youme_5frc_5fcomm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
#include "youme_rcuserinfo.pb.h"
// @@protoc_insertion_point(includes)

namespace YOUMEServiceProtocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_youme_5frc_5fcomm_2eproto();
void protobuf_AssignDesc_youme_5frc_5fcomm_2eproto();
void protobuf_ShutdownFile_youme_5frc_5fcomm_2eproto();

class RcFriendBriefInfo;

enum RC_FRIEND_REQ_STATE {
  ADD_SUCCESS = 1,
  ADD_WAIT_OTHER_VERIFY = 2,
  ADD_WAIT_ME_VERIFY = 3,
  ADD_FAIL = 4,
  DEL_SUCCESS = 5,
  DEL_FAIL = 6,
  BLACK_SUCCESS = 7,
  BLACK_FAIL = 8,
  UNBLACK_SUCCESS = 9,
  UNBLACK_FAIL = 10
};
bool RC_FRIEND_REQ_STATE_IsValid(int value);
const RC_FRIEND_REQ_STATE RC_FRIEND_REQ_STATE_MIN = ADD_SUCCESS;
const RC_FRIEND_REQ_STATE RC_FRIEND_REQ_STATE_MAX = UNBLACK_FAIL;
const int RC_FRIEND_REQ_STATE_ARRAYSIZE = RC_FRIEND_REQ_STATE_MAX + 1;

enum RC_FRIEND_REQ_TYPE {
  TYPE_ADD = 1,
  TYPE_BE_ADDED = 2,
  TYPE_DEL = 3,
  TYPE_BE_DELED = 4,
  TYPE_BLACK = 5,
  TYPE_BE_BLACKED = 6,
  TYPE_UNBLACK = 7,
  TYPE_BE_UNBLACKED = 8
};
bool RC_FRIEND_REQ_TYPE_IsValid(int value);
const RC_FRIEND_REQ_TYPE RC_FRIEND_REQ_TYPE_MIN = TYPE_ADD;
const RC_FRIEND_REQ_TYPE RC_FRIEND_REQ_TYPE_MAX = TYPE_BE_UNBLACKED;
const int RC_FRIEND_REQ_TYPE_ARRAYSIZE = RC_FRIEND_REQ_TYPE_MAX + 1;

enum RC_STATE {
  RC_STATE_FRIEND = 1,
  RC_STATE_DEL = 2
};
bool RC_STATE_IsValid(int value);
const RC_STATE RC_STATE_MIN = RC_STATE_FRIEND;
const RC_STATE RC_STATE_MAX = RC_STATE_DEL;
const int RC_STATE_ARRAYSIZE = RC_STATE_MAX + 1;

// ===================================================================

class RcFriendBriefInfo : public ::youmecommon::protobuf::MessageLite {
 public:
  RcFriendBriefInfo();
  virtual ~RcFriendBriefInfo();

  RcFriendBriefInfo(const RcFriendBriefInfo& from);

  inline RcFriendBriefInfo& operator=(const RcFriendBriefInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const RcFriendBriefInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RcFriendBriefInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RcFriendBriefInfo* other);

  // implements Message ----------------------------------------------

  inline RcFriendBriefInfo* New() const { return New(NULL); }

  RcFriendBriefInfo* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const RcFriendBriefInfo& from);
  void MergeFrom(const RcFriendBriefInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RcFriendBriefInfo* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const void* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional bytes nickname = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  void set_nickname(const char* value);
  void set_nickname(const void* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional .YOUMEServiceProtocol.RC_ONLINE_STATE online_state = 3;
  bool has_online_state() const;
  void clear_online_state();
  static const int kOnlineStateFieldNumber = 3;
  ::YOUMEServiceProtocol::RC_ONLINE_STATE online_state() const;
  void set_online_state(::YOUMEServiceProtocol::RC_ONLINE_STATE value);

  // @@protoc_insertion_point(class_scope:YOUMEServiceProtocol.RcFriendBriefInfo)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_online_state();
  inline void clear_has_online_state();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::internal::ArenaStringPtr user_id_;
  ::youmecommon::protobuf::internal::ArenaStringPtr nickname_;
  int online_state_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_youme_5frc_5fcomm_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_youme_5frc_5fcomm_2eproto();
  #endif
  friend void protobuf_AssignDesc_youme_5frc_5fcomm_2eproto();
  friend void protobuf_ShutdownFile_youme_5frc_5fcomm_2eproto();

  void InitAsDefaultInstance();
  static RcFriendBriefInfo* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RcFriendBriefInfo

// required bytes user_id = 1;
inline bool RcFriendBriefInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RcFriendBriefInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RcFriendBriefInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RcFriendBriefInfo::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& RcFriendBriefInfo::user_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendBriefInfo.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcFriendBriefInfo::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendBriefInfo.user_id)
}
inline void RcFriendBriefInfo::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcFriendBriefInfo.user_id)
}
inline void RcFriendBriefInfo::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcFriendBriefInfo.user_id)
}
inline ::std::string* RcFriendBriefInfo::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcFriendBriefInfo.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RcFriendBriefInfo::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcFriendBriefInfo::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcFriendBriefInfo.user_id)
}

// optional bytes nickname = 2;
inline bool RcFriendBriefInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RcFriendBriefInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RcFriendBriefInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RcFriendBriefInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& RcFriendBriefInfo::nickname() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendBriefInfo.nickname)
  return nickname_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcFriendBriefInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendBriefInfo.nickname)
}
inline void RcFriendBriefInfo::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcFriendBriefInfo.nickname)
}
inline void RcFriendBriefInfo::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcFriendBriefInfo.nickname)
}
inline ::std::string* RcFriendBriefInfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcFriendBriefInfo.nickname)
  return nickname_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RcFriendBriefInfo::release_nickname() {
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcFriendBriefInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcFriendBriefInfo.nickname)
}

// optional .YOUMEServiceProtocol.RC_ONLINE_STATE online_state = 3;
inline bool RcFriendBriefInfo::has_online_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RcFriendBriefInfo::set_has_online_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RcFriendBriefInfo::clear_has_online_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RcFriendBriefInfo::clear_online_state() {
  online_state_ = 1;
  clear_has_online_state();
}
inline ::YOUMEServiceProtocol::RC_ONLINE_STATE RcFriendBriefInfo::online_state() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendBriefInfo.online_state)
  return static_cast< ::YOUMEServiceProtocol::RC_ONLINE_STATE >(online_state_);
}
inline void RcFriendBriefInfo::set_online_state(::YOUMEServiceProtocol::RC_ONLINE_STATE value) {
  assert(::YOUMEServiceProtocol::RC_ONLINE_STATE_IsValid(value));
  set_has_online_state();
  online_state_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendBriefInfo.online_state)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YOUMEServiceProtocol

#ifndef SWIG
namespace youmecommon {
namespace protobuf {

template <> struct is_proto_enum< ::YOUMEServiceProtocol::RC_FRIEND_REQ_STATE> : ::youmecommon::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::YOUMEServiceProtocol::RC_FRIEND_REQ_TYPE> : ::youmecommon::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::YOUMEServiceProtocol::RC_STATE> : ::youmecommon::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_youme_5frc_5fcomm_2eproto__INCLUDED
