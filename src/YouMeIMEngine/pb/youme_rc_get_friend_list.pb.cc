// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youme_rc_get_friend_list.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "youme_rc_get_friend_list.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YOUMEServiceProtocol {

void protobuf_ShutdownFile_youme_5frc_5fget_5ffriend_5flist_2eproto() {
  delete GetRcFriendListReq::default_instance_;
  delete GetRcFriendListRsp::default_instance_;
  delete GetRcBlackListReq::default_instance_;
  delete GetRcBlackListRsp::default_instance_;
  delete RcFriendReqInfo::default_instance_;
  delete GetRcFriendReqListReq::default_instance_;
  delete GetRcFriendReqListRsp::default_instance_;
  delete RcFriendReqIdx::default_instance_;
  delete AppBrowseRcFriendReqListReq::default_instance_;
  delete AppBrowseRcFriendReqListRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::YOUMEServiceProtocol::protobuf_AddDesc_youme_5frc_5fcomm_2eproto();
  GetRcFriendListReq::default_instance_ = new GetRcFriendListReq();
  GetRcFriendListRsp::default_instance_ = new GetRcFriendListRsp();
  GetRcBlackListReq::default_instance_ = new GetRcBlackListReq();
  GetRcBlackListRsp::default_instance_ = new GetRcBlackListRsp();
  RcFriendReqInfo::default_instance_ = new RcFriendReqInfo();
  GetRcFriendReqListReq::default_instance_ = new GetRcFriendReqListReq();
  GetRcFriendReqListRsp::default_instance_ = new GetRcFriendReqListRsp();
  RcFriendReqIdx::default_instance_ = new RcFriendReqIdx();
  AppBrowseRcFriendReqListReq::default_instance_ = new AppBrowseRcFriendReqListReq();
  AppBrowseRcFriendReqListRsp::default_instance_ = new AppBrowseRcFriendReqListRsp();
  GetRcFriendListReq::default_instance_->InitAsDefaultInstance();
  GetRcFriendListRsp::default_instance_->InitAsDefaultInstance();
  GetRcBlackListReq::default_instance_->InitAsDefaultInstance();
  GetRcBlackListRsp::default_instance_->InitAsDefaultInstance();
  RcFriendReqInfo::default_instance_->InitAsDefaultInstance();
  GetRcFriendReqListReq::default_instance_->InitAsDefaultInstance();
  GetRcFriendReqListRsp::default_instance_->InitAsDefaultInstance();
  RcFriendReqIdx::default_instance_->InitAsDefaultInstance();
  AppBrowseRcFriendReqListReq::default_instance_->InitAsDefaultInstance();
  AppBrowseRcFriendReqListRsp::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_youme_5frc_5fget_5ffriend_5flist_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto_once_);
void protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto_once_,
                 &protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_youme_5frc_5fget_5ffriend_5flist_2eproto {
  StaticDescriptorInitializer_youme_5frc_5fget_5ffriend_5flist_2eproto() {
    protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto();
  }
} static_descriptor_initializer_youme_5frc_5fget_5ffriend_5flist_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int GetRcFriendListReq::kVersionFieldNumber;
const int GetRcFriendListReq::kStartIdxFieldNumber;
const int GetRcFriendListReq::kLenFieldNumber;
#endif  // !_MSC_VER

GetRcFriendListReq::GetRcFriendListReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.GetRcFriendListReq)
}

void GetRcFriendListReq::InitAsDefaultInstance() {
}

GetRcFriendListReq::GetRcFriendListReq(const GetRcFriendListReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.GetRcFriendListReq)
}

void GetRcFriendListReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  start_idx_ = 0;
  len_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRcFriendListReq::~GetRcFriendListReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.GetRcFriendListReq)
  SharedDtor();
}

void GetRcFriendListReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetRcFriendListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetRcFriendListReq& GetRcFriendListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto();
#endif
  return *default_instance_;
}

GetRcFriendListReq* GetRcFriendListReq::default_instance_ = NULL;

GetRcFriendListReq* GetRcFriendListReq::New(::youmecommon::protobuf::Arena* arena) const {
  GetRcFriendListReq* n = new GetRcFriendListReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRcFriendListReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetRcFriendListReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, len_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetRcFriendListReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.GetRcFriendListReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_idx;
        break;
      }

      // required int32 start_idx = 2;
      case 2: {
        if (tag == 16) {
         parse_start_idx:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_idx_)));
          set_has_start_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_len;
        break;
      }

      // required int32 len = 3;
      case 3: {
        if (tag == 24) {
         parse_len:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.GetRcFriendListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.GetRcFriendListReq)
  return false;
#undef DO_
}

void GetRcFriendListReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.GetRcFriendListReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 start_idx = 2;
  if (has_start_idx()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_idx(), output);
  }

  // required int32 len = 3;
  if (has_len()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->len(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.GetRcFriendListReq)
}

int GetRcFriendListReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_start_idx()) {
    // required int32 start_idx = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->start_idx());
  }

  if (has_len()) {
    // required int32 len = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->len());
  }

  return total_size;
}
int GetRcFriendListReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 start_idx = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->start_idx());

    // required int32 len = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->len());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRcFriendListReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetRcFriendListReq*>(&from));
}

void GetRcFriendListReq::MergeFrom(const GetRcFriendListReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_start_idx()) {
      set_start_idx(from.start_idx());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetRcFriendListReq::CopyFrom(const GetRcFriendListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRcFriendListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetRcFriendListReq::Swap(GetRcFriendListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRcFriendListReq::InternalSwap(GetRcFriendListReq* other) {
  std::swap(version_, other->version_);
  std::swap(start_idx_, other->start_idx_);
  std::swap(len_, other->len_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetRcFriendListReq::GetTypeName() const {
  return "YOUMEServiceProtocol.GetRcFriendListReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRcFriendListReq

// required int32 version = 1;
bool GetRcFriendListReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetRcFriendListReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GetRcFriendListReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetRcFriendListReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 GetRcFriendListReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcFriendListReq.version)
  return version_;
}
 void GetRcFriendListReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRcFriendListReq.version)
}

// required int32 start_idx = 2;
bool GetRcFriendListReq::has_start_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetRcFriendListReq::set_has_start_idx() {
  _has_bits_[0] |= 0x00000002u;
}
void GetRcFriendListReq::clear_has_start_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetRcFriendListReq::clear_start_idx() {
  start_idx_ = 0;
  clear_has_start_idx();
}
 ::youmecommon::protobuf::int32 GetRcFriendListReq::start_idx() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcFriendListReq.start_idx)
  return start_idx_;
}
 void GetRcFriendListReq::set_start_idx(::youmecommon::protobuf::int32 value) {
  set_has_start_idx();
  start_idx_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRcFriendListReq.start_idx)
}

// required int32 len = 3;
bool GetRcFriendListReq::has_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetRcFriendListReq::set_has_len() {
  _has_bits_[0] |= 0x00000004u;
}
void GetRcFriendListReq::clear_has_len() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetRcFriendListReq::clear_len() {
  len_ = 0;
  clear_has_len();
}
 ::youmecommon::protobuf::int32 GetRcFriendListReq::len() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcFriendListReq.len)
  return len_;
}
 void GetRcFriendListReq::set_len(::youmecommon::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRcFriendListReq.len)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetRcFriendListRsp::kVersionFieldNumber;
const int GetRcFriendListRsp::kRetFieldNumber;
const int GetRcFriendListRsp::kListCntFieldNumber;
const int GetRcFriendListRsp::kFriendListFieldNumber;
#endif  // !_MSC_VER

GetRcFriendListRsp::GetRcFriendListRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.GetRcFriendListRsp)
}

void GetRcFriendListRsp::InitAsDefaultInstance() {
}

GetRcFriendListRsp::GetRcFriendListRsp(const GetRcFriendListRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.GetRcFriendListRsp)
}

void GetRcFriendListRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  list_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRcFriendListRsp::~GetRcFriendListRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.GetRcFriendListRsp)
  SharedDtor();
}

void GetRcFriendListRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetRcFriendListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetRcFriendListRsp& GetRcFriendListRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto();
#endif
  return *default_instance_;
}

GetRcFriendListRsp* GetRcFriendListRsp::default_instance_ = NULL;

GetRcFriendListRsp* GetRcFriendListRsp::New(::youmecommon::protobuf::Arena* arena) const {
  GetRcFriendListRsp* n = new GetRcFriendListRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRcFriendListRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetRcFriendListRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(version_, ret_);
    list_cnt_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  friend_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetRcFriendListRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.GetRcFriendListRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_list_cnt;
        break;
      }

      // required int32 list_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_list_cnt:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &list_cnt_)));
          set_has_list_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_friend_list;
        break;
      }

      // repeated .YOUMEServiceProtocol.RcFriendBriefInfo friend_list = 4;
      case 4: {
        if (tag == 34) {
         parse_friend_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_friend_list:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_friend_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_friend_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.GetRcFriendListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.GetRcFriendListRsp)
  return false;
#undef DO_
}

void GetRcFriendListRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.GetRcFriendListRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // required int32 list_cnt = 3;
  if (has_list_cnt()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->list_cnt(), output);
  }

  // repeated .YOUMEServiceProtocol.RcFriendBriefInfo friend_list = 4;
  for (unsigned int i = 0, n = this->friend_list_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->friend_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.GetRcFriendListRsp)
}

int GetRcFriendListRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_list_cnt()) {
    // required int32 list_cnt = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->list_cnt());
  }

  return total_size;
}
int GetRcFriendListRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required int32 list_cnt = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->list_cnt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .YOUMEServiceProtocol.RcFriendBriefInfo friend_list = 4;
  total_size += 1 * this->friend_list_size();
  for (int i = 0; i < this->friend_list_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRcFriendListRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetRcFriendListRsp*>(&from));
}

void GetRcFriendListRsp::MergeFrom(const GetRcFriendListRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  friend_list_.MergeFrom(from.friend_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_list_cnt()) {
      set_list_cnt(from.list_cnt());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetRcFriendListRsp::CopyFrom(const GetRcFriendListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRcFriendListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->friend_list())) return false;
  return true;
}

void GetRcFriendListRsp::Swap(GetRcFriendListRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRcFriendListRsp::InternalSwap(GetRcFriendListRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(list_cnt_, other->list_cnt_);
  friend_list_.UnsafeArenaSwap(&other->friend_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetRcFriendListRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.GetRcFriendListRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRcFriendListRsp

// required int32 version = 1;
bool GetRcFriendListRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetRcFriendListRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GetRcFriendListRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetRcFriendListRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 GetRcFriendListRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcFriendListRsp.version)
  return version_;
}
 void GetRcFriendListRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRcFriendListRsp.version)
}

// required int32 ret = 2;
bool GetRcFriendListRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetRcFriendListRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void GetRcFriendListRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetRcFriendListRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 GetRcFriendListRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcFriendListRsp.ret)
  return ret_;
}
 void GetRcFriendListRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRcFriendListRsp.ret)
}

// required int32 list_cnt = 3;
bool GetRcFriendListRsp::has_list_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetRcFriendListRsp::set_has_list_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
void GetRcFriendListRsp::clear_has_list_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetRcFriendListRsp::clear_list_cnt() {
  list_cnt_ = 0;
  clear_has_list_cnt();
}
 ::youmecommon::protobuf::int32 GetRcFriendListRsp::list_cnt() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcFriendListRsp.list_cnt)
  return list_cnt_;
}
 void GetRcFriendListRsp::set_list_cnt(::youmecommon::protobuf::int32 value) {
  set_has_list_cnt();
  list_cnt_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRcFriendListRsp.list_cnt)
}

// repeated .YOUMEServiceProtocol.RcFriendBriefInfo friend_list = 4;
int GetRcFriendListRsp::friend_list_size() const {
  return friend_list_.size();
}
void GetRcFriendListRsp::clear_friend_list() {
  friend_list_.Clear();
}
const ::YOUMEServiceProtocol::RcFriendBriefInfo& GetRcFriendListRsp::friend_list(int index) const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcFriendListRsp.friend_list)
  return friend_list_.Get(index);
}
::YOUMEServiceProtocol::RcFriendBriefInfo* GetRcFriendListRsp::mutable_friend_list(int index) {
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.GetRcFriendListRsp.friend_list)
  return friend_list_.Mutable(index);
}
::YOUMEServiceProtocol::RcFriendBriefInfo* GetRcFriendListRsp::add_friend_list() {
  // @@protoc_insertion_point(field_add:YOUMEServiceProtocol.GetRcFriendListRsp.friend_list)
  return friend_list_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::RcFriendBriefInfo >*
GetRcFriendListRsp::mutable_friend_list() {
  // @@protoc_insertion_point(field_mutable_list:YOUMEServiceProtocol.GetRcFriendListRsp.friend_list)
  return &friend_list_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::RcFriendBriefInfo >&
GetRcFriendListRsp::friend_list() const {
  // @@protoc_insertion_point(field_list:YOUMEServiceProtocol.GetRcFriendListRsp.friend_list)
  return friend_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetRcBlackListReq::kVersionFieldNumber;
const int GetRcBlackListReq::kStartIdxFieldNumber;
const int GetRcBlackListReq::kLenFieldNumber;
#endif  // !_MSC_VER

GetRcBlackListReq::GetRcBlackListReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.GetRcBlackListReq)
}

void GetRcBlackListReq::InitAsDefaultInstance() {
}

GetRcBlackListReq::GetRcBlackListReq(const GetRcBlackListReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.GetRcBlackListReq)
}

void GetRcBlackListReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  start_idx_ = 0;
  len_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRcBlackListReq::~GetRcBlackListReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.GetRcBlackListReq)
  SharedDtor();
}

void GetRcBlackListReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetRcBlackListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetRcBlackListReq& GetRcBlackListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto();
#endif
  return *default_instance_;
}

GetRcBlackListReq* GetRcBlackListReq::default_instance_ = NULL;

GetRcBlackListReq* GetRcBlackListReq::New(::youmecommon::protobuf::Arena* arena) const {
  GetRcBlackListReq* n = new GetRcBlackListReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRcBlackListReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetRcBlackListReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, len_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetRcBlackListReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.GetRcBlackListReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_idx;
        break;
      }

      // required int32 start_idx = 2;
      case 2: {
        if (tag == 16) {
         parse_start_idx:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_idx_)));
          set_has_start_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_len;
        break;
      }

      // required int32 len = 3;
      case 3: {
        if (tag == 24) {
         parse_len:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.GetRcBlackListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.GetRcBlackListReq)
  return false;
#undef DO_
}

void GetRcBlackListReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.GetRcBlackListReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 start_idx = 2;
  if (has_start_idx()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_idx(), output);
  }

  // required int32 len = 3;
  if (has_len()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->len(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.GetRcBlackListReq)
}

int GetRcBlackListReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_start_idx()) {
    // required int32 start_idx = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->start_idx());
  }

  if (has_len()) {
    // required int32 len = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->len());
  }

  return total_size;
}
int GetRcBlackListReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 start_idx = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->start_idx());

    // required int32 len = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->len());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRcBlackListReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetRcBlackListReq*>(&from));
}

void GetRcBlackListReq::MergeFrom(const GetRcBlackListReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_start_idx()) {
      set_start_idx(from.start_idx());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetRcBlackListReq::CopyFrom(const GetRcBlackListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRcBlackListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetRcBlackListReq::Swap(GetRcBlackListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRcBlackListReq::InternalSwap(GetRcBlackListReq* other) {
  std::swap(version_, other->version_);
  std::swap(start_idx_, other->start_idx_);
  std::swap(len_, other->len_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetRcBlackListReq::GetTypeName() const {
  return "YOUMEServiceProtocol.GetRcBlackListReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRcBlackListReq

// required int32 version = 1;
bool GetRcBlackListReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetRcBlackListReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GetRcBlackListReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetRcBlackListReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 GetRcBlackListReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcBlackListReq.version)
  return version_;
}
 void GetRcBlackListReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRcBlackListReq.version)
}

// required int32 start_idx = 2;
bool GetRcBlackListReq::has_start_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetRcBlackListReq::set_has_start_idx() {
  _has_bits_[0] |= 0x00000002u;
}
void GetRcBlackListReq::clear_has_start_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetRcBlackListReq::clear_start_idx() {
  start_idx_ = 0;
  clear_has_start_idx();
}
 ::youmecommon::protobuf::int32 GetRcBlackListReq::start_idx() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcBlackListReq.start_idx)
  return start_idx_;
}
 void GetRcBlackListReq::set_start_idx(::youmecommon::protobuf::int32 value) {
  set_has_start_idx();
  start_idx_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRcBlackListReq.start_idx)
}

// required int32 len = 3;
bool GetRcBlackListReq::has_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetRcBlackListReq::set_has_len() {
  _has_bits_[0] |= 0x00000004u;
}
void GetRcBlackListReq::clear_has_len() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetRcBlackListReq::clear_len() {
  len_ = 0;
  clear_has_len();
}
 ::youmecommon::protobuf::int32 GetRcBlackListReq::len() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcBlackListReq.len)
  return len_;
}
 void GetRcBlackListReq::set_len(::youmecommon::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRcBlackListReq.len)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetRcBlackListRsp::kVersionFieldNumber;
const int GetRcBlackListRsp::kRetFieldNumber;
const int GetRcBlackListRsp::kListCntFieldNumber;
const int GetRcBlackListRsp::kBlackListFieldNumber;
#endif  // !_MSC_VER

GetRcBlackListRsp::GetRcBlackListRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.GetRcBlackListRsp)
}

void GetRcBlackListRsp::InitAsDefaultInstance() {
}

GetRcBlackListRsp::GetRcBlackListRsp(const GetRcBlackListRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.GetRcBlackListRsp)
}

void GetRcBlackListRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  list_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRcBlackListRsp::~GetRcBlackListRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.GetRcBlackListRsp)
  SharedDtor();
}

void GetRcBlackListRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetRcBlackListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetRcBlackListRsp& GetRcBlackListRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto();
#endif
  return *default_instance_;
}

GetRcBlackListRsp* GetRcBlackListRsp::default_instance_ = NULL;

GetRcBlackListRsp* GetRcBlackListRsp::New(::youmecommon::protobuf::Arena* arena) const {
  GetRcBlackListRsp* n = new GetRcBlackListRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRcBlackListRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetRcBlackListRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(version_, ret_);
    list_cnt_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  black_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetRcBlackListRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.GetRcBlackListRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_list_cnt;
        break;
      }

      // required int32 list_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_list_cnt:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &list_cnt_)));
          set_has_list_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_black_list;
        break;
      }

      // repeated .YOUMEServiceProtocol.RcFriendBriefInfo black_list = 4;
      case 4: {
        if (tag == 34) {
         parse_black_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_black_list:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_black_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_black_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.GetRcBlackListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.GetRcBlackListRsp)
  return false;
#undef DO_
}

void GetRcBlackListRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.GetRcBlackListRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // required int32 list_cnt = 3;
  if (has_list_cnt()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->list_cnt(), output);
  }

  // repeated .YOUMEServiceProtocol.RcFriendBriefInfo black_list = 4;
  for (unsigned int i = 0, n = this->black_list_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->black_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.GetRcBlackListRsp)
}

int GetRcBlackListRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_list_cnt()) {
    // required int32 list_cnt = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->list_cnt());
  }

  return total_size;
}
int GetRcBlackListRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required int32 list_cnt = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->list_cnt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .YOUMEServiceProtocol.RcFriendBriefInfo black_list = 4;
  total_size += 1 * this->black_list_size();
  for (int i = 0; i < this->black_list_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->black_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRcBlackListRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetRcBlackListRsp*>(&from));
}

void GetRcBlackListRsp::MergeFrom(const GetRcBlackListRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  black_list_.MergeFrom(from.black_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_list_cnt()) {
      set_list_cnt(from.list_cnt());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetRcBlackListRsp::CopyFrom(const GetRcBlackListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRcBlackListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->black_list())) return false;
  return true;
}

void GetRcBlackListRsp::Swap(GetRcBlackListRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRcBlackListRsp::InternalSwap(GetRcBlackListRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(list_cnt_, other->list_cnt_);
  black_list_.UnsafeArenaSwap(&other->black_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetRcBlackListRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.GetRcBlackListRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRcBlackListRsp

// required int32 version = 1;
bool GetRcBlackListRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetRcBlackListRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GetRcBlackListRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetRcBlackListRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 GetRcBlackListRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcBlackListRsp.version)
  return version_;
}
 void GetRcBlackListRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRcBlackListRsp.version)
}

// required int32 ret = 2;
bool GetRcBlackListRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetRcBlackListRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void GetRcBlackListRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetRcBlackListRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 GetRcBlackListRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcBlackListRsp.ret)
  return ret_;
}
 void GetRcBlackListRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRcBlackListRsp.ret)
}

// required int32 list_cnt = 3;
bool GetRcBlackListRsp::has_list_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetRcBlackListRsp::set_has_list_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
void GetRcBlackListRsp::clear_has_list_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetRcBlackListRsp::clear_list_cnt() {
  list_cnt_ = 0;
  clear_has_list_cnt();
}
 ::youmecommon::protobuf::int32 GetRcBlackListRsp::list_cnt() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcBlackListRsp.list_cnt)
  return list_cnt_;
}
 void GetRcBlackListRsp::set_list_cnt(::youmecommon::protobuf::int32 value) {
  set_has_list_cnt();
  list_cnt_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRcBlackListRsp.list_cnt)
}

// repeated .YOUMEServiceProtocol.RcFriendBriefInfo black_list = 4;
int GetRcBlackListRsp::black_list_size() const {
  return black_list_.size();
}
void GetRcBlackListRsp::clear_black_list() {
  black_list_.Clear();
}
const ::YOUMEServiceProtocol::RcFriendBriefInfo& GetRcBlackListRsp::black_list(int index) const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcBlackListRsp.black_list)
  return black_list_.Get(index);
}
::YOUMEServiceProtocol::RcFriendBriefInfo* GetRcBlackListRsp::mutable_black_list(int index) {
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.GetRcBlackListRsp.black_list)
  return black_list_.Mutable(index);
}
::YOUMEServiceProtocol::RcFriendBriefInfo* GetRcBlackListRsp::add_black_list() {
  // @@protoc_insertion_point(field_add:YOUMEServiceProtocol.GetRcBlackListRsp.black_list)
  return black_list_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::RcFriendBriefInfo >*
GetRcBlackListRsp::mutable_black_list() {
  // @@protoc_insertion_point(field_mutable_list:YOUMEServiceProtocol.GetRcBlackListRsp.black_list)
  return &black_list_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::RcFriendBriefInfo >&
GetRcBlackListRsp::black_list() const {
  // @@protoc_insertion_point(field_list:YOUMEServiceProtocol.GetRcBlackListRsp.black_list)
  return black_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RcFriendReqInfo::kAppIdFieldNumber;
const int RcFriendReqInfo::kReqIdFieldNumber;
const int RcFriendReqInfo::kReqTypeFieldNumber;
const int RcFriendReqInfo::kMyselfFieldNumber;
const int RcFriendReqInfo::kMyselfNicknameFieldNumber;
const int RcFriendReqInfo::kOtherSideFieldNumber;
const int RcFriendReqInfo::kOtherSideNicknameFieldNumber;
const int RcFriendReqInfo::kCurStateFieldNumber;
const int RcFriendReqInfo::kExtInfoFieldNumber;
const int RcFriendReqInfo::kCreateTimeFieldNumber;
const int RcFriendReqInfo::kUpdateTimeFieldNumber;
const int RcFriendReqInfo::kIsBrowsedByAppFieldNumber;
#endif  // !_MSC_VER

RcFriendReqInfo::RcFriendReqInfo()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.RcFriendReqInfo)
}

void RcFriendReqInfo::InitAsDefaultInstance() {
}

RcFriendReqInfo::RcFriendReqInfo(const RcFriendReqInfo& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.RcFriendReqInfo)
}

void RcFriendReqInfo::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0;
  req_id_ = GOOGLE_ULONGLONG(0);
  req_type_ = 1;
  myself_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  myself_nickname_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  other_side_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  other_side_nickname_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  cur_state_ = 1;
  ext_info_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  create_time_ = 0;
  update_time_ = 0;
  is_browsed_by_app_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RcFriendReqInfo::~RcFriendReqInfo() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.RcFriendReqInfo)
  SharedDtor();
}

void RcFriendReqInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  myself_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  myself_nickname_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  other_side_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  other_side_nickname_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ext_info_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RcFriendReqInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RcFriendReqInfo& RcFriendReqInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto();
#endif
  return *default_instance_;
}

RcFriendReqInfo* RcFriendReqInfo::default_instance_ = NULL;

RcFriendReqInfo* RcFriendReqInfo::New(::youmecommon::protobuf::Arena* arena) const {
  RcFriendReqInfo* n = new RcFriendReqInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RcFriendReqInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RcFriendReqInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(req_id_, app_id_);
    req_type_ = 1;
    if (has_myself()) {
      myself_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_myself_nickname()) {
      myself_nickname_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_other_side()) {
      other_side_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_other_side_nickname()) {
      other_side_nickname_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    cur_state_ = 1;
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ZR_(create_time_, is_browsed_by_app_);
    if (has_ext_info()) {
      ext_info_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RcFriendReqInfo::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.RcFriendReqInfo)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 app_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_req_id;
        break;
      }

      // required uint64 req_id = 2;
      case 2: {
        if (tag == 16) {
         parse_req_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &req_id_)));
          set_has_req_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_req_type;
        break;
      }

      // required .YOUMEServiceProtocol.RC_FRIEND_REQ_TYPE req_type = 3;
      case 3: {
        if (tag == 24) {
         parse_req_type:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YOUMEServiceProtocol::RC_FRIEND_REQ_TYPE_IsValid(value)) {
            set_req_type(static_cast< ::YOUMEServiceProtocol::RC_FRIEND_REQ_TYPE >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_myself;
        break;
      }

      // required bytes myself = 4;
      case 4: {
        if (tag == 34) {
         parse_myself:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_myself()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_myself_nickname;
        break;
      }

      // optional bytes myself_nickname = 5;
      case 5: {
        if (tag == 42) {
         parse_myself_nickname:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_myself_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_other_side;
        break;
      }

      // required bytes other_side = 6;
      case 6: {
        if (tag == 50) {
         parse_other_side:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_other_side()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_other_side_nickname;
        break;
      }

      // optional bytes other_side_nickname = 7;
      case 7: {
        if (tag == 58) {
         parse_other_side_nickname:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_other_side_nickname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_cur_state;
        break;
      }

      // required .YOUMEServiceProtocol.RC_FRIEND_REQ_STATE cur_state = 8;
      case 8: {
        if (tag == 64) {
         parse_cur_state:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YOUMEServiceProtocol::RC_FRIEND_REQ_STATE_IsValid(value)) {
            set_cur_state(static_cast< ::YOUMEServiceProtocol::RC_FRIEND_REQ_STATE >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ext_info;
        break;
      }

      // optional bytes ext_info = 9;
      case 9: {
        if (tag == 74) {
         parse_ext_info:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ext_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_create_time;
        break;
      }

      // optional int32 create_time = 10;
      case 10: {
        if (tag == 80) {
         parse_create_time:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_update_time;
        break;
      }

      // optional int32 update_time = 11;
      case 11: {
        if (tag == 88) {
         parse_update_time:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_is_browsed_by_app;
        break;
      }

      // optional int32 is_browsed_by_app = 12;
      case 12: {
        if (tag == 96) {
         parse_is_browsed_by_app:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_browsed_by_app_)));
          set_has_is_browsed_by_app();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.RcFriendReqInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.RcFriendReqInfo)
  return false;
#undef DO_
}

void RcFriendReqInfo::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.RcFriendReqInfo)
  // required int32 app_id = 1;
  if (has_app_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->app_id(), output);
  }

  // required uint64 req_id = 2;
  if (has_req_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt64(2, this->req_id(), output);
  }

  // required .YOUMEServiceProtocol.RC_FRIEND_REQ_TYPE req_type = 3;
  if (has_req_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->req_type(), output);
  }

  // required bytes myself = 4;
  if (has_myself()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->myself(), output);
  }

  // optional bytes myself_nickname = 5;
  if (has_myself_nickname()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->myself_nickname(), output);
  }

  // required bytes other_side = 6;
  if (has_other_side()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->other_side(), output);
  }

  // optional bytes other_side_nickname = 7;
  if (has_other_side_nickname()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->other_side_nickname(), output);
  }

  // required .YOUMEServiceProtocol.RC_FRIEND_REQ_STATE cur_state = 8;
  if (has_cur_state()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->cur_state(), output);
  }

  // optional bytes ext_info = 9;
  if (has_ext_info()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->ext_info(), output);
  }

  // optional int32 create_time = 10;
  if (has_create_time()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(10, this->create_time(), output);
  }

  // optional int32 update_time = 11;
  if (has_update_time()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(11, this->update_time(), output);
  }

  // optional int32 is_browsed_by_app = 12;
  if (has_is_browsed_by_app()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(12, this->is_browsed_by_app(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.RcFriendReqInfo)
}

int RcFriendReqInfo::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_app_id()) {
    // required int32 app_id = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->app_id());
  }

  if (has_req_id()) {
    // required uint64 req_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->req_id());
  }

  if (has_req_type()) {
    // required .YOUMEServiceProtocol.RC_FRIEND_REQ_TYPE req_type = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->req_type());
  }

  if (has_myself()) {
    // required bytes myself = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->myself());
  }

  if (has_other_side()) {
    // required bytes other_side = 6;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->other_side());
  }

  if (has_cur_state()) {
    // required .YOUMEServiceProtocol.RC_FRIEND_REQ_STATE cur_state = 8;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->cur_state());
  }

  return total_size;
}
int RcFriendReqInfo::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000000af) ^ 0x000000af) == 0) {  // All required fields are present.
    // required int32 app_id = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->app_id());

    // required uint64 req_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->req_id());

    // required .YOUMEServiceProtocol.RC_FRIEND_REQ_TYPE req_type = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->req_type());

    // required bytes myself = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->myself());

    // required bytes other_side = 6;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->other_side());

    // required .YOUMEServiceProtocol.RC_FRIEND_REQ_STATE cur_state = 8;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->cur_state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 80u) {
    // optional bytes myself_nickname = 5;
    if (has_myself_nickname()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
          this->myself_nickname());
    }

    // optional bytes other_side_nickname = 7;
    if (has_other_side_nickname()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
          this->other_side_nickname());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional bytes ext_info = 9;
    if (has_ext_info()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
          this->ext_info());
    }

    // optional int32 create_time = 10;
    if (has_create_time()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

    // optional int32 update_time = 11;
    if (has_update_time()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->update_time());
    }

    // optional int32 is_browsed_by_app = 12;
    if (has_is_browsed_by_app()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->is_browsed_by_app());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RcFriendReqInfo::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const RcFriendReqInfo*>(&from));
}

void RcFriendReqInfo::MergeFrom(const RcFriendReqInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_req_id()) {
      set_req_id(from.req_id());
    }
    if (from.has_req_type()) {
      set_req_type(from.req_type());
    }
    if (from.has_myself()) {
      set_has_myself();
      myself_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.myself_);
    }
    if (from.has_myself_nickname()) {
      set_has_myself_nickname();
      myself_nickname_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.myself_nickname_);
    }
    if (from.has_other_side()) {
      set_has_other_side();
      other_side_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.other_side_);
    }
    if (from.has_other_side_nickname()) {
      set_has_other_side_nickname();
      other_side_nickname_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.other_side_nickname_);
    }
    if (from.has_cur_state()) {
      set_cur_state(from.cur_state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ext_info()) {
      set_has_ext_info();
      ext_info_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_info_);
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_is_browsed_by_app()) {
      set_is_browsed_by_app(from.is_browsed_by_app());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RcFriendReqInfo::CopyFrom(const RcFriendReqInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RcFriendReqInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000af) != 0x000000af) return false;

  return true;
}

void RcFriendReqInfo::Swap(RcFriendReqInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RcFriendReqInfo::InternalSwap(RcFriendReqInfo* other) {
  std::swap(app_id_, other->app_id_);
  std::swap(req_id_, other->req_id_);
  std::swap(req_type_, other->req_type_);
  myself_.Swap(&other->myself_);
  myself_nickname_.Swap(&other->myself_nickname_);
  other_side_.Swap(&other->other_side_);
  other_side_nickname_.Swap(&other->other_side_nickname_);
  std::swap(cur_state_, other->cur_state_);
  ext_info_.Swap(&other->ext_info_);
  std::swap(create_time_, other->create_time_);
  std::swap(update_time_, other->update_time_);
  std::swap(is_browsed_by_app_, other->is_browsed_by_app_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RcFriendReqInfo::GetTypeName() const {
  return "YOUMEServiceProtocol.RcFriendReqInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RcFriendReqInfo

// required int32 app_id = 1;
bool RcFriendReqInfo::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RcFriendReqInfo::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RcFriendReqInfo::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RcFriendReqInfo::clear_app_id() {
  app_id_ = 0;
  clear_has_app_id();
}
 ::youmecommon::protobuf::int32 RcFriendReqInfo::app_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqInfo.app_id)
  return app_id_;
}
 void RcFriendReqInfo::set_app_id(::youmecommon::protobuf::int32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqInfo.app_id)
}

// required uint64 req_id = 2;
bool RcFriendReqInfo::has_req_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RcFriendReqInfo::set_has_req_id() {
  _has_bits_[0] |= 0x00000002u;
}
void RcFriendReqInfo::clear_has_req_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void RcFriendReqInfo::clear_req_id() {
  req_id_ = GOOGLE_ULONGLONG(0);
  clear_has_req_id();
}
 ::youmecommon::protobuf::uint64 RcFriendReqInfo::req_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqInfo.req_id)
  return req_id_;
}
 void RcFriendReqInfo::set_req_id(::youmecommon::protobuf::uint64 value) {
  set_has_req_id();
  req_id_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqInfo.req_id)
}

// required .YOUMEServiceProtocol.RC_FRIEND_REQ_TYPE req_type = 3;
bool RcFriendReqInfo::has_req_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RcFriendReqInfo::set_has_req_type() {
  _has_bits_[0] |= 0x00000004u;
}
void RcFriendReqInfo::clear_has_req_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void RcFriendReqInfo::clear_req_type() {
  req_type_ = 1;
  clear_has_req_type();
}
 ::YOUMEServiceProtocol::RC_FRIEND_REQ_TYPE RcFriendReqInfo::req_type() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqInfo.req_type)
  return static_cast< ::YOUMEServiceProtocol::RC_FRIEND_REQ_TYPE >(req_type_);
}
 void RcFriendReqInfo::set_req_type(::YOUMEServiceProtocol::RC_FRIEND_REQ_TYPE value) {
  assert(::YOUMEServiceProtocol::RC_FRIEND_REQ_TYPE_IsValid(value));
  set_has_req_type();
  req_type_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqInfo.req_type)
}

// required bytes myself = 4;
bool RcFriendReqInfo::has_myself() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RcFriendReqInfo::set_has_myself() {
  _has_bits_[0] |= 0x00000008u;
}
void RcFriendReqInfo::clear_has_myself() {
  _has_bits_[0] &= ~0x00000008u;
}
void RcFriendReqInfo::clear_myself() {
  myself_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_myself();
}
 const ::std::string& RcFriendReqInfo::myself() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqInfo.myself)
  return myself_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendReqInfo::set_myself(const ::std::string& value) {
  set_has_myself();
  myself_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqInfo.myself)
}
 void RcFriendReqInfo::set_myself(const char* value) {
  set_has_myself();
  myself_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcFriendReqInfo.myself)
}
 void RcFriendReqInfo::set_myself(const void* value, size_t size) {
  set_has_myself();
  myself_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcFriendReqInfo.myself)
}
 ::std::string* RcFriendReqInfo::mutable_myself() {
  set_has_myself();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcFriendReqInfo.myself)
  return myself_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcFriendReqInfo::release_myself() {
  clear_has_myself();
  return myself_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendReqInfo::set_allocated_myself(::std::string* myself) {
  if (myself != NULL) {
    set_has_myself();
  } else {
    clear_has_myself();
  }
  myself_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), myself);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcFriendReqInfo.myself)
}

// optional bytes myself_nickname = 5;
bool RcFriendReqInfo::has_myself_nickname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RcFriendReqInfo::set_has_myself_nickname() {
  _has_bits_[0] |= 0x00000010u;
}
void RcFriendReqInfo::clear_has_myself_nickname() {
  _has_bits_[0] &= ~0x00000010u;
}
void RcFriendReqInfo::clear_myself_nickname() {
  myself_nickname_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_myself_nickname();
}
 const ::std::string& RcFriendReqInfo::myself_nickname() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqInfo.myself_nickname)
  return myself_nickname_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendReqInfo::set_myself_nickname(const ::std::string& value) {
  set_has_myself_nickname();
  myself_nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqInfo.myself_nickname)
}
 void RcFriendReqInfo::set_myself_nickname(const char* value) {
  set_has_myself_nickname();
  myself_nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcFriendReqInfo.myself_nickname)
}
 void RcFriendReqInfo::set_myself_nickname(const void* value, size_t size) {
  set_has_myself_nickname();
  myself_nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcFriendReqInfo.myself_nickname)
}
 ::std::string* RcFriendReqInfo::mutable_myself_nickname() {
  set_has_myself_nickname();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcFriendReqInfo.myself_nickname)
  return myself_nickname_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcFriendReqInfo::release_myself_nickname() {
  clear_has_myself_nickname();
  return myself_nickname_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendReqInfo::set_allocated_myself_nickname(::std::string* myself_nickname) {
  if (myself_nickname != NULL) {
    set_has_myself_nickname();
  } else {
    clear_has_myself_nickname();
  }
  myself_nickname_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), myself_nickname);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcFriendReqInfo.myself_nickname)
}

// required bytes other_side = 6;
bool RcFriendReqInfo::has_other_side() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RcFriendReqInfo::set_has_other_side() {
  _has_bits_[0] |= 0x00000020u;
}
void RcFriendReqInfo::clear_has_other_side() {
  _has_bits_[0] &= ~0x00000020u;
}
void RcFriendReqInfo::clear_other_side() {
  other_side_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_other_side();
}
 const ::std::string& RcFriendReqInfo::other_side() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqInfo.other_side)
  return other_side_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendReqInfo::set_other_side(const ::std::string& value) {
  set_has_other_side();
  other_side_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqInfo.other_side)
}
 void RcFriendReqInfo::set_other_side(const char* value) {
  set_has_other_side();
  other_side_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcFriendReqInfo.other_side)
}
 void RcFriendReqInfo::set_other_side(const void* value, size_t size) {
  set_has_other_side();
  other_side_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcFriendReqInfo.other_side)
}
 ::std::string* RcFriendReqInfo::mutable_other_side() {
  set_has_other_side();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcFriendReqInfo.other_side)
  return other_side_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcFriendReqInfo::release_other_side() {
  clear_has_other_side();
  return other_side_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendReqInfo::set_allocated_other_side(::std::string* other_side) {
  if (other_side != NULL) {
    set_has_other_side();
  } else {
    clear_has_other_side();
  }
  other_side_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), other_side);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcFriendReqInfo.other_side)
}

// optional bytes other_side_nickname = 7;
bool RcFriendReqInfo::has_other_side_nickname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RcFriendReqInfo::set_has_other_side_nickname() {
  _has_bits_[0] |= 0x00000040u;
}
void RcFriendReqInfo::clear_has_other_side_nickname() {
  _has_bits_[0] &= ~0x00000040u;
}
void RcFriendReqInfo::clear_other_side_nickname() {
  other_side_nickname_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_other_side_nickname();
}
 const ::std::string& RcFriendReqInfo::other_side_nickname() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqInfo.other_side_nickname)
  return other_side_nickname_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendReqInfo::set_other_side_nickname(const ::std::string& value) {
  set_has_other_side_nickname();
  other_side_nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqInfo.other_side_nickname)
}
 void RcFriendReqInfo::set_other_side_nickname(const char* value) {
  set_has_other_side_nickname();
  other_side_nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcFriendReqInfo.other_side_nickname)
}
 void RcFriendReqInfo::set_other_side_nickname(const void* value, size_t size) {
  set_has_other_side_nickname();
  other_side_nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcFriendReqInfo.other_side_nickname)
}
 ::std::string* RcFriendReqInfo::mutable_other_side_nickname() {
  set_has_other_side_nickname();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcFriendReqInfo.other_side_nickname)
  return other_side_nickname_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcFriendReqInfo::release_other_side_nickname() {
  clear_has_other_side_nickname();
  return other_side_nickname_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendReqInfo::set_allocated_other_side_nickname(::std::string* other_side_nickname) {
  if (other_side_nickname != NULL) {
    set_has_other_side_nickname();
  } else {
    clear_has_other_side_nickname();
  }
  other_side_nickname_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), other_side_nickname);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcFriendReqInfo.other_side_nickname)
}

// required .YOUMEServiceProtocol.RC_FRIEND_REQ_STATE cur_state = 8;
bool RcFriendReqInfo::has_cur_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RcFriendReqInfo::set_has_cur_state() {
  _has_bits_[0] |= 0x00000080u;
}
void RcFriendReqInfo::clear_has_cur_state() {
  _has_bits_[0] &= ~0x00000080u;
}
void RcFriendReqInfo::clear_cur_state() {
  cur_state_ = 1;
  clear_has_cur_state();
}
 ::YOUMEServiceProtocol::RC_FRIEND_REQ_STATE RcFriendReqInfo::cur_state() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqInfo.cur_state)
  return static_cast< ::YOUMEServiceProtocol::RC_FRIEND_REQ_STATE >(cur_state_);
}
 void RcFriendReqInfo::set_cur_state(::YOUMEServiceProtocol::RC_FRIEND_REQ_STATE value) {
  assert(::YOUMEServiceProtocol::RC_FRIEND_REQ_STATE_IsValid(value));
  set_has_cur_state();
  cur_state_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqInfo.cur_state)
}

// optional bytes ext_info = 9;
bool RcFriendReqInfo::has_ext_info() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RcFriendReqInfo::set_has_ext_info() {
  _has_bits_[0] |= 0x00000100u;
}
void RcFriendReqInfo::clear_has_ext_info() {
  _has_bits_[0] &= ~0x00000100u;
}
void RcFriendReqInfo::clear_ext_info() {
  ext_info_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ext_info();
}
 const ::std::string& RcFriendReqInfo::ext_info() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqInfo.ext_info)
  return ext_info_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendReqInfo::set_ext_info(const ::std::string& value) {
  set_has_ext_info();
  ext_info_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqInfo.ext_info)
}
 void RcFriendReqInfo::set_ext_info(const char* value) {
  set_has_ext_info();
  ext_info_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcFriendReqInfo.ext_info)
}
 void RcFriendReqInfo::set_ext_info(const void* value, size_t size) {
  set_has_ext_info();
  ext_info_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcFriendReqInfo.ext_info)
}
 ::std::string* RcFriendReqInfo::mutable_ext_info() {
  set_has_ext_info();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcFriendReqInfo.ext_info)
  return ext_info_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcFriendReqInfo::release_ext_info() {
  clear_has_ext_info();
  return ext_info_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendReqInfo::set_allocated_ext_info(::std::string* ext_info) {
  if (ext_info != NULL) {
    set_has_ext_info();
  } else {
    clear_has_ext_info();
  }
  ext_info_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ext_info);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcFriendReqInfo.ext_info)
}

// optional int32 create_time = 10;
bool RcFriendReqInfo::has_create_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RcFriendReqInfo::set_has_create_time() {
  _has_bits_[0] |= 0x00000200u;
}
void RcFriendReqInfo::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000200u;
}
void RcFriendReqInfo::clear_create_time() {
  create_time_ = 0;
  clear_has_create_time();
}
 ::youmecommon::protobuf::int32 RcFriendReqInfo::create_time() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqInfo.create_time)
  return create_time_;
}
 void RcFriendReqInfo::set_create_time(::youmecommon::protobuf::int32 value) {
  set_has_create_time();
  create_time_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqInfo.create_time)
}

// optional int32 update_time = 11;
bool RcFriendReqInfo::has_update_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void RcFriendReqInfo::set_has_update_time() {
  _has_bits_[0] |= 0x00000400u;
}
void RcFriendReqInfo::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000400u;
}
void RcFriendReqInfo::clear_update_time() {
  update_time_ = 0;
  clear_has_update_time();
}
 ::youmecommon::protobuf::int32 RcFriendReqInfo::update_time() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqInfo.update_time)
  return update_time_;
}
 void RcFriendReqInfo::set_update_time(::youmecommon::protobuf::int32 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqInfo.update_time)
}

// optional int32 is_browsed_by_app = 12;
bool RcFriendReqInfo::has_is_browsed_by_app() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void RcFriendReqInfo::set_has_is_browsed_by_app() {
  _has_bits_[0] |= 0x00000800u;
}
void RcFriendReqInfo::clear_has_is_browsed_by_app() {
  _has_bits_[0] &= ~0x00000800u;
}
void RcFriendReqInfo::clear_is_browsed_by_app() {
  is_browsed_by_app_ = 0;
  clear_has_is_browsed_by_app();
}
 ::youmecommon::protobuf::int32 RcFriendReqInfo::is_browsed_by_app() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqInfo.is_browsed_by_app)
  return is_browsed_by_app_;
}
 void RcFriendReqInfo::set_is_browsed_by_app(::youmecommon::protobuf::int32 value) {
  set_has_is_browsed_by_app();
  is_browsed_by_app_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqInfo.is_browsed_by_app)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetRcFriendReqListReq::kVersionFieldNumber;
const int GetRcFriendReqListReq::kStartIdxFieldNumber;
const int GetRcFriendReqListReq::kLenFieldNumber;
#endif  // !_MSC_VER

GetRcFriendReqListReq::GetRcFriendReqListReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.GetRcFriendReqListReq)
}

void GetRcFriendReqListReq::InitAsDefaultInstance() {
}

GetRcFriendReqListReq::GetRcFriendReqListReq(const GetRcFriendReqListReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.GetRcFriendReqListReq)
}

void GetRcFriendReqListReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  start_idx_ = 0;
  len_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRcFriendReqListReq::~GetRcFriendReqListReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.GetRcFriendReqListReq)
  SharedDtor();
}

void GetRcFriendReqListReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetRcFriendReqListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetRcFriendReqListReq& GetRcFriendReqListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto();
#endif
  return *default_instance_;
}

GetRcFriendReqListReq* GetRcFriendReqListReq::default_instance_ = NULL;

GetRcFriendReqListReq* GetRcFriendReqListReq::New(::youmecommon::protobuf::Arena* arena) const {
  GetRcFriendReqListReq* n = new GetRcFriendReqListReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRcFriendReqListReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetRcFriendReqListReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, len_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetRcFriendReqListReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.GetRcFriendReqListReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_idx;
        break;
      }

      // required int32 start_idx = 2;
      case 2: {
        if (tag == 16) {
         parse_start_idx:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_idx_)));
          set_has_start_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_len;
        break;
      }

      // required int32 len = 3;
      case 3: {
        if (tag == 24) {
         parse_len:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.GetRcFriendReqListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.GetRcFriendReqListReq)
  return false;
#undef DO_
}

void GetRcFriendReqListReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.GetRcFriendReqListReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 start_idx = 2;
  if (has_start_idx()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_idx(), output);
  }

  // required int32 len = 3;
  if (has_len()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->len(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.GetRcFriendReqListReq)
}

int GetRcFriendReqListReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_start_idx()) {
    // required int32 start_idx = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->start_idx());
  }

  if (has_len()) {
    // required int32 len = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->len());
  }

  return total_size;
}
int GetRcFriendReqListReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 start_idx = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->start_idx());

    // required int32 len = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->len());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRcFriendReqListReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetRcFriendReqListReq*>(&from));
}

void GetRcFriendReqListReq::MergeFrom(const GetRcFriendReqListReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_start_idx()) {
      set_start_idx(from.start_idx());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetRcFriendReqListReq::CopyFrom(const GetRcFriendReqListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRcFriendReqListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetRcFriendReqListReq::Swap(GetRcFriendReqListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRcFriendReqListReq::InternalSwap(GetRcFriendReqListReq* other) {
  std::swap(version_, other->version_);
  std::swap(start_idx_, other->start_idx_);
  std::swap(len_, other->len_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetRcFriendReqListReq::GetTypeName() const {
  return "YOUMEServiceProtocol.GetRcFriendReqListReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRcFriendReqListReq

// required int32 version = 1;
bool GetRcFriendReqListReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetRcFriendReqListReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GetRcFriendReqListReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetRcFriendReqListReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 GetRcFriendReqListReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcFriendReqListReq.version)
  return version_;
}
 void GetRcFriendReqListReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRcFriendReqListReq.version)
}

// required int32 start_idx = 2;
bool GetRcFriendReqListReq::has_start_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetRcFriendReqListReq::set_has_start_idx() {
  _has_bits_[0] |= 0x00000002u;
}
void GetRcFriendReqListReq::clear_has_start_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetRcFriendReqListReq::clear_start_idx() {
  start_idx_ = 0;
  clear_has_start_idx();
}
 ::youmecommon::protobuf::int32 GetRcFriendReqListReq::start_idx() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcFriendReqListReq.start_idx)
  return start_idx_;
}
 void GetRcFriendReqListReq::set_start_idx(::youmecommon::protobuf::int32 value) {
  set_has_start_idx();
  start_idx_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRcFriendReqListReq.start_idx)
}

// required int32 len = 3;
bool GetRcFriendReqListReq::has_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetRcFriendReqListReq::set_has_len() {
  _has_bits_[0] |= 0x00000004u;
}
void GetRcFriendReqListReq::clear_has_len() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetRcFriendReqListReq::clear_len() {
  len_ = 0;
  clear_has_len();
}
 ::youmecommon::protobuf::int32 GetRcFriendReqListReq::len() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcFriendReqListReq.len)
  return len_;
}
 void GetRcFriendReqListReq::set_len(::youmecommon::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRcFriendReqListReq.len)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetRcFriendReqListRsp::kVersionFieldNumber;
const int GetRcFriendReqListRsp::kRetFieldNumber;
const int GetRcFriendReqListRsp::kListCntFieldNumber;
const int GetRcFriendReqListRsp::kFriendReqListFieldNumber;
#endif  // !_MSC_VER

GetRcFriendReqListRsp::GetRcFriendReqListRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.GetRcFriendReqListRsp)
}

void GetRcFriendReqListRsp::InitAsDefaultInstance() {
}

GetRcFriendReqListRsp::GetRcFriendReqListRsp(const GetRcFriendReqListRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.GetRcFriendReqListRsp)
}

void GetRcFriendReqListRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  list_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRcFriendReqListRsp::~GetRcFriendReqListRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.GetRcFriendReqListRsp)
  SharedDtor();
}

void GetRcFriendReqListRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetRcFriendReqListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetRcFriendReqListRsp& GetRcFriendReqListRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto();
#endif
  return *default_instance_;
}

GetRcFriendReqListRsp* GetRcFriendReqListRsp::default_instance_ = NULL;

GetRcFriendReqListRsp* GetRcFriendReqListRsp::New(::youmecommon::protobuf::Arena* arena) const {
  GetRcFriendReqListRsp* n = new GetRcFriendReqListRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRcFriendReqListRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetRcFriendReqListRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(version_, ret_);
    list_cnt_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  friend_req_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetRcFriendReqListRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.GetRcFriendReqListRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_list_cnt;
        break;
      }

      // required int32 list_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_list_cnt:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &list_cnt_)));
          set_has_list_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_friend_req_list;
        break;
      }

      // repeated .YOUMEServiceProtocol.RcFriendReqInfo friend_req_list = 4;
      case 4: {
        if (tag == 34) {
         parse_friend_req_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_friend_req_list:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_friend_req_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_friend_req_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.GetRcFriendReqListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.GetRcFriendReqListRsp)
  return false;
#undef DO_
}

void GetRcFriendReqListRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.GetRcFriendReqListRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // required int32 list_cnt = 3;
  if (has_list_cnt()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->list_cnt(), output);
  }

  // repeated .YOUMEServiceProtocol.RcFriendReqInfo friend_req_list = 4;
  for (unsigned int i = 0, n = this->friend_req_list_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->friend_req_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.GetRcFriendReqListRsp)
}

int GetRcFriendReqListRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  if (has_list_cnt()) {
    // required int32 list_cnt = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->list_cnt());
  }

  return total_size;
}
int GetRcFriendReqListRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

    // required int32 list_cnt = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->list_cnt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .YOUMEServiceProtocol.RcFriendReqInfo friend_req_list = 4;
  total_size += 1 * this->friend_req_list_size();
  for (int i = 0; i < this->friend_req_list_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_req_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRcFriendReqListRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetRcFriendReqListRsp*>(&from));
}

void GetRcFriendReqListRsp::MergeFrom(const GetRcFriendReqListRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  friend_req_list_.MergeFrom(from.friend_req_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_list_cnt()) {
      set_list_cnt(from.list_cnt());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetRcFriendReqListRsp::CopyFrom(const GetRcFriendReqListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRcFriendReqListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->friend_req_list())) return false;
  return true;
}

void GetRcFriendReqListRsp::Swap(GetRcFriendReqListRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRcFriendReqListRsp::InternalSwap(GetRcFriendReqListRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(list_cnt_, other->list_cnt_);
  friend_req_list_.UnsafeArenaSwap(&other->friend_req_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetRcFriendReqListRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.GetRcFriendReqListRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRcFriendReqListRsp

// required int32 version = 1;
bool GetRcFriendReqListRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetRcFriendReqListRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GetRcFriendReqListRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetRcFriendReqListRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 GetRcFriendReqListRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcFriendReqListRsp.version)
  return version_;
}
 void GetRcFriendReqListRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRcFriendReqListRsp.version)
}

// required int32 ret = 2;
bool GetRcFriendReqListRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetRcFriendReqListRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void GetRcFriendReqListRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetRcFriendReqListRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 GetRcFriendReqListRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcFriendReqListRsp.ret)
  return ret_;
}
 void GetRcFriendReqListRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRcFriendReqListRsp.ret)
}

// required int32 list_cnt = 3;
bool GetRcFriendReqListRsp::has_list_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetRcFriendReqListRsp::set_has_list_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
void GetRcFriendReqListRsp::clear_has_list_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetRcFriendReqListRsp::clear_list_cnt() {
  list_cnt_ = 0;
  clear_has_list_cnt();
}
 ::youmecommon::protobuf::int32 GetRcFriendReqListRsp::list_cnt() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcFriendReqListRsp.list_cnt)
  return list_cnt_;
}
 void GetRcFriendReqListRsp::set_list_cnt(::youmecommon::protobuf::int32 value) {
  set_has_list_cnt();
  list_cnt_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetRcFriendReqListRsp.list_cnt)
}

// repeated .YOUMEServiceProtocol.RcFriendReqInfo friend_req_list = 4;
int GetRcFriendReqListRsp::friend_req_list_size() const {
  return friend_req_list_.size();
}
void GetRcFriendReqListRsp::clear_friend_req_list() {
  friend_req_list_.Clear();
}
const ::YOUMEServiceProtocol::RcFriendReqInfo& GetRcFriendReqListRsp::friend_req_list(int index) const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetRcFriendReqListRsp.friend_req_list)
  return friend_req_list_.Get(index);
}
::YOUMEServiceProtocol::RcFriendReqInfo* GetRcFriendReqListRsp::mutable_friend_req_list(int index) {
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.GetRcFriendReqListRsp.friend_req_list)
  return friend_req_list_.Mutable(index);
}
::YOUMEServiceProtocol::RcFriendReqInfo* GetRcFriendReqListRsp::add_friend_req_list() {
  // @@protoc_insertion_point(field_add:YOUMEServiceProtocol.GetRcFriendReqListRsp.friend_req_list)
  return friend_req_list_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::RcFriendReqInfo >*
GetRcFriendReqListRsp::mutable_friend_req_list() {
  // @@protoc_insertion_point(field_mutable_list:YOUMEServiceProtocol.GetRcFriendReqListRsp.friend_req_list)
  return &friend_req_list_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::RcFriendReqInfo >&
GetRcFriendReqListRsp::friend_req_list() const {
  // @@protoc_insertion_point(field_list:YOUMEServiceProtocol.GetRcFriendReqListRsp.friend_req_list)
  return friend_req_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RcFriendReqIdx::kAppIdFieldNumber;
const int RcFriendReqIdx::kReqIdFieldNumber;
const int RcFriendReqIdx::kReqTypeFieldNumber;
const int RcFriendReqIdx::kOtherSideFieldNumber;
#endif  // !_MSC_VER

RcFriendReqIdx::RcFriendReqIdx()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.RcFriendReqIdx)
}

void RcFriendReqIdx::InitAsDefaultInstance() {
}

RcFriendReqIdx::RcFriendReqIdx(const RcFriendReqIdx& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.RcFriendReqIdx)
}

void RcFriendReqIdx::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0;
  req_id_ = GOOGLE_ULONGLONG(0);
  req_type_ = 1;
  other_side_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RcFriendReqIdx::~RcFriendReqIdx() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.RcFriendReqIdx)
  SharedDtor();
}

void RcFriendReqIdx::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  other_side_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RcFriendReqIdx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RcFriendReqIdx& RcFriendReqIdx::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto();
#endif
  return *default_instance_;
}

RcFriendReqIdx* RcFriendReqIdx::default_instance_ = NULL;

RcFriendReqIdx* RcFriendReqIdx::New(::youmecommon::protobuf::Arena* arena) const {
  RcFriendReqIdx* n = new RcFriendReqIdx;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RcFriendReqIdx::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RcFriendReqIdx*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(req_id_, app_id_);
    req_type_ = 1;
    if (has_other_side()) {
      other_side_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RcFriendReqIdx::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.RcFriendReqIdx)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 app_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_req_id;
        break;
      }

      // required uint64 req_id = 2;
      case 2: {
        if (tag == 16) {
         parse_req_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &req_id_)));
          set_has_req_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_req_type;
        break;
      }

      // required .YOUMEServiceProtocol.RC_FRIEND_REQ_TYPE req_type = 3;
      case 3: {
        if (tag == 24) {
         parse_req_type:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YOUMEServiceProtocol::RC_FRIEND_REQ_TYPE_IsValid(value)) {
            set_req_type(static_cast< ::YOUMEServiceProtocol::RC_FRIEND_REQ_TYPE >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_other_side;
        break;
      }

      // required bytes other_side = 4;
      case 4: {
        if (tag == 34) {
         parse_other_side:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_other_side()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.RcFriendReqIdx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.RcFriendReqIdx)
  return false;
#undef DO_
}

void RcFriendReqIdx::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.RcFriendReqIdx)
  // required int32 app_id = 1;
  if (has_app_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->app_id(), output);
  }

  // required uint64 req_id = 2;
  if (has_req_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt64(2, this->req_id(), output);
  }

  // required .YOUMEServiceProtocol.RC_FRIEND_REQ_TYPE req_type = 3;
  if (has_req_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->req_type(), output);
  }

  // required bytes other_side = 4;
  if (has_other_side()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->other_side(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.RcFriendReqIdx)
}

int RcFriendReqIdx::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_app_id()) {
    // required int32 app_id = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->app_id());
  }

  if (has_req_id()) {
    // required uint64 req_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->req_id());
  }

  if (has_req_type()) {
    // required .YOUMEServiceProtocol.RC_FRIEND_REQ_TYPE req_type = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->req_type());
  }

  if (has_other_side()) {
    // required bytes other_side = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->other_side());
  }

  return total_size;
}
int RcFriendReqIdx::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 app_id = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->app_id());

    // required uint64 req_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
        this->req_id());

    // required .YOUMEServiceProtocol.RC_FRIEND_REQ_TYPE req_type = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->req_type());

    // required bytes other_side = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->other_side());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RcFriendReqIdx::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const RcFriendReqIdx*>(&from));
}

void RcFriendReqIdx::MergeFrom(const RcFriendReqIdx& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_req_id()) {
      set_req_id(from.req_id());
    }
    if (from.has_req_type()) {
      set_req_type(from.req_type());
    }
    if (from.has_other_side()) {
      set_has_other_side();
      other_side_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.other_side_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RcFriendReqIdx::CopyFrom(const RcFriendReqIdx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RcFriendReqIdx::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RcFriendReqIdx::Swap(RcFriendReqIdx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RcFriendReqIdx::InternalSwap(RcFriendReqIdx* other) {
  std::swap(app_id_, other->app_id_);
  std::swap(req_id_, other->req_id_);
  std::swap(req_type_, other->req_type_);
  other_side_.Swap(&other->other_side_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RcFriendReqIdx::GetTypeName() const {
  return "YOUMEServiceProtocol.RcFriendReqIdx";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RcFriendReqIdx

// required int32 app_id = 1;
bool RcFriendReqIdx::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RcFriendReqIdx::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RcFriendReqIdx::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RcFriendReqIdx::clear_app_id() {
  app_id_ = 0;
  clear_has_app_id();
}
 ::youmecommon::protobuf::int32 RcFriendReqIdx::app_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqIdx.app_id)
  return app_id_;
}
 void RcFriendReqIdx::set_app_id(::youmecommon::protobuf::int32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqIdx.app_id)
}

// required uint64 req_id = 2;
bool RcFriendReqIdx::has_req_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RcFriendReqIdx::set_has_req_id() {
  _has_bits_[0] |= 0x00000002u;
}
void RcFriendReqIdx::clear_has_req_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void RcFriendReqIdx::clear_req_id() {
  req_id_ = GOOGLE_ULONGLONG(0);
  clear_has_req_id();
}
 ::youmecommon::protobuf::uint64 RcFriendReqIdx::req_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqIdx.req_id)
  return req_id_;
}
 void RcFriendReqIdx::set_req_id(::youmecommon::protobuf::uint64 value) {
  set_has_req_id();
  req_id_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqIdx.req_id)
}

// required .YOUMEServiceProtocol.RC_FRIEND_REQ_TYPE req_type = 3;
bool RcFriendReqIdx::has_req_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RcFriendReqIdx::set_has_req_type() {
  _has_bits_[0] |= 0x00000004u;
}
void RcFriendReqIdx::clear_has_req_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void RcFriendReqIdx::clear_req_type() {
  req_type_ = 1;
  clear_has_req_type();
}
 ::YOUMEServiceProtocol::RC_FRIEND_REQ_TYPE RcFriendReqIdx::req_type() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqIdx.req_type)
  return static_cast< ::YOUMEServiceProtocol::RC_FRIEND_REQ_TYPE >(req_type_);
}
 void RcFriendReqIdx::set_req_type(::YOUMEServiceProtocol::RC_FRIEND_REQ_TYPE value) {
  assert(::YOUMEServiceProtocol::RC_FRIEND_REQ_TYPE_IsValid(value));
  set_has_req_type();
  req_type_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqIdx.req_type)
}

// required bytes other_side = 4;
bool RcFriendReqIdx::has_other_side() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RcFriendReqIdx::set_has_other_side() {
  _has_bits_[0] |= 0x00000008u;
}
void RcFriendReqIdx::clear_has_other_side() {
  _has_bits_[0] &= ~0x00000008u;
}
void RcFriendReqIdx::clear_other_side() {
  other_side_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_other_side();
}
 const ::std::string& RcFriendReqIdx::other_side() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcFriendReqIdx.other_side)
  return other_side_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendReqIdx::set_other_side(const ::std::string& value) {
  set_has_other_side();
  other_side_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcFriendReqIdx.other_side)
}
 void RcFriendReqIdx::set_other_side(const char* value) {
  set_has_other_side();
  other_side_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcFriendReqIdx.other_side)
}
 void RcFriendReqIdx::set_other_side(const void* value, size_t size) {
  set_has_other_side();
  other_side_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcFriendReqIdx.other_side)
}
 ::std::string* RcFriendReqIdx::mutable_other_side() {
  set_has_other_side();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcFriendReqIdx.other_side)
  return other_side_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RcFriendReqIdx::release_other_side() {
  clear_has_other_side();
  return other_side_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RcFriendReqIdx::set_allocated_other_side(::std::string* other_side) {
  if (other_side != NULL) {
    set_has_other_side();
  } else {
    clear_has_other_side();
  }
  other_side_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), other_side);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcFriendReqIdx.other_side)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AppBrowseRcFriendReqListReq::kVersionFieldNumber;
const int AppBrowseRcFriendReqListReq::kFriendReqListFieldNumber;
#endif  // !_MSC_VER

AppBrowseRcFriendReqListReq::AppBrowseRcFriendReqListReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.AppBrowseRcFriendReqListReq)
}

void AppBrowseRcFriendReqListReq::InitAsDefaultInstance() {
}

AppBrowseRcFriendReqListReq::AppBrowseRcFriendReqListReq(const AppBrowseRcFriendReqListReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.AppBrowseRcFriendReqListReq)
}

void AppBrowseRcFriendReqListReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppBrowseRcFriendReqListReq::~AppBrowseRcFriendReqListReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.AppBrowseRcFriendReqListReq)
  SharedDtor();
}

void AppBrowseRcFriendReqListReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AppBrowseRcFriendReqListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AppBrowseRcFriendReqListReq& AppBrowseRcFriendReqListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto();
#endif
  return *default_instance_;
}

AppBrowseRcFriendReqListReq* AppBrowseRcFriendReqListReq::default_instance_ = NULL;

AppBrowseRcFriendReqListReq* AppBrowseRcFriendReqListReq::New(::youmecommon::protobuf::Arena* arena) const {
  AppBrowseRcFriendReqListReq* n = new AppBrowseRcFriendReqListReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppBrowseRcFriendReqListReq::Clear() {
  version_ = 0;
  friend_req_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AppBrowseRcFriendReqListReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.AppBrowseRcFriendReqListReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_friend_req_list;
        break;
      }

      // repeated .YOUMEServiceProtocol.RcFriendReqIdx friend_req_list = 2;
      case 2: {
        if (tag == 18) {
         parse_friend_req_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_friend_req_list:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_friend_req_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_friend_req_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.AppBrowseRcFriendReqListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.AppBrowseRcFriendReqListReq)
  return false;
#undef DO_
}

void AppBrowseRcFriendReqListReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.AppBrowseRcFriendReqListReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // repeated .YOUMEServiceProtocol.RcFriendReqIdx friend_req_list = 2;
  for (unsigned int i = 0, n = this->friend_req_list_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->friend_req_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.AppBrowseRcFriendReqListReq)
}

int AppBrowseRcFriendReqListReq::ByteSize() const {
  int total_size = 0;

  // required int32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }
  // repeated .YOUMEServiceProtocol.RcFriendReqIdx friend_req_list = 2;
  total_size += 1 * this->friend_req_list_size();
  for (int i = 0; i < this->friend_req_list_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_req_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppBrowseRcFriendReqListReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const AppBrowseRcFriendReqListReq*>(&from));
}

void AppBrowseRcFriendReqListReq::MergeFrom(const AppBrowseRcFriendReqListReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  friend_req_list_.MergeFrom(from.friend_req_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AppBrowseRcFriendReqListReq::CopyFrom(const AppBrowseRcFriendReqListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppBrowseRcFriendReqListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->friend_req_list())) return false;
  return true;
}

void AppBrowseRcFriendReqListReq::Swap(AppBrowseRcFriendReqListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppBrowseRcFriendReqListReq::InternalSwap(AppBrowseRcFriendReqListReq* other) {
  std::swap(version_, other->version_);
  friend_req_list_.UnsafeArenaSwap(&other->friend_req_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AppBrowseRcFriendReqListReq::GetTypeName() const {
  return "YOUMEServiceProtocol.AppBrowseRcFriendReqListReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppBrowseRcFriendReqListReq

// required int32 version = 1;
bool AppBrowseRcFriendReqListReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AppBrowseRcFriendReqListReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void AppBrowseRcFriendReqListReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void AppBrowseRcFriendReqListReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 AppBrowseRcFriendReqListReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.AppBrowseRcFriendReqListReq.version)
  return version_;
}
 void AppBrowseRcFriendReqListReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.AppBrowseRcFriendReqListReq.version)
}

// repeated .YOUMEServiceProtocol.RcFriendReqIdx friend_req_list = 2;
int AppBrowseRcFriendReqListReq::friend_req_list_size() const {
  return friend_req_list_.size();
}
void AppBrowseRcFriendReqListReq::clear_friend_req_list() {
  friend_req_list_.Clear();
}
const ::YOUMEServiceProtocol::RcFriendReqIdx& AppBrowseRcFriendReqListReq::friend_req_list(int index) const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.AppBrowseRcFriendReqListReq.friend_req_list)
  return friend_req_list_.Get(index);
}
::YOUMEServiceProtocol::RcFriendReqIdx* AppBrowseRcFriendReqListReq::mutable_friend_req_list(int index) {
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.AppBrowseRcFriendReqListReq.friend_req_list)
  return friend_req_list_.Mutable(index);
}
::YOUMEServiceProtocol::RcFriendReqIdx* AppBrowseRcFriendReqListReq::add_friend_req_list() {
  // @@protoc_insertion_point(field_add:YOUMEServiceProtocol.AppBrowseRcFriendReqListReq.friend_req_list)
  return friend_req_list_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::RcFriendReqIdx >*
AppBrowseRcFriendReqListReq::mutable_friend_req_list() {
  // @@protoc_insertion_point(field_mutable_list:YOUMEServiceProtocol.AppBrowseRcFriendReqListReq.friend_req_list)
  return &friend_req_list_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YOUMEServiceProtocol::RcFriendReqIdx >&
AppBrowseRcFriendReqListReq::friend_req_list() const {
  // @@protoc_insertion_point(field_list:YOUMEServiceProtocol.AppBrowseRcFriendReqListReq.friend_req_list)
  return friend_req_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AppBrowseRcFriendReqListRsp::kVersionFieldNumber;
const int AppBrowseRcFriendReqListRsp::kRetFieldNumber;
#endif  // !_MSC_VER

AppBrowseRcFriendReqListRsp::AppBrowseRcFriendReqListRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.AppBrowseRcFriendReqListRsp)
}

void AppBrowseRcFriendReqListRsp::InitAsDefaultInstance() {
}

AppBrowseRcFriendReqListRsp::AppBrowseRcFriendReqListRsp(const AppBrowseRcFriendReqListRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.AppBrowseRcFriendReqListRsp)
}

void AppBrowseRcFriendReqListRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppBrowseRcFriendReqListRsp::~AppBrowseRcFriendReqListRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.AppBrowseRcFriendReqListRsp)
  SharedDtor();
}

void AppBrowseRcFriendReqListRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AppBrowseRcFriendReqListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AppBrowseRcFriendReqListRsp& AppBrowseRcFriendReqListRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5frc_5fget_5ffriend_5flist_2eproto();
#endif
  return *default_instance_;
}

AppBrowseRcFriendReqListRsp* AppBrowseRcFriendReqListRsp::default_instance_ = NULL;

AppBrowseRcFriendReqListRsp* AppBrowseRcFriendReqListRsp::New(::youmecommon::protobuf::Arena* arena) const {
  AppBrowseRcFriendReqListRsp* n = new AppBrowseRcFriendReqListRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppBrowseRcFriendReqListRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AppBrowseRcFriendReqListRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, ret_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AppBrowseRcFriendReqListRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.AppBrowseRcFriendReqListRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.AppBrowseRcFriendReqListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.AppBrowseRcFriendReqListRsp)
  return false;
#undef DO_
}

void AppBrowseRcFriendReqListRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.AppBrowseRcFriendReqListRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.AppBrowseRcFriendReqListRsp)
}

int AppBrowseRcFriendReqListRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  return total_size;
}
int AppBrowseRcFriendReqListRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppBrowseRcFriendReqListRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const AppBrowseRcFriendReqListRsp*>(&from));
}

void AppBrowseRcFriendReqListRsp::MergeFrom(const AppBrowseRcFriendReqListRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AppBrowseRcFriendReqListRsp::CopyFrom(const AppBrowseRcFriendReqListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppBrowseRcFriendReqListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AppBrowseRcFriendReqListRsp::Swap(AppBrowseRcFriendReqListRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppBrowseRcFriendReqListRsp::InternalSwap(AppBrowseRcFriendReqListRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AppBrowseRcFriendReqListRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.AppBrowseRcFriendReqListRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppBrowseRcFriendReqListRsp

// required int32 version = 1;
bool AppBrowseRcFriendReqListRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AppBrowseRcFriendReqListRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void AppBrowseRcFriendReqListRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void AppBrowseRcFriendReqListRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 AppBrowseRcFriendReqListRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.AppBrowseRcFriendReqListRsp.version)
  return version_;
}
 void AppBrowseRcFriendReqListRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.AppBrowseRcFriendReqListRsp.version)
}

// required int32 ret = 2;
bool AppBrowseRcFriendReqListRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AppBrowseRcFriendReqListRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void AppBrowseRcFriendReqListRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void AppBrowseRcFriendReqListRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 AppBrowseRcFriendReqListRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.AppBrowseRcFriendReqListRsp.ret)
  return ret_;
}
 void AppBrowseRcFriendReqListRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.AppBrowseRcFriendReqListRsp.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YOUMEServiceProtocol

// @@protoc_insertion_point(global_scope)
