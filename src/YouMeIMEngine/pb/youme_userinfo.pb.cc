// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youme_userinfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "youme_userinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YOUMEServiceProtocol {

void protobuf_ShutdownFile_youme_5fuserinfo_2eproto() {
  delete GetUserInfoReq::default_instance_;
  delete GetUserInfoRsp::default_instance_;
  delete UpdateUserInfoReq::default_instance_;
  delete UpdateUserInfoRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_youme_5fuserinfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_youme_5fuserinfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  GetUserInfoReq::default_instance_ = new GetUserInfoReq();
  GetUserInfoRsp::default_instance_ = new GetUserInfoRsp();
  UpdateUserInfoReq::default_instance_ = new UpdateUserInfoReq();
  UpdateUserInfoRsp::default_instance_ = new UpdateUserInfoRsp();
  GetUserInfoReq::default_instance_->InitAsDefaultInstance();
  GetUserInfoRsp::default_instance_->InitAsDefaultInstance();
  UpdateUserInfoReq::default_instance_->InitAsDefaultInstance();
  UpdateUserInfoRsp::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_youme_5fuserinfo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_youme_5fuserinfo_2eproto_once_);
void protobuf_AddDesc_youme_5fuserinfo_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_youme_5fuserinfo_2eproto_once_,
                 &protobuf_AddDesc_youme_5fuserinfo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_youme_5fuserinfo_2eproto {
  StaticDescriptorInitializer_youme_5fuserinfo_2eproto() {
    protobuf_AddDesc_youme_5fuserinfo_2eproto();
  }
} static_descriptor_initializer_youme_5fuserinfo_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int GetUserInfoReq::kVersionFieldNumber;
const int GetUserInfoReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetUserInfoReq::GetUserInfoReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.GetUserInfoReq)
}

void GetUserInfoReq::InitAsDefaultInstance() {
}

GetUserInfoReq::GetUserInfoReq(const GetUserInfoReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.GetUserInfoReq)
}

void GetUserInfoReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserInfoReq::~GetUserInfoReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.GetUserInfoReq)
  SharedDtor();
}

void GetUserInfoReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserInfoReq& GetUserInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fuserinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fuserinfo_2eproto();
#endif
  return *default_instance_;
}

GetUserInfoReq* GetUserInfoReq::default_instance_ = NULL;

GetUserInfoReq* GetUserInfoReq::New(::youmecommon::protobuf::Arena* arena) const {
  GetUserInfoReq* n = new GetUserInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetUserInfoReq::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    version_ = 0;
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetUserInfoReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.GetUserInfoReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // required bytes user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.GetUserInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.GetUserInfoReq)
  return false;
#undef DO_
}

void GetUserInfoReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.GetUserInfoReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required bytes user_id = 2;
  if (has_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.GetUserInfoReq)
}

int GetUserInfoReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_user_id()) {
    // required bytes user_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());
  }

  return total_size;
}
int GetUserInfoReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required bytes user_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserInfoReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetUserInfoReq*>(&from));
}

void GetUserInfoReq::MergeFrom(const GetUserInfoReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserInfoReq::CopyFrom(const GetUserInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetUserInfoReq::Swap(GetUserInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUserInfoReq::InternalSwap(GetUserInfoReq* other) {
  std::swap(version_, other->version_);
  user_id_.Swap(&other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetUserInfoReq::GetTypeName() const {
  return "YOUMEServiceProtocol.GetUserInfoReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetUserInfoReq

// required int32 version = 1;
bool GetUserInfoReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetUserInfoReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GetUserInfoReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetUserInfoReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 GetUserInfoReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetUserInfoReq.version)
  return version_;
}
 void GetUserInfoReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetUserInfoReq.version)
}

// required bytes user_id = 2;
bool GetUserInfoReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetUserInfoReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void GetUserInfoReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetUserInfoReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& GetUserInfoReq::user_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetUserInfoReq.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetUserInfoReq::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetUserInfoReq.user_id)
}
 void GetUserInfoReq::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.GetUserInfoReq.user_id)
}
 void GetUserInfoReq::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.GetUserInfoReq.user_id)
}
 ::std::string* GetUserInfoReq::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.GetUserInfoReq.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetUserInfoReq::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetUserInfoReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.GetUserInfoReq.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetUserInfoRsp::kVersionFieldNumber;
const int GetUserInfoRsp::kUserInfoFieldNumber;
const int GetUserInfoRsp::kLongitudeFieldNumber;
const int GetUserInfoRsp::kLatitudeFieldNumber;
#endif  // !_MSC_VER

GetUserInfoRsp::GetUserInfoRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.GetUserInfoRsp)
}

void GetUserInfoRsp::InitAsDefaultInstance() {
}

GetUserInfoRsp::GetUserInfoRsp(const GetUserInfoRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.GetUserInfoRsp)
}

void GetUserInfoRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  user_info_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  longitude_ = 0;
  latitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserInfoRsp::~GetUserInfoRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.GetUserInfoRsp)
  SharedDtor();
}

void GetUserInfoRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_info_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetUserInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetUserInfoRsp& GetUserInfoRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fuserinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fuserinfo_2eproto();
#endif
  return *default_instance_;
}

GetUserInfoRsp* GetUserInfoRsp::default_instance_ = NULL;

GetUserInfoRsp* GetUserInfoRsp::New(::youmecommon::protobuf::Arena* arena) const {
  GetUserInfoRsp* n = new GetUserInfoRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetUserInfoRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetUserInfoRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(longitude_, version_);
    if (has_user_info()) {
      user_info_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetUserInfoRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.GetUserInfoRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_info;
        break;
      }

      // required bytes user_info = 2;
      case 2: {
        if (tag == 18) {
         parse_user_info:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_longitude;
        break;
      }

      // optional double longitude = 3;
      case 3: {
        if (tag == 25) {
         parse_longitude:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_latitude;
        break;
      }

      // optional double latitude = 4;
      case 4: {
        if (tag == 33) {
         parse_latitude:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.GetUserInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.GetUserInfoRsp)
  return false;
#undef DO_
}

void GetUserInfoRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.GetUserInfoRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required bytes user_info = 2;
  if (has_user_info()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_info(), output);
  }

  // optional double longitude = 3;
  if (has_longitude()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitude(), output);
  }

  // optional double latitude = 4;
  if (has_latitude()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteDouble(4, this->latitude(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.GetUserInfoRsp)
}

int GetUserInfoRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_user_info()) {
    // required bytes user_info = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->user_info());
  }

  return total_size;
}
int GetUserInfoRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required bytes user_info = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->user_info());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional double longitude = 3;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional double latitude = 4;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserInfoRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetUserInfoRsp*>(&from));
}

void GetUserInfoRsp::MergeFrom(const GetUserInfoRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_user_info()) {
      set_has_user_info();
      user_info_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_info_);
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetUserInfoRsp::CopyFrom(const GetUserInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetUserInfoRsp::Swap(GetUserInfoRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUserInfoRsp::InternalSwap(GetUserInfoRsp* other) {
  std::swap(version_, other->version_);
  user_info_.Swap(&other->user_info_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetUserInfoRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.GetUserInfoRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetUserInfoRsp

// required int32 version = 1;
bool GetUserInfoRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetUserInfoRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GetUserInfoRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetUserInfoRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 GetUserInfoRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetUserInfoRsp.version)
  return version_;
}
 void GetUserInfoRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetUserInfoRsp.version)
}

// required bytes user_info = 2;
bool GetUserInfoRsp::has_user_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetUserInfoRsp::set_has_user_info() {
  _has_bits_[0] |= 0x00000002u;
}
void GetUserInfoRsp::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetUserInfoRsp::clear_user_info() {
  user_info_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_info();
}
 const ::std::string& GetUserInfoRsp::user_info() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetUserInfoRsp.user_info)
  return user_info_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetUserInfoRsp::set_user_info(const ::std::string& value) {
  set_has_user_info();
  user_info_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetUserInfoRsp.user_info)
}
 void GetUserInfoRsp::set_user_info(const char* value) {
  set_has_user_info();
  user_info_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.GetUserInfoRsp.user_info)
}
 void GetUserInfoRsp::set_user_info(const void* value, size_t size) {
  set_has_user_info();
  user_info_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.GetUserInfoRsp.user_info)
}
 ::std::string* GetUserInfoRsp::mutable_user_info() {
  set_has_user_info();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.GetUserInfoRsp.user_info)
  return user_info_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetUserInfoRsp::release_user_info() {
  clear_has_user_info();
  return user_info_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetUserInfoRsp::set_allocated_user_info(::std::string* user_info) {
  if (user_info != NULL) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  user_info_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_info);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.GetUserInfoRsp.user_info)
}

// optional double longitude = 3;
bool GetUserInfoRsp::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetUserInfoRsp::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
void GetUserInfoRsp::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetUserInfoRsp::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
 double GetUserInfoRsp::longitude() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetUserInfoRsp.longitude)
  return longitude_;
}
 void GetUserInfoRsp::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetUserInfoRsp.longitude)
}

// optional double latitude = 4;
bool GetUserInfoRsp::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetUserInfoRsp::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
void GetUserInfoRsp::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetUserInfoRsp::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
 double GetUserInfoRsp::latitude() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.GetUserInfoRsp.latitude)
  return latitude_;
}
 void GetUserInfoRsp::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.GetUserInfoRsp.latitude)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int UpdateUserInfoReq::kVersionFieldNumber;
const int UpdateUserInfoReq::kUserInfoFieldNumber;
#endif  // !_MSC_VER

UpdateUserInfoReq::UpdateUserInfoReq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.UpdateUserInfoReq)
}

void UpdateUserInfoReq::InitAsDefaultInstance() {
}

UpdateUserInfoReq::UpdateUserInfoReq(const UpdateUserInfoReq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.UpdateUserInfoReq)
}

void UpdateUserInfoReq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  user_info_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserInfoReq::~UpdateUserInfoReq() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.UpdateUserInfoReq)
  SharedDtor();
}

void UpdateUserInfoReq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_info_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpdateUserInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateUserInfoReq& UpdateUserInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fuserinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fuserinfo_2eproto();
#endif
  return *default_instance_;
}

UpdateUserInfoReq* UpdateUserInfoReq::default_instance_ = NULL;

UpdateUserInfoReq* UpdateUserInfoReq::New(::youmecommon::protobuf::Arena* arena) const {
  UpdateUserInfoReq* n = new UpdateUserInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateUserInfoReq::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    version_ = 0;
    if (has_user_info()) {
      user_info_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UpdateUserInfoReq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.UpdateUserInfoReq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_info;
        break;
      }

      // required bytes user_info = 2;
      case 2: {
        if (tag == 18) {
         parse_user_info:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.UpdateUserInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.UpdateUserInfoReq)
  return false;
#undef DO_
}

void UpdateUserInfoReq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.UpdateUserInfoReq)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required bytes user_info = 2;
  if (has_user_info()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_info(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.UpdateUserInfoReq)
}

int UpdateUserInfoReq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_user_info()) {
    // required bytes user_info = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->user_info());
  }

  return total_size;
}
int UpdateUserInfoReq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required bytes user_info = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->user_info());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserInfoReq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const UpdateUserInfoReq*>(&from));
}

void UpdateUserInfoReq::MergeFrom(const UpdateUserInfoReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_user_info()) {
      set_has_user_info();
      user_info_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_info_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UpdateUserInfoReq::CopyFrom(const UpdateUserInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpdateUserInfoReq::Swap(UpdateUserInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateUserInfoReq::InternalSwap(UpdateUserInfoReq* other) {
  std::swap(version_, other->version_);
  user_info_.Swap(&other->user_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UpdateUserInfoReq::GetTypeName() const {
  return "YOUMEServiceProtocol.UpdateUserInfoReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateUserInfoReq

// required int32 version = 1;
bool UpdateUserInfoReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpdateUserInfoReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void UpdateUserInfoReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateUserInfoReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 UpdateUserInfoReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.UpdateUserInfoReq.version)
  return version_;
}
 void UpdateUserInfoReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.UpdateUserInfoReq.version)
}

// required bytes user_info = 2;
bool UpdateUserInfoReq::has_user_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UpdateUserInfoReq::set_has_user_info() {
  _has_bits_[0] |= 0x00000002u;
}
void UpdateUserInfoReq::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void UpdateUserInfoReq::clear_user_info() {
  user_info_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_info();
}
 const ::std::string& UpdateUserInfoReq::user_info() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.UpdateUserInfoReq.user_info)
  return user_info_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateUserInfoReq::set_user_info(const ::std::string& value) {
  set_has_user_info();
  user_info_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.UpdateUserInfoReq.user_info)
}
 void UpdateUserInfoReq::set_user_info(const char* value) {
  set_has_user_info();
  user_info_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.UpdateUserInfoReq.user_info)
}
 void UpdateUserInfoReq::set_user_info(const void* value, size_t size) {
  set_has_user_info();
  user_info_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.UpdateUserInfoReq.user_info)
}
 ::std::string* UpdateUserInfoReq::mutable_user_info() {
  set_has_user_info();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.UpdateUserInfoReq.user_info)
  return user_info_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpdateUserInfoReq::release_user_info() {
  clear_has_user_info();
  return user_info_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateUserInfoReq::set_allocated_user_info(::std::string* user_info) {
  if (user_info != NULL) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  user_info_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_info);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.UpdateUserInfoReq.user_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int UpdateUserInfoRsp::kVersionFieldNumber;
const int UpdateUserInfoRsp::kRetFieldNumber;
#endif  // !_MSC_VER

UpdateUserInfoRsp::UpdateUserInfoRsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YOUMEServiceProtocol.UpdateUserInfoRsp)
}

void UpdateUserInfoRsp::InitAsDefaultInstance() {
}

UpdateUserInfoRsp::UpdateUserInfoRsp(const UpdateUserInfoRsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YOUMEServiceProtocol.UpdateUserInfoRsp)
}

void UpdateUserInfoRsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserInfoRsp::~UpdateUserInfoRsp() {
  // @@protoc_insertion_point(destructor:YOUMEServiceProtocol.UpdateUserInfoRsp)
  SharedDtor();
}

void UpdateUserInfoRsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpdateUserInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateUserInfoRsp& UpdateUserInfoRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_youme_5fuserinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_youme_5fuserinfo_2eproto();
#endif
  return *default_instance_;
}

UpdateUserInfoRsp* UpdateUserInfoRsp::default_instance_ = NULL;

UpdateUserInfoRsp* UpdateUserInfoRsp::New(::youmecommon::protobuf::Arena* arena) const {
  UpdateUserInfoRsp* n = new UpdateUserInfoRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateUserInfoRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UpdateUserInfoRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, ret_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UpdateUserInfoRsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YOUMEServiceProtocol.UpdateUserInfoRsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required int32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YOUMEServiceProtocol.UpdateUserInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YOUMEServiceProtocol.UpdateUserInfoRsp)
  return false;
#undef DO_
}

void UpdateUserInfoRsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YOUMEServiceProtocol.UpdateUserInfoRsp)
  // required int32 version = 1;
  if (has_version()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required int32 ret = 2;
  if (has_ret()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YOUMEServiceProtocol.UpdateUserInfoRsp)
}

int UpdateUserInfoRsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_ret()) {
    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  return total_size;
}
int UpdateUserInfoRsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required int32 ret = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserInfoRsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const UpdateUserInfoRsp*>(&from));
}

void UpdateUserInfoRsp::MergeFrom(const UpdateUserInfoRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UpdateUserInfoRsp::CopyFrom(const UpdateUserInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpdateUserInfoRsp::Swap(UpdateUserInfoRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateUserInfoRsp::InternalSwap(UpdateUserInfoRsp* other) {
  std::swap(version_, other->version_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UpdateUserInfoRsp::GetTypeName() const {
  return "YOUMEServiceProtocol.UpdateUserInfoRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateUserInfoRsp

// required int32 version = 1;
bool UpdateUserInfoRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpdateUserInfoRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void UpdateUserInfoRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateUserInfoRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::youmecommon::protobuf::int32 UpdateUserInfoRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.UpdateUserInfoRsp.version)
  return version_;
}
 void UpdateUserInfoRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.UpdateUserInfoRsp.version)
}

// required int32 ret = 2;
bool UpdateUserInfoRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UpdateUserInfoRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void UpdateUserInfoRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void UpdateUserInfoRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::youmecommon::protobuf::int32 UpdateUserInfoRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.UpdateUserInfoRsp.ret)
  return ret_;
}
 void UpdateUserInfoRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.UpdateUserInfoRsp.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YOUMEServiceProtocol

// @@protoc_insertion_point(global_scope)
