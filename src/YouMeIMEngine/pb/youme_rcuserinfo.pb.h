// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youme_rcuserinfo.proto

#ifndef PROTOBUF_youme_5frcuserinfo_2eproto__INCLUDED
#define PROTOBUF_youme_5frcuserinfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace YOUMEServiceProtocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_youme_5frcuserinfo_2eproto();
void protobuf_AssignDesc_youme_5frcuserinfo_2eproto();
void protobuf_ShutdownFile_youme_5frcuserinfo_2eproto();

class RcHeartbeatReq;
class RcHeartbeatRsp;
class RcUserBriefInfo;
class RcUserInfo;

enum RC_ONLINE_STATE {
  RC_ONLINE = 1,
  RC_HIDDEN = 2,
  RC_OFFLINE = 3
};
bool RC_ONLINE_STATE_IsValid(int value);
const RC_ONLINE_STATE RC_ONLINE_STATE_MIN = RC_ONLINE;
const RC_ONLINE_STATE RC_ONLINE_STATE_MAX = RC_OFFLINE;
const int RC_ONLINE_STATE_ARRAYSIZE = RC_ONLINE_STATE_MAX + 1;

// ===================================================================

class RcUserInfo : public ::youmecommon::protobuf::MessageLite {
 public:
  RcUserInfo();
  virtual ~RcUserInfo();

  RcUserInfo(const RcUserInfo& from);

  inline RcUserInfo& operator=(const RcUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const RcUserInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RcUserInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RcUserInfo* other);

  // implements Message ----------------------------------------------

  inline RcUserInfo* New() const { return New(NULL); }

  RcUserInfo* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const RcUserInfo& from);
  void MergeFrom(const RcUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RcUserInfo* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const void* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional bytes nickname = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  void set_nickname(const char* value);
  void set_nickname(const void* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional int32 gender = 3;
  bool has_gender() const;
  void clear_gender();
  static const int kGenderFieldNumber = 3;
  ::youmecommon::protobuf::int32 gender() const;
  void set_gender(::youmecommon::protobuf::int32 value);

  // optional bytes country = 4;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 4;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  void set_country(const char* value);
  void set_country(const void* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // optional bytes province = 5;
  bool has_province() const;
  void clear_province();
  static const int kProvinceFieldNumber = 5;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  void set_province(const char* value);
  void set_province(const void* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // optional int32 privacy = 6;
  bool has_privacy() const;
  void clear_privacy();
  static const int kPrivacyFieldNumber = 6;
  ::youmecommon::protobuf::int32 privacy() const;
  void set_privacy(::youmecommon::protobuf::int32 value);

  // optional bytes city = 7;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 7;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  void set_city(const char* value);
  void set_city(const void* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // optional bytes avatar = 8;
  bool has_avatar() const;
  void clear_avatar();
  static const int kAvatarFieldNumber = 8;
  const ::std::string& avatar() const;
  void set_avatar(const ::std::string& value);
  void set_avatar(const char* value);
  void set_avatar(const void* value, size_t size);
  ::std::string* mutable_avatar();
  ::std::string* release_avatar();
  void set_allocated_avatar(::std::string* avatar);

  // optional bytes signature = 9;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 9;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional string extand_json = 10;
  bool has_extand_json() const;
  void clear_extand_json();
  static const int kExtandJsonFieldNumber = 10;
  const ::std::string& extand_json() const;
  void set_extand_json(const ::std::string& value);
  void set_extand_json(const char* value);
  void set_extand_json(const char* value, size_t size);
  ::std::string* mutable_extand_json();
  ::std::string* release_extand_json();
  void set_allocated_extand_json(::std::string* extand_json);

  // optional .YOUMEServiceProtocol.RC_ONLINE_STATE online_state = 11;
  bool has_online_state() const;
  void clear_online_state();
  static const int kOnlineStateFieldNumber = 11;
  ::YOUMEServiceProtocol::RC_ONLINE_STATE online_state() const;
  void set_online_state(::YOUMEServiceProtocol::RC_ONLINE_STATE value);

  // @@protoc_insertion_point(class_scope:YOUMEServiceProtocol.RcUserInfo)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_province();
  inline void clear_has_province();
  inline void set_has_privacy();
  inline void clear_has_privacy();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_extand_json();
  inline void clear_has_extand_json();
  inline void set_has_online_state();
  inline void clear_has_online_state();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::internal::ArenaStringPtr user_id_;
  ::youmecommon::protobuf::internal::ArenaStringPtr nickname_;
  ::youmecommon::protobuf::internal::ArenaStringPtr country_;
  ::youmecommon::protobuf::int32 gender_;
  ::youmecommon::protobuf::int32 privacy_;
  ::youmecommon::protobuf::internal::ArenaStringPtr province_;
  ::youmecommon::protobuf::internal::ArenaStringPtr city_;
  ::youmecommon::protobuf::internal::ArenaStringPtr avatar_;
  ::youmecommon::protobuf::internal::ArenaStringPtr signature_;
  ::youmecommon::protobuf::internal::ArenaStringPtr extand_json_;
  int online_state_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_youme_5frcuserinfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_youme_5frcuserinfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_youme_5frcuserinfo_2eproto();
  friend void protobuf_ShutdownFile_youme_5frcuserinfo_2eproto();

  void InitAsDefaultInstance();
  static RcUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class RcUserBriefInfo : public ::youmecommon::protobuf::MessageLite {
 public:
  RcUserBriefInfo();
  virtual ~RcUserBriefInfo();

  RcUserBriefInfo(const RcUserBriefInfo& from);

  inline RcUserBriefInfo& operator=(const RcUserBriefInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const RcUserBriefInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RcUserBriefInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RcUserBriefInfo* other);

  // implements Message ----------------------------------------------

  inline RcUserBriefInfo* New() const { return New(NULL); }

  RcUserBriefInfo* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const RcUserBriefInfo& from);
  void MergeFrom(const RcUserBriefInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RcUserBriefInfo* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const void* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional bytes nickname = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  void set_nickname(const char* value);
  void set_nickname(const void* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional int32 privacy = 3;
  bool has_privacy() const;
  void clear_privacy();
  static const int kPrivacyFieldNumber = 3;
  ::youmecommon::protobuf::int32 privacy() const;
  void set_privacy(::youmecommon::protobuf::int32 value);

  // optional .YOUMEServiceProtocol.RC_ONLINE_STATE online_state = 4;
  bool has_online_state() const;
  void clear_online_state();
  static const int kOnlineStateFieldNumber = 4;
  ::YOUMEServiceProtocol::RC_ONLINE_STATE online_state() const;
  void set_online_state(::YOUMEServiceProtocol::RC_ONLINE_STATE value);

  // @@protoc_insertion_point(class_scope:YOUMEServiceProtocol.RcUserBriefInfo)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_privacy();
  inline void clear_has_privacy();
  inline void set_has_online_state();
  inline void clear_has_online_state();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::internal::ArenaStringPtr user_id_;
  ::youmecommon::protobuf::internal::ArenaStringPtr nickname_;
  ::youmecommon::protobuf::int32 privacy_;
  int online_state_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_youme_5frcuserinfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_youme_5frcuserinfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_youme_5frcuserinfo_2eproto();
  friend void protobuf_ShutdownFile_youme_5frcuserinfo_2eproto();

  void InitAsDefaultInstance();
  static RcUserBriefInfo* default_instance_;
};
// -------------------------------------------------------------------

class RcHeartbeatReq : public ::youmecommon::protobuf::MessageLite {
 public:
  RcHeartbeatReq();
  virtual ~RcHeartbeatReq();

  RcHeartbeatReq(const RcHeartbeatReq& from);

  inline RcHeartbeatReq& operator=(const RcHeartbeatReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const RcHeartbeatReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RcHeartbeatReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RcHeartbeatReq* other);

  // implements Message ----------------------------------------------

  inline RcHeartbeatReq* New() const { return New(NULL); }

  RcHeartbeatReq* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const RcHeartbeatReq& from);
  void MergeFrom(const RcHeartbeatReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RcHeartbeatReq* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::youmecommon::protobuf::int32 version() const;
  void set_version(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YOUMEServiceProtocol.RcHeartbeatReq)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::int32 version_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_youme_5frcuserinfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_youme_5frcuserinfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_youme_5frcuserinfo_2eproto();
  friend void protobuf_ShutdownFile_youme_5frcuserinfo_2eproto();

  void InitAsDefaultInstance();
  static RcHeartbeatReq* default_instance_;
};
// -------------------------------------------------------------------

class RcHeartbeatRsp : public ::youmecommon::protobuf::MessageLite {
 public:
  RcHeartbeatRsp();
  virtual ~RcHeartbeatRsp();

  RcHeartbeatRsp(const RcHeartbeatRsp& from);

  inline RcHeartbeatRsp& operator=(const RcHeartbeatRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const RcHeartbeatRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RcHeartbeatRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RcHeartbeatRsp* other);

  // implements Message ----------------------------------------------

  inline RcHeartbeatRsp* New() const { return New(NULL); }

  RcHeartbeatRsp* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const RcHeartbeatRsp& from);
  void MergeFrom(const RcHeartbeatRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RcHeartbeatRsp* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::youmecommon::protobuf::int32 version() const;
  void set_version(::youmecommon::protobuf::int32 value);

  // required int32 ret = 2;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 2;
  ::youmecommon::protobuf::int32 ret() const;
  void set_ret(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YOUMEServiceProtocol.RcHeartbeatRsp)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_ret();
  inline void clear_has_ret();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::int32 version_;
  ::youmecommon::protobuf::int32 ret_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_youme_5frcuserinfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_youme_5frcuserinfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_youme_5frcuserinfo_2eproto();
  friend void protobuf_ShutdownFile_youme_5frcuserinfo_2eproto();

  void InitAsDefaultInstance();
  static RcHeartbeatRsp* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RcUserInfo

// required bytes user_id = 1;
inline bool RcUserInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RcUserInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RcUserInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RcUserInfo::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& RcUserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfo.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcUserInfo::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfo.user_id)
}
inline void RcUserInfo::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcUserInfo.user_id)
}
inline void RcUserInfo::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcUserInfo.user_id)
}
inline ::std::string* RcUserInfo::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcUserInfo.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RcUserInfo::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcUserInfo::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcUserInfo.user_id)
}

// optional bytes nickname = 2;
inline bool RcUserInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RcUserInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RcUserInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RcUserInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& RcUserInfo::nickname() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfo.nickname)
  return nickname_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcUserInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfo.nickname)
}
inline void RcUserInfo::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcUserInfo.nickname)
}
inline void RcUserInfo::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcUserInfo.nickname)
}
inline ::std::string* RcUserInfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcUserInfo.nickname)
  return nickname_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RcUserInfo::release_nickname() {
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcUserInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcUserInfo.nickname)
}

// optional int32 gender = 3;
inline bool RcUserInfo::has_gender() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RcUserInfo::set_has_gender() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RcUserInfo::clear_has_gender() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RcUserInfo::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::youmecommon::protobuf::int32 RcUserInfo::gender() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfo.gender)
  return gender_;
}
inline void RcUserInfo::set_gender(::youmecommon::protobuf::int32 value) {
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfo.gender)
}

// optional bytes country = 4;
inline bool RcUserInfo::has_country() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RcUserInfo::set_has_country() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RcUserInfo::clear_has_country() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RcUserInfo::clear_country() {
  country_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
inline const ::std::string& RcUserInfo::country() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfo.country)
  return country_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcUserInfo::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfo.country)
}
inline void RcUserInfo::set_country(const char* value) {
  set_has_country();
  country_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcUserInfo.country)
}
inline void RcUserInfo::set_country(const void* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcUserInfo.country)
}
inline ::std::string* RcUserInfo::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcUserInfo.country)
  return country_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RcUserInfo::release_country() {
  clear_has_country();
  return country_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcUserInfo::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcUserInfo.country)
}

// optional bytes province = 5;
inline bool RcUserInfo::has_province() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RcUserInfo::set_has_province() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RcUserInfo::clear_has_province() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RcUserInfo::clear_province() {
  province_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
inline const ::std::string& RcUserInfo::province() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfo.province)
  return province_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcUserInfo::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfo.province)
}
inline void RcUserInfo::set_province(const char* value) {
  set_has_province();
  province_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcUserInfo.province)
}
inline void RcUserInfo::set_province(const void* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcUserInfo.province)
}
inline ::std::string* RcUserInfo::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcUserInfo.province)
  return province_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RcUserInfo::release_province() {
  clear_has_province();
  return province_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcUserInfo::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcUserInfo.province)
}

// optional int32 privacy = 6;
inline bool RcUserInfo::has_privacy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RcUserInfo::set_has_privacy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RcUserInfo::clear_has_privacy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RcUserInfo::clear_privacy() {
  privacy_ = 0;
  clear_has_privacy();
}
inline ::youmecommon::protobuf::int32 RcUserInfo::privacy() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfo.privacy)
  return privacy_;
}
inline void RcUserInfo::set_privacy(::youmecommon::protobuf::int32 value) {
  set_has_privacy();
  privacy_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfo.privacy)
}

// optional bytes city = 7;
inline bool RcUserInfo::has_city() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RcUserInfo::set_has_city() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RcUserInfo::clear_has_city() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RcUserInfo::clear_city() {
  city_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
inline const ::std::string& RcUserInfo::city() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfo.city)
  return city_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcUserInfo::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfo.city)
}
inline void RcUserInfo::set_city(const char* value) {
  set_has_city();
  city_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcUserInfo.city)
}
inline void RcUserInfo::set_city(const void* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcUserInfo.city)
}
inline ::std::string* RcUserInfo::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcUserInfo.city)
  return city_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RcUserInfo::release_city() {
  clear_has_city();
  return city_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcUserInfo::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcUserInfo.city)
}

// optional bytes avatar = 8;
inline bool RcUserInfo::has_avatar() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RcUserInfo::set_has_avatar() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RcUserInfo::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RcUserInfo::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_avatar();
}
inline const ::std::string& RcUserInfo::avatar() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfo.avatar)
  return avatar_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcUserInfo::set_avatar(const ::std::string& value) {
  set_has_avatar();
  avatar_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfo.avatar)
}
inline void RcUserInfo::set_avatar(const char* value) {
  set_has_avatar();
  avatar_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcUserInfo.avatar)
}
inline void RcUserInfo::set_avatar(const void* value, size_t size) {
  set_has_avatar();
  avatar_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcUserInfo.avatar)
}
inline ::std::string* RcUserInfo::mutable_avatar() {
  set_has_avatar();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcUserInfo.avatar)
  return avatar_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RcUserInfo::release_avatar() {
  clear_has_avatar();
  return avatar_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcUserInfo::set_allocated_avatar(::std::string* avatar) {
  if (avatar != NULL) {
    set_has_avatar();
  } else {
    clear_has_avatar();
  }
  avatar_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcUserInfo.avatar)
}

// optional bytes signature = 9;
inline bool RcUserInfo::has_signature() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RcUserInfo::set_has_signature() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RcUserInfo::clear_has_signature() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RcUserInfo::clear_signature() {
  signature_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& RcUserInfo::signature() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfo.signature)
  return signature_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcUserInfo::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfo.signature)
}
inline void RcUserInfo::set_signature(const char* value) {
  set_has_signature();
  signature_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcUserInfo.signature)
}
inline void RcUserInfo::set_signature(const void* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcUserInfo.signature)
}
inline ::std::string* RcUserInfo::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcUserInfo.signature)
  return signature_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RcUserInfo::release_signature() {
  clear_has_signature();
  return signature_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcUserInfo::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcUserInfo.signature)
}

// optional string extand_json = 10;
inline bool RcUserInfo::has_extand_json() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RcUserInfo::set_has_extand_json() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RcUserInfo::clear_has_extand_json() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RcUserInfo::clear_extand_json() {
  extand_json_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extand_json();
}
inline const ::std::string& RcUserInfo::extand_json() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfo.extand_json)
  return extand_json_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcUserInfo::set_extand_json(const ::std::string& value) {
  set_has_extand_json();
  extand_json_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfo.extand_json)
}
inline void RcUserInfo::set_extand_json(const char* value) {
  set_has_extand_json();
  extand_json_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcUserInfo.extand_json)
}
inline void RcUserInfo::set_extand_json(const char* value, size_t size) {
  set_has_extand_json();
  extand_json_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcUserInfo.extand_json)
}
inline ::std::string* RcUserInfo::mutable_extand_json() {
  set_has_extand_json();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcUserInfo.extand_json)
  return extand_json_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RcUserInfo::release_extand_json() {
  clear_has_extand_json();
  return extand_json_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcUserInfo::set_allocated_extand_json(::std::string* extand_json) {
  if (extand_json != NULL) {
    set_has_extand_json();
  } else {
    clear_has_extand_json();
  }
  extand_json_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), extand_json);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcUserInfo.extand_json)
}

// optional .YOUMEServiceProtocol.RC_ONLINE_STATE online_state = 11;
inline bool RcUserInfo::has_online_state() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RcUserInfo::set_has_online_state() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RcUserInfo::clear_has_online_state() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RcUserInfo::clear_online_state() {
  online_state_ = 1;
  clear_has_online_state();
}
inline ::YOUMEServiceProtocol::RC_ONLINE_STATE RcUserInfo::online_state() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserInfo.online_state)
  return static_cast< ::YOUMEServiceProtocol::RC_ONLINE_STATE >(online_state_);
}
inline void RcUserInfo::set_online_state(::YOUMEServiceProtocol::RC_ONLINE_STATE value) {
  assert(::YOUMEServiceProtocol::RC_ONLINE_STATE_IsValid(value));
  set_has_online_state();
  online_state_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserInfo.online_state)
}

// -------------------------------------------------------------------

// RcUserBriefInfo

// required bytes user_id = 1;
inline bool RcUserBriefInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RcUserBriefInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RcUserBriefInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RcUserBriefInfo::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& RcUserBriefInfo::user_id() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserBriefInfo.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcUserBriefInfo::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserBriefInfo.user_id)
}
inline void RcUserBriefInfo::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcUserBriefInfo.user_id)
}
inline void RcUserBriefInfo::set_user_id(const void* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcUserBriefInfo.user_id)
}
inline ::std::string* RcUserBriefInfo::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcUserBriefInfo.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RcUserBriefInfo::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcUserBriefInfo::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcUserBriefInfo.user_id)
}

// optional bytes nickname = 2;
inline bool RcUserBriefInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RcUserBriefInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RcUserBriefInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RcUserBriefInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& RcUserBriefInfo::nickname() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserBriefInfo.nickname)
  return nickname_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcUserBriefInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserBriefInfo.nickname)
}
inline void RcUserBriefInfo::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YOUMEServiceProtocol.RcUserBriefInfo.nickname)
}
inline void RcUserBriefInfo::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YOUMEServiceProtocol.RcUserBriefInfo.nickname)
}
inline ::std::string* RcUserBriefInfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:YOUMEServiceProtocol.RcUserBriefInfo.nickname)
  return nickname_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RcUserBriefInfo::release_nickname() {
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RcUserBriefInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:YOUMEServiceProtocol.RcUserBriefInfo.nickname)
}

// optional int32 privacy = 3;
inline bool RcUserBriefInfo::has_privacy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RcUserBriefInfo::set_has_privacy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RcUserBriefInfo::clear_has_privacy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RcUserBriefInfo::clear_privacy() {
  privacy_ = 0;
  clear_has_privacy();
}
inline ::youmecommon::protobuf::int32 RcUserBriefInfo::privacy() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserBriefInfo.privacy)
  return privacy_;
}
inline void RcUserBriefInfo::set_privacy(::youmecommon::protobuf::int32 value) {
  set_has_privacy();
  privacy_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserBriefInfo.privacy)
}

// optional .YOUMEServiceProtocol.RC_ONLINE_STATE online_state = 4;
inline bool RcUserBriefInfo::has_online_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RcUserBriefInfo::set_has_online_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RcUserBriefInfo::clear_has_online_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RcUserBriefInfo::clear_online_state() {
  online_state_ = 1;
  clear_has_online_state();
}
inline ::YOUMEServiceProtocol::RC_ONLINE_STATE RcUserBriefInfo::online_state() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcUserBriefInfo.online_state)
  return static_cast< ::YOUMEServiceProtocol::RC_ONLINE_STATE >(online_state_);
}
inline void RcUserBriefInfo::set_online_state(::YOUMEServiceProtocol::RC_ONLINE_STATE value) {
  assert(::YOUMEServiceProtocol::RC_ONLINE_STATE_IsValid(value));
  set_has_online_state();
  online_state_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcUserBriefInfo.online_state)
}

// -------------------------------------------------------------------

// RcHeartbeatReq

// required int32 version = 1;
inline bool RcHeartbeatReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RcHeartbeatReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RcHeartbeatReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RcHeartbeatReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::youmecommon::protobuf::int32 RcHeartbeatReq::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcHeartbeatReq.version)
  return version_;
}
inline void RcHeartbeatReq::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcHeartbeatReq.version)
}

// -------------------------------------------------------------------

// RcHeartbeatRsp

// required int32 version = 1;
inline bool RcHeartbeatRsp::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RcHeartbeatRsp::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RcHeartbeatRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RcHeartbeatRsp::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::youmecommon::protobuf::int32 RcHeartbeatRsp::version() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcHeartbeatRsp.version)
  return version_;
}
inline void RcHeartbeatRsp::set_version(::youmecommon::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcHeartbeatRsp.version)
}

// required int32 ret = 2;
inline bool RcHeartbeatRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RcHeartbeatRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RcHeartbeatRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RcHeartbeatRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::youmecommon::protobuf::int32 RcHeartbeatRsp::ret() const {
  // @@protoc_insertion_point(field_get:YOUMEServiceProtocol.RcHeartbeatRsp.ret)
  return ret_;
}
inline void RcHeartbeatRsp::set_ret(::youmecommon::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:YOUMEServiceProtocol.RcHeartbeatRsp.ret)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace YOUMEServiceProtocol

#ifndef SWIG
namespace youmecommon {
namespace protobuf {

template <> struct is_proto_enum< ::YOUMEServiceProtocol::RC_ONLINE_STATE> : ::youmecommon::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_youme_5frcuserinfo_2eproto__INCLUDED
